group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2021 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
	<generation template="units" output="units.g.cs"/>
	<generation template="interfaces" output="interfaces.g.cs"/>
	<generation template="classes" output="classes.g.cs"/>
	<generation template="associationTypes" output="associationTypes.g.cs"/>
	<generation template="roleTypes" output="roleTypes.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

m(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta.Lazy
{
    public sealed class LazyM : MetaPopulation, M
    {
        // Units
$meta._.Units:{unit|        internal Lazy$unit._.SingularName$ $unit._.SingularName$;}; separator="\n"$

        // Interfaces
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        internal Lazy$interface._.SingularName$ $interface._.SingularName$;}; separator="\n"$

        // Classes
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        internal Lazy$class._.SingularName$ $class._.SingularName$;}; separator="\n"$

        // M
$meta._.Units:{unit|        $unit._.SingularName$ M.$unit._.SingularName$ => this.$unit._.SingularName$;}; separator="\n"$
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        $interface._.SingularName$ M.$interface._.SingularName$ => this.$interface._.SingularName$;}; separator="\n"$
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        $class._.SingularName$ M.$class._.SingularName$ => this.$class._.SingularName$;}; separator="\n"$
    }
}
>>

units(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class Lazy$unit._.SingularName$ : Unit, $unit._.SingularName$ {
        internal Lazy$unit._.SingularName$(LazyM m, System.Guid id) : base(m, id)
        {
        }
    }

>>

interfaces(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public class Lazy$interface._.SingularName$ : Interface, $interface._.SingularName$ {
        internal Lazy$interface._.SingularName$(LazyM m, System.Guid id) : base(m, id)
        {
        }

$interface._.WorkspaceSubtypesByWorkspaceName.(workspaceName):{subtype|        public $subtype._.SingularName$ As$subtype._.SingularName$ { get;  internal set;\}}; separator="\n"$

$interface._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; internal set; \}}; separator="\n"$

$interface._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; internal set; \}}; separator="\n"$

$interface._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; internal set; \}}; separator="\n"$
    }

>>

classes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public class Lazy$class._.SingularName$ : Class, $class._.SingularName$ {
        internal Lazy$class._.SingularName$(LazyM m, System.Guid id) : base(m, id)
        {
        }

$class._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public IMethodType $methodType._.Name$ { get; internal set; \}}; separator="\n"$

$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$ { get; internal set; \}}; separator="\n"$

$class._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$ { get; internal set; \}}; separator="\n"$
    }

>>

associationTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Composites:{composite|$define_associationTypes(composite)$}; separator="\n"$
}
>>

define_associationTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_associationType(roleType._.associationType)$}; separator="\n"$
>>

define_associationType(associationType) ::= <<
    public class Lazy$associationType._.Name$ : AssociationType, $associationType._.Name$
    {
        internal Lazy$associationType._.Name$(RelationType relationType) : base(relationType)
        {
        }

        $associationType._.ObjectType.SingularName$ Meta.$associationType._.Name$.ObjectType => ((M)this.MetaPopulation).$associationType._.ObjectType.SingularName$;
    }

>>

roleTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta.Lazy
{
$meta._.Composites:{composite|$define_roleTypes(composite)$}; separator="\n"$
}
>>

define_roleTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_roleType(roleType)$}; separator="\n"$
>>

define_roleType(roleType) ::= <<
    public class Lazy$roleType.FullName$ : RoleType, Meta.$roleType.FullName$
    {
        internal Lazy$roleType.FullName$(RelationType relationType) : base(relationType)
        {
        }

$if(roleType.ObjectType.IsComposite)$
        $roleType.ObjectType.SingularName$ Meta.$roleType.FullName$.ObjectType => ((M)this.MetaPopulation).$roleType.ObjectType.SingularName$;
$endif$
    }

>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta.Lazy
{
	public class MetaBuilder
	{
        public M Build() {
            var m =  new LazyM();

            var units = this.BuildUnits(m);
            var interfaces = this.BuildInterfaces(m);
            var classes = this.BuildClasses(m);
            var inheritances = this.BuildInheritances(m);
            var relationTypes = this.BuildRelationTypes(m);
            var methodTypes = this.BuildMethodTypes(m);

            this.AssignPropertyTypes(m);
            this.AssignMethodTypes(m);

            m.Derive(units, interfaces, classes, inheritances, relationTypes, methodTypes);

            return m;
        }

		private Unit[] BuildUnits(LazyM m)
		{
$meta._.Units:{unit|$build_unit(unit)$}; separator="\n"$

            return new Unit[]
            {
$meta._.Units:{unit|                m.$unit.SingularName$}; separator=",\n"$
            };
		}

        private Interface[] BuildInterfaces(LazyM m)
        {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$build_interface(interface)$}; separator="\n"$

            return new Interface[]
            {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|                m.$interface._.SingularName$}; separator=",\n"$
            };
        }

        private Class[] BuildClasses(LazyM m)
        {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$build_class(class)$}; separator="\n"$

            return new Class[]
            {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|                m.$class._.SingularName$}; separator=",\n"$
            };
        }

        private Inheritance[] BuildInheritances(LazyM m)
        {
            return new []
            {$meta._.Composites:{composite|$inheritance(composite)$}$
            };
        }

        private RelationType[] BuildRelationTypes(LazyM m)
        {

            return new RelationType[]
            {
$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|            this.Build$relationType._.Name$(m),}; separator="\n"$
            };
        }

$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|$build_relationType(relationType)$}; separator="\n"$

        private MethodType[] BuildMethodTypes(LazyM m)
		{
		    return new []
                {$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|            this.Build$methodType._.FullName$(m),}; separator="\n"$
                };
		}

        private void AssignPropertyTypes(LazyM m)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(LazyM m)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_methods(composite)$}; separator="\n"$
        }

$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
    }
}
>>

define_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleType $class._.Name$$roleType.Name$;}$
>>

assign_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class._.Name$$roleType.Name$ = relationTypes.$roleType._.RelationType.Name$.RoleType;}$
>>

build_unit(unit) ::= <<
	        m.$unit._.SingularName$ = new Lazy$unit._.SingularName$(m, UnitIds.$unit._.SingularName$)
            {
                UnitTag = UnitTags.$unit._.SingularName$,
                SingularName = UnitNames.$unit._.SingularName$
            };
>>

build_interface(interface) ::= <<
	        m.$interface._.SingularName$ = new Lazy$interface._.SingularName$(m, new System.Guid("$interface._.IdAsString$"))
            {
                SingularName = "$interface._.SingularName$",
                $if(interface.PluralName)$PluralName = "$interface._.PluralName$",$endif$
                $if(interface.AssignedIsSynced)$AssignedIsSynced = $interface._.AssignedIsSynced$$endif$
            };
>>

build_class(class) ::= <<
	        m.$class._.SingularName$ = new Lazy$class._.SingularName$(m, new System.Guid("$class._.IdAsString$"))
            {
$if(!class.HasDatabaseOrigin)$                AssignedOrigin = Allors.Origin.$class._.Origin$,$endif$
                SingularName = "$class._.SingularName$",
                PluralName = "$class._.PluralName$",
                $if(class.AssignedIsSynced)$AssignedIsSynced = $class._.AssignedIsSynced$$endif$
            };
>>

inheritance(composite) ::= <<$composite._.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$                new Inheritance(m){ Subtype = m.$composite._.SingularName$, Supertype = m.$superType.SingularName$},>>

build_relationType(relationType) ::= <<
        private RelationType Build$relationType._.Name$(LazyM m)
        {
            var relationType = new RelationType(m.$relationType._.AssociationType._.ObjectType.SingularName$, new System.Guid("$relationType._.IdAsString$"), v => new Lazy$relationType._.AssociationType._.Name$(v), v => new Lazy$relationType._.RoleType._.FullName$(v))
            {
$if(!relationType._.HasDatabaseOrigin)$                AssignedOrigin = Origin.$relationType._.Origin$,$endif$
$if(relationType.Multiplicity)$		        AssignedMultiplicity = Allors.Multiplicity.$relationType._.Multiplicity$,$endif$
$if(relationType.IsDerived)$		        IsDerived = $relationType._.IsDerived$,$endif$
$if(relationType.IsSynced)$		    IsSynced = $relationType._.IsSynced$,$endif$
                RoleType =
                {
                    ObjectType = m.$relationType._.RoleType._.ObjectType.Name$,
                    SingularName = "$relationType._.RoleType.SingularName$",
                    PluralName = "$relationType._.RoleType.PluralName$",
$if(relationType.RoleType.IsRequired)$		            IsRequired = $relationType._.RoleType.IsRequired$,$endif$
$if(relationType.RoleType.IsUnique)$		          IsUnique = $relationType._.RoleType.IsUnique$,$endif$
$if(relationType.RoleType.Size)$		            Size = $relationType._.RoleType.Size$,$endif$
$if(relationType.RoleType.Precision)$		        Precision = $relationType._.RoleType.Precision$,$endif$
$if(relationType.RoleType.Scale)$		        Scale = $relationType._.RoleType.Scale$,$endif$
$if(relationType.RoleType.MediaType)$		        MediaType = "$relationType._.RoleType.MediaType$",$endif$
                },
            };

            m.$relationType._.AssociationType._.ObjectType.SingularName$.$relationType.RoleType._.Name$ = ($relationType._.RoleType._.FullName$)relationType.RoleType;

            return relationType;
        }
>>

build_methodType(methodType) ::= <<
        private MethodType Build$methodType._.FullName$(LazyM m)
        {
            var methodType = new MethodType(m.$methodType._.ObjectType.Name$, new System.Guid("$methodType._.IdAsString$"))
            {
                Name = "$methodType._.Name$",
            };

            m.$methodType._.ObjectType.Name$.$methodType._.Name$ = methodType;
            return methodType;
        }
>>

assign_properties(composite) ::= <<
$composite._.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|$assign_roleType(roleType)$}; separator="\n"$
$composite._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|$assign_associationType(associationType)$}; separator="\n"$
>>

assign_roleType(roleType) ::= <<
                m.$composite._.SingularName$.$roleType._.Name$ = m.$roleType._.AssociationType._.ObjectType._.SingularName$.$roleType._.Name$;
>>

assign_associationType(associationType) ::= <<
                m.$composite._.SingularName$.$associationType._.Name$ = ($associationType._.Name$) m.$associationType._.ObjectType._.SingularName$.$associationType._.RoleType._.Name$.AssociationType;
>>

assign_methods(composite) ::= <<
$composite._.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|$assign_methodType(methodType)$}; separator="\n"$
>>

assign_methodType(methodType) ::= <<
                m.$composite._.SingularName$.$methodType._.Name$ = m.$methodType._.ObjectType._.SingularName$.$methodType._.Name$;
>>
