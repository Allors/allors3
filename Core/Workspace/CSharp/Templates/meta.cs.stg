group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.0>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2016 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="builder" output="builder.g.cs"/>
    <generation template="meta" output="M.g.cs"/>
    <generation template="tree" output="tree.g.cs"/>
</generations>
>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta
{
	public partial class MetaBuilder
	{
	    #region Domains
        internal class Domains
        {
$meta.Domains:{domain|              public Domain $domain.Name$;}; separator="\n"$
        }
        #endregion

	    #region ObjectTypes
        internal class ObjectTypes
        {
$meta.Units:{unit|              public Unit $unit.SingularName$;}; separator="\n"$
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|              public Interface $interface.SingularName$;}; separator="\n"$
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|              public Class $class.SingularName$;}; separator="\n"$
        }
        #endregion

	    #region RelationTypes
	    internal class RelationTypes
        {
$meta.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|              public RelationType $relationType.Name$;}; separator="\n"$
        }
        #endregion

	    #region RoleClasses
        internal class RoleClasses
        {
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$define_roleClasses(class)$}; separator="\n"$

            internal RoleClasses(ObjectTypes objectTypes, RelationTypes relationTypes)
            {
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$assign_roleClasses(class)$}; separator="\n"$
            }
        }
        #endregion

	    #region MethodTypes
        internal class MethodTypes
        {
$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|              public MethodType $methodType.FullName$;}; separator="\n"$
        }
        #endregion

        public MetaPopulation Build() {
            var meta =  new MetaPopulation();
            var domains = new Domains();
            var objectTypes = new ObjectTypes();
            var relationTypes = new RelationTypes();
            var methodTypes = new MethodTypes();

            this.BuildDomains(meta, domains);
            this.BuildDomainInheritances(meta, domains);
            this.BuildUnits(meta, domains, objectTypes);
            this.BuildInterfaces(meta, domains, objectTypes);
            this.BuildClasses(meta, domains, objectTypes);
            this.BuildInheritances(meta, domains, objectTypes);
            this.BuildRelationTypes(meta, domains, objectTypes, relationTypes);
            this.BuildMethodTypes(meta, domains, objectTypes, methodTypes);

            var roleClasses = new RoleClasses(objectTypes, relationTypes);

$meta.Domains:{domain|            this.Build$domain.Name$(meta, domains, objectTypes, relationTypes, methodTypes, roleClasses);}; separator="\n"$

            return meta;
        }

        private void BuildDomains(MetaPopulation meta, Domains domains)
        {
$meta.Domains:{domain|$build_domain(domain)$}; separator="\n"$
        }

        private void BuildDomainInheritances(MetaPopulation meta, Domains domains)
        {$meta.Domains:{domain|$build_domain_inheritance(domain)$}$
        }

		private void BuildUnits(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$meta.Units:{unit|$build_unit(unit)$}; separator="\n"$
		}

        private void BuildInterfaces(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
        {
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$build_interface(interface)$}; separator="\n"$
        }

        private void BuildClasses(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
        {
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$build_class(class)$}; separator="\n"$
        }

        private void BuildInheritances(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
        {$meta.Composites:{composite|$inheritance(composite)$}$
        }

        private void BuildRelationTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
$meta.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|            this.Build$relationType.Name$(meta, domains, objectTypes, relationTypes);}; separator="\n"$
        }

$meta.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|$build_relationType(relationType)$}; separator="\n"$

        private void BuildMethodTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
		{
$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|            this.Build$methodType.FullName$(meta, domains, objectTypes, methodTypes);}; separator="\n"$
		}

$meta.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
    }
}
>>

define_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleClass $class.Name$$roleType.SingularName$;}$
>>

assign_roleClasses(class) ::= <<
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class.Name$$roleType.SingularName$ = relationTypes.$roleType.RelationType.Name$.RoleClassByAssociationTypeClass[objectTypes.$class.Name$];}$
>>

build_domain(meta) ::= <<
            domains.$meta.Name$ = new Domain(meta, new System.Guid("$meta.Id$"))
            {
                Name = "$meta.Name$"
            };
>>

build_domain_inheritance(domain) ::= <<
$domain.DirectSuperdomains:{superDomain|$\n$             domains.$domain.Name$.AddDirectSuperdomain(domains.$superDomain.Name$);}$
>>

build_unit(unit) ::= <<
	        objectTypes.$unit.SingularName$ = new Unit(meta, UnitIds.$unit.SingularName$)
            {
                UnitTag = UnitTags.$unit.SingularName$,
                SingularName = UnitNames.$unit.SingularName$
            };
>>

build_interface(interface) ::= <<
	        objectTypes.$interface.SingularName$ = new Interface(meta, new System.Guid("$interface.IdAsString$"))
            {
                SingularName = "$interface.SingularName$",
                $if(interface.PluralName)$PluralName = "$interface.PluralName$",$endif$
                $if(interface.AssignedIsSynced)$AssignedIsSynced = $interface.AssignedIsSynced$$endif$
            };
>>

build_class(class) ::= <<
	        objectTypes.$class.SingularName$ = new Class(meta, new System.Guid("$class.IdAsString$"))
            {
$if(!class.IsRemote)$                AssignedOrigin = Allors.Origin.$class.Origin$,$endif$
                SingularName = "$class.SingularName$",
                PluralName = "$class.PluralName$",
                $if(class.AssignedIsSynced)$AssignedIsSynced = $class.AssignedIsSynced$$endif$
            };
>>

inheritance(composite) ::= <<$composite.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$            new Inheritance(meta){ Subtype = objectTypes.$composite.SingularName$, Supertype = objectTypes.$superType.SingularName$};>>

build_relationType(relationType) ::= <<
        private void Build$relationType.Name$(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.$relationType.Name$ = new RelationType(objectTypes.$relationType.AssociationType.ObjectType.SingularName$, new System.Guid("$relationType.IdAsString$"))
            {
$if(!relationType.IsRemote)$                AssignedOrigin = Origin.$relationType.Origin$,$endif$
$if(relationType.Multiplicity)$		        AssignedMultiplicity = Allors.Multiplicity.$relationType.Multiplicity$,$endif$
$if(relationType.IsDerived)$		        IsDerived = $relationType.IsDerived$,$endif$
$if(relationType.IsSynced)$		    IsSynced = $relationType.IsSynced$,$endif$
$if(relationType.IsIndexed)$		        IsIndexed = $relationType.IsIndexed$,$endif$
                RoleType =
                {
                    ObjectType = objectTypes.$relationType.RoleType.ObjectType.Name$,
                    SingularName = "$relationType.RoleType.SingularName$",
                    PluralName = "$relationType.RoleType.PluralName$",
$if(relationType.RoleType.IsRequired)$		            IsRequired = $relationType.RoleType.IsRequired$,$endif$
$if(relationType.RoleType.IsUnique)$		          IsUnique = $relationType.RoleType.IsUnique$,$endif$
$if(relationType.RoleType.Size)$		            Size = $relationType.RoleType.Size$,$endif$
$if(relationType.RoleType.Precision)$		        Precision = $relationType.RoleType.Precision$,$endif$
$if(relationType.RoleType.Scale)$		        Scale = $relationType.RoleType.Scale$,$endif$
$if(relationType.RoleType.MediaType)$		        MediaType = "$relationType.RoleType.MediaType$",$endif$
                },
            };
        }
>>

build_methodType(methodType) ::= <<
        private void Build$methodType.FullName$(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
        {
            methodTypes.$methodType.FullName$ = new $if(methodType.Composite.IsClass)$MethodClass$else$MethodInterface$endif$(objectTypes.$methodType.Composite.Name$, new System.Guid("$methodType.IdAsString$"))
            {
                Name = "$methodType.Name$",
            };
        }
>>


meta(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta
{
	public class M
	{
		// Units
$meta.Units:{unit|         public readonly Meta$unit.SingularName$ $unit.SingularName$;}; separator="\n"$

		// Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|         public readonly Meta$interface.SingularName$ $interface.SingularName$;}; separator="\n"$

		// Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|         public readonly Meta$class.SingularName$ $class.SingularName$;}; separator="\n"$

		public M(MetaPopulation meta)
		{
		    // Units
$meta.Units:{unit|             $unit.SingularName$ = new Meta$unit.SingularName$(meta);}; separator="\n"$

		    // Interfaces
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|             $interface.SingularName$ = new Meta$interface.SingularName$(meta);}; separator="\n"$

		    // Classes
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|             $class.SingularName$ = new Meta$class.SingularName$(meta);}; separator="\n"$
		}
	}

$meta.Units:{unit|$meta_unit(unit)$}; separator="\n\n"$
$meta.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$meta_interface(interface)$}; separator="\n\n"$
$meta.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$meta_class(class)$}; separator="\n\n"$
}
>>

meta_unit(unit) ::= <<
    public partial class Meta$unit.SingularName$ : MetaUnit
	{
		public override Unit Unit { get; }

		internal Meta$unit.SingularName$(MetaPopulation meta)
        {
			this.Unit = (Unit) meta.Find(UnitIds.$unit.SingularName$);
        }
	}
>>

meta_interface(interface) ::= <<
    public partial class Meta$interface.SingularName$ : MetaInterface
	{
		public override Interface Interface { get; }

        // Methods
$interface.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|         public MethodType $methodType.Name$;}; separator="\n"$

		// Roles
$interface.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|         public RoleType $roleType.Name$;}; separator="\n"$

		// Associations
$interface.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|         public AssociationType $associationType.Name$;}; separator="\n"$

		internal Meta$interface.SingularName$(MetaPopulation meta)
        {
			this.Interface = (Interface) meta.Find(new System.Guid("$interface.Id$"));

            // Methods
$interface.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|             this.$methodType.Name$ = (MethodType)meta.Find(new System.Guid("$methodType.Id$"));}; separator="\n"$

            // Roles
$interface.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|             this.$roleType.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType.RelationType.Id$"))).RoleType;}; separator="\n"$

            // Associations
$interface.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|           this.$associationType.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

meta_class(class) ::= <<
    public partial class Meta$class.SingularName$ : MetaClass
	{
		public override Class Class { get; }

        // Methods
$class.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|         public MethodClass $methodType.Name$;}; separator="\n"$

		// Roles
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|         public RoleClass $roleType.Name$;}; separator="\n"$

		// Associations
$class.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|         public AssociationType $associationType.Name$;}; separator="\n"$

		internal Meta$class.SingularName$(MetaPopulation meta)
        {
			this.Class = (Class) meta.Find(new System.Guid("$class.Id$"));

            // Methods
$class.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|             this.$methodType.Name$ = ((MethodType)meta.Find(new System.Guid("$methodType.Id$"))).MethodClassBy(this.Class);}; separator="\n"$

            // Roles
$class.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|             this.$roleType.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType.RelationType.Id$"))).RoleClassBy(this.Class);}; separator="\n"$

            // Associations
$class.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|           this.$associationType.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

tree(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta
{
    using Data;
	using System;

$meta.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$treeComposite(composite)$}; separator="\n\n"$
}
>>

treeComposite(composite) ::= <<
    public class $composite.SingularName$NodeBuilder : NodeBuilder {

        public M M { get; }

		public $composite.SingularName$NodeBuilder(M m, Action<$composite.SingularName$NodeBuilder> build){
            this.M = m;
			if(build != null){
				build(this);
			}
		}

$composite.WorkspaceCompositeRoleTypesByWorkspaceName.(workspaceName):{role|$treeRole()$}; separator="\n"$
$composite.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{association|$treeAssociation()$}; separator="\n"$

$composite.WorkspaceSubtypesByWorkspaceName.(workspaceName):{type|$treeSubType(type)$}$
	}
>>

treeSubType(type) ::= <<
$type.WorkspaceCompositeRoleTypesByWorkspaceName.(workspaceName):{role|$treeRoleSubType()$}; separator="\n"$
$type.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{association|$treeAssociationSubType()$}; separator="\n"$
>>

treeRole() ::= <<
		public $composite.SingularName$NodeBuilder $role.Name$(Action<$role.ObjectType.Name$NodeBuilder> build = null)
$treeRoleBody()$
>>

treeRoleSubType() ::= <<
		public $composite.SingularName$NodeBuilder $type.Name$_$role.Name$(Action<$role.ObjectType.Name$NodeBuilder> build = null)
$treeRoleBody()$
>>

treeRoleBody() ::= <<
		{
			var builder = new $role.ObjectType.Name$NodeBuilder(M, build);
			builder.PropertyType = M.$role.AssociationType.ObjectType.Name$.$role.Name$;
			this.Add(builder);
			return this;
		}
>>

treeAssociation() ::= <<
		public $composite.SingularName$NodeBuilder $association.Name$(Action<$association.ObjectType.Name$NodeBuilder> build = null)
$treeAssociationBody()$
>>

treeAssociationSubType() ::= <<
		public $composite.SingularName$NodeBuilder $type.Name$_$association.Name$(Action<$association.ObjectType.Name$NodeBuilder> build = null)
$treeAssociationBody()$
>>

treeAssociationBody() ::= <<
		{
			var builder = new $association.ObjectType.Name$NodeBuilder(M, build);
			builder.PropertyType = M.$association.RoleType.ObjectType.Name$.$association.Name$;
			this.Add(builder);
			return this;
		}
>>
