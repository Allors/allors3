group AllorsCSharpRepository;

TemplateId() ::= <<7B7D955D-7C87-4198-A40D-4B70CABC7525>>
TemplateName() ::= <<Allors C# Workspace Meta>>
TemplateVersion() ::= <<3.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, workspaceName) ::= <<
$!
Copyright 2002-2021 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="m" output="m.g.cs"/>
	<generation template="units" output="units.g.cs"/>
	<generation template="interfaces" output="interfaces.g.cs"/>
	<generation template="classes" output="classes.g.cs"/>
	<generation template="associationTypes" output="associationTypes.g.cs"/>
	<generation template="roleTypes" output="roleTypes.g.cs"/>
    <generation template="builder" output="builder.g.cs"/>
</generations>
>>

m(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta
{
    public partial class MetaPopulation
    {
        // Units
$meta._.Units:{unit|        public $unit._.SingularName$ $unit._.SingularName$;}; separator="\n"$

        // Interfaces
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|        public $interface._.SingularName$ $interface._.SingularName$;}; separator="\n"$

        // Classes
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|        public $class._.SingularName$ $class._.SingularName$;}; separator="\n"$
    }
}
>>

units(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta._.Units:{unit|$define_unit(unit)$}; separator="\n"$
}
>>

define_unit(unit) ::= <<
    public class $unit._.SingularName$ : Unit {
        public $unit._.SingularName$(MetaPopulation metaPopulation, System.Guid id) : base(metaPopulation, id)
        {
        }
    }

>>

interfaces(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta._.Interfaces:{interface|$define_interface(interface)$}; separator="\n"$
}
>>

define_interface(interface) ::= <<
    public class $interface._.SingularName$ : Interface {
        public $interface._.SingularName$(MetaPopulation metaPopulation, System.Guid id) : base(metaPopulation, id)
        {
        }

$interface._.WorkspaceSubtypesByWorkspaceName.(workspaceName):{subtype|        public $subtype._.SingularName$ As$subtype._.SingularName$ => this.M.$subtype._.SingularName$;}; separator="\n"$

$interface._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType._.Name$;}; separator="\n"$

$interface._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$;}; separator="\n"$

$interface._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$;}; separator="\n"$
    }

>>

classes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta._.Classes:{class|$define_class(class)$}; separator="\n"$
}
>>

define_class(class) ::= <<
    public class $class._.SingularName$ : Class {
        public $class._.SingularName$(MetaPopulation metaPopulation, System.Guid id) : base(metaPopulation, id)
        {
        }

$class._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType._.Name$;}; separator="\n"$

$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public $roleType._.FullName$ $roleType._.Name$;}; separator="\n"$

$class._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public $associationType._.Name$ $associationType._.Name$;}; separator="\n"$
    }

>>

associationTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta._.Composites:{composite|$define_associationTypes(composite)$}; separator="\n"$
}
>>

define_associationTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_associationType(roleType._.associationType)$}; separator="\n"$
>>

define_associationType(associationType) ::= <<
    public class $associationType._.Name$ : AssociationType
    {
        public $associationType._.Name$(RelationType relationType) : base(relationType)
        {
        }

        public $associationType._.ObjectType.SingularName$ $associationType._.ObjectType.SingularName$ => this.M.$associationType._.ObjectType.SingularName$;
    }

>>

roleTypes(meta, workspaceName) ::= <<
namespace Allors.Workspace.Meta
{
$meta._.Composites:{composite|$define_roleTypes(composite)$}; separator="\n"$
}
>>

define_roleTypes(composite) ::= <<
$composite._.WorkspaceExclusiveRoleTypesByWorkspaceName.(workspaceName):{roleType|$define_roleType(roleType)$}; separator="\n"$
>>

define_roleType(roleType) ::= <<
    public class $roleType.FullName$ : RoleType
    {
        public $roleType.FullName$(RelationType relationType) : base(relationType)
        {
        }
$if(roleType.ObjectType.IsComposite)$
        public $roleType.ObjectType.SingularName$ $roleType.ObjectType.SingularName$ => this.M.$roleType.ObjectType.SingularName$;
$endif$
    }

>>

meta(meta, workspaceName) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Meta
{
	public partial class MetaPopulation
	{
		// Units
$meta._.Units:{unit|         public readonly $unit._.SingularName$ $unit._.SingularName$;}; separator="\n"$

		// Interfaces
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|         public readonly $interface._.SingularName$ $interface._.SingularName$;}; separator="\n"$

		// Classes
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|         public readonly $class._.SingularName$ $class._.SingularName$;}; separator="\n"$

		public M(MetaPopulation meta)
		{
		    // Units
$meta._.Units:{unit|             $unit._.SingularName$ = new $unit._.SingularName$(meta);}; separator="\n"$

		    // Interfaces
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|             $interface._.SingularName$ = new $interface._.SingularName$(meta);}; separator="\n"$

		    // Classes
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|             $class._.SingularName$ = new $class._.SingularName$(meta);}; separator="\n"$
		}
	}

$meta._.Units:{unit|$meta_unit(unit)$}; separator="\n\n"$
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$meta_interface(interface)$}; separator="\n\n"$
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$meta_class(class)$}; separator="\n\n"$
}
>>

meta_unit(unit) ::= <<
    public partial class $unit._.SingularName$ : MetaUnit
	{
		public override Unit Unit { get; }

		internal $unit._.SingularName$(MetaPopulation meta)
        {
			this.Unit = (Unit) meta.Find(UnitIds.$unit._.SingularName$);
        }
	}
>>

meta_interface(interface) ::= <<
    public partial class $interface._.SingularName$ : MetaInterface
	{
		public override Interface Interface { get; }

$interface._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType._.Name$;}; separator="\n"$

$interface._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public RoleType $roleType._.Name$;}; separator="\n"$

$interface._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public AssociationType $associationType._.Name$;}; separator="\n"$

		internal $interface._.SingularName$(MetaPopulation meta)
        {
			this.Interface = (Interface) meta.Find(new System.Guid("$interface._.Id$"));

$interface._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        this.$methodType._.Name$ = (MethodType)meta.Find(new System.Guid("$methodType._.Id$"));}; separator="\n"$

$interface._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        this.$roleType._.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType._.RelationType.Id$"))).RoleType;}; separator="\n"$

$interface._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        this.$associationType._.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType._.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

meta_class(class) ::= <<
    public partial class $class._.SingularName$ : MetaClass
	{
		public override Class Class { get; }

$class._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        public MethodType $methodType._.Name$;}; separator="\n"$

$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        public RoleType $roleType._.Name$;}; separator="\n"$

$class._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        public AssociationType $associationType._.Name$;}; separator="\n"$

		internal $class._.SingularName$(MetaPopulation meta)
        {
			this.Class = (Class) meta.Find(new System.Guid("$class._.Id$"));

$class._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|        this.$methodType._.Name$ = meta.$methodType._.ObjectType._.SingularName$.$methodType._.Name$ ;}; separator="\n"$

$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|        this.$roleType._.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType._.RelationType.Id$"))).RoleType;}; separator="\n"$

$class._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|        this.$associationType._.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType._.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

builder(meta, workspaceName) ::= <<
// <auto-generated />
namespace Allors.Workspace.Meta
{
	public partial class MetaBuilder
	{
        public MetaPopulation Build() {
            var meta =  new MetaPopulation();

            var units = this.BuildUnits(meta);
            var interfaces = this.BuildInterfaces(meta);
            var classes = this.BuildClasses(meta);
            var inheritances = this.BuildInheritances(meta);
            var relationTypes = this.BuildRelationTypes(meta);
            var methodTypes = this.BuildMethodTypes(meta);

            this.AssignPropertyTypes(meta);
            this.AssignMethodTypes(meta);

            meta.Derive(units, interfaces, classes, inheritances, relationTypes, methodTypes);

            return meta;
        }

		private Unit[] BuildUnits(MetaPopulation meta)
		{
$meta._.Units:{unit|$build_unit(unit)$}; separator="\n"$

            return new Unit[]
            {
$meta._.Units:{unit|                meta.$unit.SingularName$}; separator=",\n"$
            };
		}

        private Interface[] BuildInterfaces(MetaPopulation meta)
        {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|$build_interface(interface)$}; separator="\n"$

            return new Interface[]
            {
$meta._.WorkspaceInterfacesByWorkspaceName.(workspaceName):{interface|                meta.$interface._.SingularName$}; separator=",\n"$
            };
        }

        private Class[] BuildClasses(MetaPopulation meta)
        {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|$build_class(class)$}; separator="\n"$

            return new Class[]
            {
$meta._.WorkspaceClassesByWorkspaceName.(workspaceName):{class|                meta.$class._.SingularName$}; separator=",\n"$
            };
        }

        private Inheritance[] BuildInheritances(MetaPopulation meta)
        {
            return new []
            {$meta._.Composites:{composite|$inheritance(composite)$}$
            };
        }

        private RelationType[] BuildRelationTypes(MetaPopulation meta)
        {

            return new RelationType[]
            {
$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|            this.Build$relationType._.Name$(meta),}; separator="\n"$
            };
        }

$meta._.WorkspaceRelationTypesByWorkspaceName.(workspaceName):{relationType|$build_relationType(relationType)$}; separator="\n"$

        private MethodType[] BuildMethodTypes(MetaPopulation meta)
		{
		    return new []
                {$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|            this.Build$methodType._.FullName$(meta),}; separator="\n"$
                };
		}

        private void AssignPropertyTypes(MetaPopulation meta)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_properties(composite)$}; separator="\n"$
        }

        private void AssignMethodTypes(MetaPopulation meta)
        {
$meta._.WorkspaceCompositesByWorkspaceName.(workspaceName):{composite|$assign_methods(composite)$}; separator="\n"$
        }

$meta._.WorkspaceMethodTypesByWorkspaceName.(workspaceName):{methodType|$build_methodType(methodType)$}; separator="\n"$
    }
}
>>

define_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$             public RoleType $class._.Name$$roleType.Name$;}$
>>

assign_roleClasses(class) ::= <<
$class._.WorkspaceRoleTypesByWorkspaceName.(workspaceName):{roleType|$\n$                 this.$class._.Name$$roleType.Name$ = relationTypes.$roleType._.RelationType.Name$.RoleType;}$
>>

build_domain(meta) ::= <<
            domains.$meta._.Name$ = new Domain(meta, new System.Guid("$meta._.Id$"))
            {
                Name = "$meta._.Name$"
            };
>>

build_unit(unit) ::= <<
	        meta.$unit._.SingularName$ = new $unit._.SingularName$(meta, UnitIds.$unit._.SingularName$)
            {
                UnitTag = UnitTags.$unit._.SingularName$,
                SingularName = UnitNames.$unit._.SingularName$
            };
>>

build_interface(interface) ::= <<
	        meta.$interface._.SingularName$ = new $interface._.SingularName$(meta, new System.Guid("$interface._.IdAsString$"))
            {
                SingularName = "$interface._.SingularName$",
                $if(interface.PluralName)$PluralName = "$interface._.PluralName$",$endif$
                $if(interface.AssignedIsSynced)$AssignedIsSynced = $interface._.AssignedIsSynced$$endif$
            };
>>

build_class(class) ::= <<
	        meta.$class._.SingularName$ = new $class._.SingularName$(meta, new System.Guid("$class._.IdAsString$"))
            {
$if(!class.HasDatabaseOrigin)$                AssignedOrigin = Allors.Origin.$class._.Origin$,$endif$
                SingularName = "$class._.SingularName$",
                PluralName = "$class._.PluralName$",
                $if(class.AssignedIsSynced)$AssignedIsSynced = $class._.AssignedIsSynced$$endif$
            };
>>

inheritance(composite) ::= <<$composite._.WorkspaceDirectSupertypesByWorkspaceName.(workspaceName):{superType|$build_inheritance(composite, superType)$}$>>
build_inheritance(composite, superType) ::= <<$\n$                new Inheritance(meta){ Subtype = meta.$composite._.SingularName$, Supertype = meta.$superType.SingularName$},>>

build_relationType(relationType) ::= <<
        private RelationType Build$relationType._.Name$(MetaPopulation meta)
        {
            var relationType = new RelationType(meta.$relationType._.AssociationType._.ObjectType.SingularName$, new System.Guid("$relationType._.IdAsString$"), v => new $relationType._.AssociationType._.Name$(v), v => new $relationType._.RoleType._.FullName$(v))
            {
$if(!relationType._.HasDatabaseOrigin)$                AssignedOrigin = Origin.$relationType._.Origin$,$endif$
$if(relationType.Multiplicity)$		        AssignedMultiplicity = Allors.Multiplicity.$relationType._.Multiplicity$,$endif$
$if(relationType.IsDerived)$		        IsDerived = $relationType._.IsDerived$,$endif$
$if(relationType.IsSynced)$		    IsSynced = $relationType._.IsSynced$,$endif$
                RoleType =
                {
                    ObjectType = meta.$relationType._.RoleType._.ObjectType.Name$,
                    SingularName = "$relationType._.RoleType.SingularName$",
                    PluralName = "$relationType._.RoleType.PluralName$",
$if(relationType.RoleType.IsRequired)$		            IsRequired = $relationType._.RoleType.IsRequired$,$endif$
$if(relationType.RoleType.IsUnique)$		          IsUnique = $relationType._.RoleType.IsUnique$,$endif$
$if(relationType.RoleType.Size)$		            Size = $relationType._.RoleType.Size$,$endif$
$if(relationType.RoleType.Precision)$		        Precision = $relationType._.RoleType.Precision$,$endif$
$if(relationType.RoleType.Scale)$		        Scale = $relationType._.RoleType.Scale$,$endif$
$if(relationType.RoleType.MediaType)$		        MediaType = "$relationType._.RoleType.MediaType$",$endif$
                },
            };

            meta.$relationType._.AssociationType._.ObjectType.SingularName$.$relationType.RoleType._.Name$ = ($relationType._.RoleType._.FullName$)relationType.RoleType;

            return relationType;
        }
>>

build_methodType(methodType) ::= <<
        private MethodType Build$methodType._.FullName$(MetaPopulation meta)
        {
            return meta.$methodType._.ObjectType.Name$.$methodType._.Name$ = new MethodType(meta.$methodType._.ObjectType.Name$, new System.Guid("$methodType._.IdAsString$"))
            {
                Name = "$methodType._.Name$",
            };
        }
>>

assign_properties(composite) ::= <<
$composite._.WorkspaceInheritedRoleTypesByWorkspaceName.(workspaceName):{roleType|$assign_roleType(roleType)$}; separator="\n"$
$composite._.WorkspaceAssociationTypesByWorkspaceName.(workspaceName):{associationType|$assign_associationType(associationType)$}; separator="\n"$
>>

assign_roleType(roleType) ::= <<
                meta.$composite._.SingularName$.$roleType._.Name$ = meta.$roleType._.AssociationType._.ObjectType._.SingularName$.$roleType._.Name$;
>>

assign_associationType(associationType) ::= <<
                meta.$composite._.SingularName$.$associationType._.Name$ = ($associationType._.Name$) meta.$associationType._.ObjectType._.SingularName$.$associationType._.RoleType._.Name$.AssociationType;
>>

assign_methods(composite) ::= <<
$composite._.WorkspaceInheritedMethodTypesByWorkspaceName.(workspaceName):{methodType|$assign_methodType(methodType)$}; separator="\n"$
>>

assign_methodType(methodType) ::= <<
                meta.$composite._.SingularName$.$methodType._.Name$ = meta.$methodType._.ObjectType._.SingularName$.$methodType._.Name$;
>>
