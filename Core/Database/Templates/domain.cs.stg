delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors C# Domain>>
TemplateVersion() ::= <<3.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2016 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.DatabaseInterfaces:{interface|<generation template="castInterface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.DatabaseClasses:{class|<generation template="castClass" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
	$meta.MethodTypes:{methodType|<generation template="methodType" input="$methodType.Id $" output="$methodType.FullName$.g.cs"/>}$
</generations>
>>

castInterface(meta, objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta, interface) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
$interface.XmlDocComment$
	public partial interface $interface.name$ : $if(interface.existDirectSupertypes)$ $interface.directSupertypes:{directSupertype|$directSupertype.SingularName$,}$ $endif$ Allors.IObject
	{
$interface.exclusiveDatabaseRoleTypes:{roleType|$interfaceExclusiveRoleType_Interface()$}$
$interface.exclusiveDatabaseAssociationTypes:{associationType|$interfaceExclusiveAssociationType_Interface()$}$
$interface.exclusiveMethodTypes:{methodType|$interfaceExclusiveMethodType_Interface()$}$
	}

	public partial interface $interface.name$Builder : $interface.DirectSupertypes:{directSupertype|$directSupertype.Name$Builder ,}$ global::System.IDisposable
	{
$interface.exclusiveDatabaseRoleTypes:{roleType|$interfaceExclusiveRoleTypes_Builder()$}$
	}

$objectType_Plural()$

}
>>

interfaceExclusiveAssociationType_Interface() ::= <<
$\n$
$associationType.RelationType.XmlDocComment$
$if(associationType.IsMany)$
		global::Allors.Extent<$associationType.ObjectType.Name$> $associationType.PluralPropertyName$
		{
			get;
		}

		bool Exist$associationType.PluralPropertyName$
		{
			get;
		}
$else$
		$associationType.ObjectType.Name$ $associationType.SingularPropertyName$
		{
			get;
		}

        bool Exist$associationType.SingularPropertyName$
		{
			get;
		}
$endif$
>>


interfaceExclusiveRoleType_Interface() ::= <<
$\n$
$roleType.RelationType.XmlDocComment$
$if(roleType.ObjectType.IsUnit)$
		bool Exist$roleType.SingularPropertyName${get;}

		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$
		{
			get;
			set;
		}

		void Remove$roleType.SingularPropertyName$();
$else$
$if(roleType.IsMany)$
		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		global::Allors.Extent<$roleType_ObjectType(roleType)$> $roleType.PluralPropertyName$
		{
			get;
			set;
		}

		void Add$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);

		void Remove$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);

		void Remove$roleType.PluralPropertyName$();
$else$
		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$
		{
			get;
			set;
		}

		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
>>

interfaceExclusiveMethodType_Interface() ::= <<
$\n$
$methodType.XmlDocComment$
		$methodType.FullName$ $methodType.Name$();

		$methodType.FullName$ $methodType.Name$(System.Action<$methodType.FullName$> action);
>>

interfaceExclusiveRoleTypes_Builder() ::= <<
$if(roleType.ObjectType.IsUnit)$
		$objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}
$else$
$if(roleType.IsOne)$
		$objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$

		global::System.Collections.Generic.List<$objectType_Name(roleType.ObjectType)$> $roleType.PropertyName$ {get;}

$endif$
$endif$
>>


castClass(meta, objectType) ::= <<
$class(meta,objectType)$
>>


class(meta,class) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
$class.XmlDocComment$
	public partial class $class.name$ : Allors.IObject $class.directSupertypes:{directSupertype|, $directSupertype.SingularName$}$
	{
		private readonly IStrategy strategy;
		private readonly Allors.Meta.M m;

		public $class.name$(Allors.IStrategy strategy)
		{
			this.strategy = strategy;
            this.m = this.strategy.Session.Database.Meta();
		}

		public Allors.Meta.M M => m;

		public Allors.Meta.Meta$class.name$ Meta => m.$class.name$;

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static $class.name$ Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return ($class.name$) allorsSession.Instantiate(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }

$class.DatabaseRoleClasses:{roleClass|$classConcreteRoleType_Class()$}$
$class.DatabaseAssociationTypes:{associationType|$classAssociationType_Class()$}$
$class.MethodTypes:{methodType|$classMethodType_Method()$}$
	}

	public partial class $class.name$Builder : Allors.ObjectBuilder<$class.name$> $class.DirectSupertypes:{directSupertype|, $directSupertype.Name$Builder}$, global::System.IDisposable
	{
		public $class.name$Builder(Allors.ISession session) : base(session)
	    {
	    }

		protected override void OnBuild($class.name$ instance)
		{
$class.UnitDatabaseRoleTypes:{roleType|$classUnitRoleTypes_Class_OnBuild()$}$
$class.CompositeDatabaseRoleTypes:{roleType|$classCompsiteRoleTypes_Class_OnBuild()$}$
		}


$class.RoleTypes:{roleType|
	$if(roleType.objectType.IsUnit)$
		$classUnitRoleType_Builder()$
	$else$
		$classCompositeRoleType_Builder()$
	$endif$
}$
	}

$objectType_Plural()$

}
>>

classUnitRoleTypes_Class_OnBuild() ::= <<
$if((roleType.ObjectType.IsString || roleType.ObjectType.IsBinary))$

			instance.$roleType.PropertyName$ = this.$roleType.PropertyName$;
$else$

			if(this.$roleType.PropertyName$.HasValue)
			{
				instance.$roleType.PropertyName$ = this.$roleType.PropertyName$.Value;
			}
$endif$
>>

classCompsiteRoleTypes_Class_OnBuild() ::= <<
$if(roleType.IsOne)$

			instance.$roleType.PropertyName$ = this.$roleType.PropertyName$;

$else$
			if(this.$roleType.PropertyName$!=null)
			{
				instance.$roleType.PropertyName$ = this.$roleType.PropertyName$.ToArray();
			}
$endif$
>>

classAssociationType_Class() ::= <<
$\n$
$associationType.RelationType.XmlDocComment$
$if(associationType.IsMany)$
		public global::Allors.Extent<$associationType.ObjectType.Name$> $associationType.PluralName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.$associationType.PropertyName$.RelationType);
			}
		}

		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		public bool Exist$associationType.PluralName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.$associationType.PropertyName$.RelationType);
			}
		}
$else$
		public $associationType.ObjectType.Name$ $associationType.SingularName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return ($associationType.ObjectType.Name$) Strategy.GetCompositeAssociation(Meta.$associationType.PropertyName$.RelationType);
			}
		}

		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		public bool Exist$associationType.SingularName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.$associationType.PropertyName$.RelationType);
			}
		}
$endif$
>>

classConcreteRoleType_Class() ::= <<
$\n$
$roleClass.RoleType.RelationType.XmlDocComment$
$if(roleClass.RoleType.ObjectType.IsUnit)$

$if(roleClass.IsRequiredOverride)$
$if(roleClass.RoleType.ObjectType.IsBoolean ||
	roleClass.RoleType.ObjectType.IsDateTime ||
	roleClass.RoleType.ObjectType.IsDecimal ||
	roleClass.RoleType.ObjectType.IsFloat ||
	roleClass.RoleType.ObjectType.IsInteger ||
	roleClass.RoleType.ObjectType.IsUnique)$
		$roleType_ObjectType(roleClass.RoleType)$ $roleClass.RoleType.AssociationType.ObjectType.Name$.$roleClass.RoleType.SingularPropertyName$
		{
			get
			{
				return ($roleType_ObjectType(roleClass.RoleType)$) Strategy.GetUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
			}
		}


$endif$
$endif$
		public $roleClass_ObjectType(roleClass)$ $roleClass.RoleType.SingularPropertyName$
		{
			get
			{
				return ($roleClass_ObjectType(roleClass)$) Strategy.GetUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
			}
		}

		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		public bool Exist$roleClass.RoleType.SingularPropertyName${
			get
			{
				return Strategy.ExistUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
		}

		public void Remove$roleClass.RoleType.SingularPropertyName$()
		{
			Strategy.RemoveUnitRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
		}
$else$
$if(roleClass.RoleType.IsMany)$
		public global::Allors.Extent<$roleClass_ObjectType(roleClass)$> $roleClass.RoleType.PluralPropertyName$
		{
			get
			{
				return Strategy.GetCompositeRoles(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
			}
		}

		public void Add$roleClass.RoleType.SingularPropertyName$ ($roleClass_ObjectType(roleClass)$ value)
		{
			Strategy.AddCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
		}

		public void Remove$roleClass.RoleType.SingularPropertyName$ ($roleClass_ObjectType(roleClass)$ value)
		{
			Strategy.RemoveCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
		}

		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		public bool Exist$roleClass.RoleType.PluralPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
		}

		public void Remove$roleClass.RoleType.PluralPropertyName$()
		{
			Strategy.RemoveCompositeRoles(Meta.$roleClass.RoleType.PropertyName$.RelationType);
		}
$else$
		public $roleClass_ObjectType(roleClass)$ $roleClass.RoleType.SingularPropertyName$
		{
			get
			{
				return ($roleClass_ObjectType(roleClass)$) Strategy.GetCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType, value);
			}
		}

		[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]
		public bool Exist$roleClass.RoleType.SingularPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
			}
		}

		public void Remove$roleClass.RoleType.SingularPropertyName$()
		{
			Strategy.RemoveCompositeRole(Meta.$roleClass.RoleType.PropertyName$.RelationType);
		}
$endif$
$endif$
>>

classMethodType_Method() ::= <<
$\n$
$methodType.XmlDocComment$
		[System.Diagnostics.DebuggerStepThrough]
		public $methodType.FullName$ $methodType.Name$()
		{
			var method = new $class.Name$$methodType.Name$(this);
            method.Execute();
            return method;
		}

		[System.Diagnostics.DebuggerStepThrough]
		public $methodType.FullName$ $methodType.Name$(System.Action<$methodType.FullName$> action)
		{
			var method = new $class.Name$$methodType.Name$(this);
            action(method);
            method.Execute();
            return method;
		}
>>



classUnitRoleType_Builder() ::= <<
$if(roleType.ObjectType.IsString)$
		public $objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
$if(roleType.ObjectType.IsBinary)$
		public $objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$else$
		public $objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

$endif$
$endif$
		/// <exclude/>
		public $class.name$Builder With$roleType.SingularPropertyName$($objectType_NullableName(roleType.ObjectType)$ value)
        {
		    if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
            this.$roleType.PropertyName$ = value;
            return this;
        }

>>

classCompositeRoleType_Builder() ::= <<
$if(roleType.IsOne)$
		public $objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get; set;}

		/// <exclude/>
		public $class.name$Builder With$roleType.SingularPropertyName$($objectType_NullableName(roleType.ObjectType)$ value)
        {
            if(this.$roleType.PropertyName$!=null){throw new global::System.ArgumentException("One multicplicity");}
			this.$roleType.PropertyName$ = value;
            return this;
        }

$else$
		public global::System.Collections.Generic.List<$objectType_NullableName(roleType.ObjectType)$> $roleType.PropertyName$ {get; set;}

		/// <exclude/>
		public $class.name$Builder With$roleType.SingularPropertyName$($objectType_NullableName(roleType.ObjectType)$ value)
        {
			if(this.$roleType.PropertyName$ == null)
			{
				this.$roleType.PropertyName$ = new global::System.Collections.Generic.List<$objectType_NullableName(roleType.ObjectType)$>();
			}
            this.$roleType.PropertyName$.Add(value);
            return this;
        }

$endif$
>>

objectType_Plural() ::= <<
$objectType.XmlDocComment$
	public partial class $objectType.pluralName$ : global::Allors.ObjectsBase<$objectType.singularName$>
	{
		public $objectType.pluralName$(Allors.ISession session) : base(session)
		{
		}

		public Allors.Meta.Meta$objectType.SingularName$ Meta
		{
			get
			{
				return this.M.$objectType.SingularName$;
			}
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}
>>

methodType(meta, grp, methodType) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
$if(methodType.ObjectType.IsClass)$
	public partial class $methodType.FullName$ : Allors.Meta.Method
	{
        private readonly Allors.Meta.MethodInvocation methodInvocation;

		public $methodType.FullName$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
            this.methodInvocation = new Allors.Meta.MethodInvocation(@object.Strategy.Class, @object.Meta.$methodType.Name$);
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return methodInvocation;
			}
		}

		public override void Execute()
		{
            MethodInvocation.Execute(this);
		}
	}
$else$
	public abstract partial class $methodType.FullName$ : Allors.Meta.Method
	{
		protected $methodType.FullName$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
		}
	}

$methodType.ObjectType.Classes:{class|$methodTypeLeafClass()$}$
$endif$
}
>>

methodTypeLeafClass() ::= <<
	public partial class $class.Name$$methodType.Name$ : $methodType.FullName$
	{
		private readonly Allors.Meta.MethodInvocation methodInvocation;

		public $class.Name$$methodType.Name$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
		  this.methodInvocation = new Allors.Meta.MethodInvocation(@object.Strategy.Class, @object.Strategy.Session.Meta().$class.Name$.$methodType.Name$);
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return methodInvocation;
			}
		}

		public override void Execute()
		{
            MethodInvocation.Execute(this);
		}
	}
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

roleType_ObjectType(roleType) ::= <%
$if(roleType.IsRequired)$
$objectType_Name(roleType.ObjectType)$
$else$
$objectType_NullableName(roleType.ObjectType)$
$endif$
%>

roleClass_ObjectType(roleType) ::= <%
$if(roleClass.IsRequired)$
$objectType_Name(roleClass.RoleType.ObjectType)$
$else$
$objectType_NullableName(roleClass.RoleType.ObjectType)$
$endif$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
