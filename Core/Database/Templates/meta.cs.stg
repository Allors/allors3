delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<Allors C# Domain>>
TemplateVersion() ::= <<3.0.1>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2016 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="meta" output="M.g.cs"/>
	<generation template="extensions" output="Extensions.g.cs"/>
</generations>
>>

meta(meta) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Meta
{
	public class M
	{
		// Units
$meta.Units:{unit|         public readonly Meta$unit.SingularName$ $unit.SingularName$;}; separator="\n"$

		// Interfaces
$meta.Interfaces:{interface|         public readonly Meta$interface.SingularName$ $interface.SingularName$;}; separator="\n"$

		// Classes
$meta.Classes:{class|         public readonly Meta$class.SingularName$ $class.SingularName$;}; separator="\n"$


		public M(MetaPopulation meta)
		{
		    // Units
$meta.Units:{unit|             $unit.SingularName$ = new Meta$unit.SingularName$(meta);}; separator="\n"$

		    // Interfaces
$meta.Interfaces:{interface|             $interface.SingularName$ = new Meta$interface.SingularName$(meta);}; separator="\n"$

		    // Classes
$meta.Classes:{class|             $class.SingularName$ = new Meta$class.SingularName$(meta);}; separator="\n"$
		}
	}

$meta.Units:{unit|$meta_unit(unit)$}; separator="\n\n"$
$meta.Interfaces:{interface|$meta_interface(interface)$}; separator="\n\n"$
$meta.Classes:{class|$meta_class(class)$}; separator="\n\n"$
}
>>

meta_unit(unit) ::= <<
    public partial class Meta$unit.SingularName$ : MetaUnit
	{
		public override Unit Unit { get; }

		internal Meta$unit.SingularName$(MetaPopulation meta)
        {
			this.Unit = (Unit) meta.Find(UnitIds.$unit.SingularName$);
        }
	}
>>

meta_interface(interface) ::= <<
    public partial class Meta$interface.SingularName$ : MetaInterface
	{
		public override Interface Interface { get; }

        // Methods
$interface.MethodTypes:{methodType|         public MethodType $methodType.Name$;}; separator="\n"$

		// Roles
$interface.RoleTypes:{roleType|         public RoleType $roleType.Name$;}; separator="\n"$

		// Associations
$interface.AssociationTypes:{associationType|         public AssociationType $associationType.Name$;}; separator="\n"$

		internal Meta$interface.SingularName$(MetaPopulation meta)
        {
			this.Interface = (Interface) meta.Find(new System.Guid("$interface.Id$"));

            // Methods
$interface.MethodTypes:{methodType|             this.$methodType.Name$ = (MethodType)meta.Find(new System.Guid("$methodType.Id$"));}; separator="\n"$

            // Roles
$interface.RoleTypes:{roleType|             this.$roleType.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType.RelationType.Id$"))).RoleType;}; separator="\n"$

            // Associations
$interface.AssociationTypes:{associationType|           this.$associationType.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

meta_class(class) ::= <<
    public partial class Meta$class.SingularName$ : MetaClass
	{
		public override Class Class { get; }

        // Methods
$class.MethodTypes:{methodType|         public MethodClass $methodType.Name$;}; separator="\n"$

		// Roles
$class.RoleTypes:{roleType|         public RoleClass $roleType.Name$;}; separator="\n"$

		// Associations
$class.AssociationTypes:{associationType|         public AssociationType $associationType.Name$;}; separator="\n"$

		internal Meta$class.SingularName$(MetaPopulation meta)
        {
			this.Class = (Class) meta.Find(new System.Guid("$class.Id$"));

            // Methods
$class.MethodTypes:{methodType|             this.$methodType.Name$ = ((MethodType)meta.Find(new System.Guid("$methodType.Id$")).MethodBy(this.Class);}; separator="\n"$

            // Roles
$class.RoleTypes:{roleType|             this.$roleType.Name$ = ((RelationType)meta.Find(new System.Guid("$roleType.RelationType.Id$"))).RoleClassBy(this.Class);}; separator="\n"$

            // Associations
$class.AssociationTypes:{associationType|           this.$associationType.Name$ = ((RelationType)meta.Find(new System.Guid("$associationType.RelationType.Id$"))).AssociationType;}; separator="\n"$
        }
	}
>>

extensions(meta) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors
{
    public static partial class ObjectExtensions
    {
        public static ISessionScope SessionScope(this IObject @this)
        {
            return @this.Strategy.Session.Scope();
        }

        public static IDatabaseScope DatabaseScope(this IObject @this)
        {
            return @this.Strategy.Session.Database.Scope();
        }
     }

    public static partial class SessionExtensions
    {
        public static ISessionScope Scope(this ISession @this)
        {
            return ((ISessionScope)@this.Lifecycle);
        }
    }

    public static partial class DatabaseExtensions
    {
        public static IDatabaseScope Scope(this IDatabase @this)
        {
            return ((IDatabaseScope)@this.Lifecycle);
        }
    }
}
>>
