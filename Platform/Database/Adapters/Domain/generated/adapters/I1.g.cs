// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface I1 :  S1, Allors.IObject
	{


		global::Allors.Extent<I34> I1I34one2manies
		{
			get;
			set;
		}

		void AddI1I34one2many (I34 value);

		void RemoveI1I34one2many (I34 value);

		bool ExistI1I34one2manies
		{
			get;
		}

		void RemoveI1I34one2manies();


		global::Allors.Extent<I2> I1I2one2manies
		{
			get;
			set;
		}

		void AddI1I2one2many (I2 value);

		void RemoveI1I2one2many (I2 value);

		bool ExistI1I2one2manies
		{
			get;
		}

		void RemoveI1I2one2manies();


		I2 I1I2many2one
		{
			get;
			set;
		}

		bool ExistI1I2many2one
		{
			get;
		}

		void RemoveI1I2many2one();


		C2 I1C2many2one
		{
			get;
			set;
		}

		bool ExistI1C2many2one
		{
			get;
		}

		void RemoveI1C2many2one();


		C2 I1C2one2one
		{
			get;
			set;
		}

		bool ExistI1C2one2one
		{
			get;
		}

		void RemoveI1C2one2one();


		global::System.Decimal? I1DecimalBetweenA
		{
			get;
			set;
		}

		bool ExistI1DecimalBetweenA{get;}

		void RemoveI1DecimalBetweenA();


		S1 I1S1one2one
		{
			get;
			set;
		}

		bool ExistI1S1one2one
		{
			get;
		}

		void RemoveI1S1one2one();


		I12 I1I12many2one
		{
			get;
			set;
		}

		bool ExistI1I12many2one
		{
			get;
		}

		void RemoveI1I12many2one();


		global::System.String I1AllorsString
		{
			get;
			set;
		}

		bool ExistI1AllorsString{get;}

		void RemoveI1AllorsString();


		global::System.DateTime? I1DateTimeLessThan
		{
			get;
			set;
		}

		bool ExistI1DateTimeLessThan{get;}

		void RemoveI1DateTimeLessThan();


		global::Allors.Extent<C2> I1C2one2manies
		{
			get;
			set;
		}

		void AddI1C2one2many (C2 value);

		void RemoveI1C2one2many (C2 value);

		bool ExistI1C2one2manies
		{
			get;
		}

		void RemoveI1C2one2manies();


		global::System.String I1StringLarge
		{
			get;
			set;
		}

		bool ExistI1StringLarge{get;}

		void RemoveI1StringLarge();


		global::System.Double? I1FloatLessThan
		{
			get;
			set;
		}

		bool ExistI1FloatLessThan{get;}

		void RemoveI1FloatLessThan();


		global::System.DateTime? I1AllorsDateTime
		{
			get;
			set;
		}

		bool ExistI1AllorsDateTime{get;}

		void RemoveI1AllorsDateTime();


		C1 I1C1many2one
		{
			get;
			set;
		}

		bool ExistI1C1many2one
		{
			get;
		}

		void RemoveI1C1many2one();


		I12 I1I12one2one
		{
			get;
			set;
		}

		bool ExistI1I12one2one
		{
			get;
		}

		void RemoveI1I12one2one();


		global::System.Decimal? I1DecimalGreaterThan
		{
			get;
			set;
		}

		bool ExistI1DecimalGreaterThan{get;}

		void RemoveI1DecimalGreaterThan();


		C1 I1C1one2one
		{
			get;
			set;
		}

		bool ExistI1C1one2one
		{
			get;
		}

		void RemoveI1C1one2one();


		global::Allors.Extent<I2> I1I2many2manies
		{
			get;
			set;
		}

		void AddI1I2many2many (I2 value);

		void RemoveI1I2many2many (I2 value);

		bool ExistI1I2many2manies
		{
			get;
		}

		void RemoveI1I2many2manies();


		global::System.Int32? I1IntegerBetweenA
		{
			get;
			set;
		}

		bool ExistI1IntegerBetweenA{get;}

		void RemoveI1IntegerBetweenA();


		I34 I1I34many2one
		{
			get;
			set;
		}

		bool ExistI1I34many2one
		{
			get;
		}

		void RemoveI1I34many2one();


		global::System.Double? I1FloatBetweenA
		{
			get;
			set;
		}

		bool ExistI1FloatBetweenA{get;}

		void RemoveI1FloatBetweenA();


		global::System.Int32? I1IntegerLessThan
		{
			get;
			set;
		}

		bool ExistI1IntegerLessThan{get;}

		void RemoveI1IntegerLessThan();


		global::System.Int32? I1AllorsInteger
		{
			get;
			set;
		}

		bool ExistI1AllorsInteger{get;}

		void RemoveI1AllorsInteger();


		S2 I1S2one2one
		{
			get;
			set;
		}

		bool ExistI1S2one2one
		{
			get;
		}

		void RemoveI1S2one2one();


		global::System.Boolean? I1AllorsBoolean
		{
			get;
			set;
		}

		bool ExistI1AllorsBoolean{get;}

		void RemoveI1AllorsBoolean();


		I1 I1I1many2one
		{
			get;
			set;
		}

		bool ExistI1I1many2one
		{
			get;
		}

		void RemoveI1I1many2one();


		global::Allors.Extent<C1> I1C1many2manies
		{
			get;
			set;
		}

		void AddI1C1many2many (C1 value);

		void RemoveI1C1many2many (C1 value);

		bool ExistI1C1many2manies
		{
			get;
		}

		void RemoveI1C1many2manies();


		I2 I1I2one2one
		{
			get;
			set;
		}

		bool ExistI1I2one2one
		{
			get;
		}

		void RemoveI1I2one2one();


		global::System.Decimal? I1AllorsDecimal
		{
			get;
			set;
		}

		bool ExistI1AllorsDecimal{get;}

		void RemoveI1AllorsDecimal();


		global::Allors.Extent<S1> I1S1many2manies
		{
			get;
			set;
		}

		void AddI1S1many2many (S1 value);

		void RemoveI1S1many2many (S1 value);

		bool ExistI1S1many2manies
		{
			get;
		}

		void RemoveI1S1many2manies();


		global::System.DateTime? I1DateTimeGreaterThan
		{
			get;
			set;
		}

		bool ExistI1DateTimeGreaterThan{get;}

		void RemoveI1DateTimeGreaterThan();


		global::Allors.Extent<I34> I1I34many2manies
		{
			get;
			set;
		}

		void AddI1I34many2many (I34 value);

		void RemoveI1I34many2many (I34 value);

		bool ExistI1I34many2manies
		{
			get;
		}

		void RemoveI1I34many2manies();


		I34 I1I34one2one
		{
			get;
			set;
		}

		bool ExistI1I34one2one
		{
			get;
		}

		void RemoveI1I34one2one();


		global::Allors.Extent<I1> I1I1one2manies
		{
			get;
			set;
		}

		void AddI1I1one2many (I1 value);

		void RemoveI1I1one2many (I1 value);

		bool ExistI1I1one2manies
		{
			get;
		}

		void RemoveI1I1one2manies();


		global::Allors.Extent<I1> I1I1many2manies
		{
			get;
			set;
		}

		void AddI1I1many2many (I1 value);

		void RemoveI1I1many2many (I1 value);

		bool ExistI1I1many2manies
		{
			get;
		}

		void RemoveI1I1many2manies();


		global::Allors.Extent<S2> I1S2many2manies
		{
			get;
			set;
		}

		void AddI1S2many2many (S2 value);

		void RemoveI1S2many2many (S2 value);

		bool ExistI1S2many2manies
		{
			get;
		}

		void RemoveI1S2many2manies();


		global::Allors.Extent<I12> I1I12many2manies
		{
			get;
			set;
		}

		void AddI1I12many2many (I12 value);

		void RemoveI1I12many2many (I12 value);

		bool ExistI1I12many2manies
		{
			get;
		}

		void RemoveI1I12many2manies();


		global::System.String I1StringEquals
		{
			get;
			set;
		}

		bool ExistI1StringEquals{get;}

		void RemoveI1StringEquals();


		global::Allors.Extent<I12> I1I12one2manies
		{
			get;
			set;
		}

		void AddI1I12one2many (I12 value);

		void RemoveI1I12one2many (I12 value);

		bool ExistI1I12one2manies
		{
			get;
		}

		void RemoveI1I12one2manies();


		global::Allors.Extent<S2> I1S2one2manies
		{
			get;
			set;
		}

		void AddI1S2one2many (S2 value);

		void RemoveI1S2one2many (S2 value);

		bool ExistI1S2one2manies
		{
			get;
		}

		void RemoveI1S2one2manies();


		global::Allors.Extent<C2> I1C2many2manies
		{
			get;
			set;
		}

		void AddI1C2many2many (C2 value);

		void RemoveI1C2many2many (C2 value);

		bool ExistI1C2many2manies
		{
			get;
		}

		void RemoveI1C2many2manies();


		global::System.Byte[] I1AllorsBinary
		{
			get;
			set;
		}

		bool ExistI1AllorsBinary{get;}

		void RemoveI1AllorsBinary();


		global::System.Decimal? I1DecimalBetweenB
		{
			get;
			set;
		}

		bool ExistI1DecimalBetweenB{get;}

		void RemoveI1DecimalBetweenB();


		global::System.Double? I1FloatGreaterThan
		{
			get;
			set;
		}

		bool ExistI1FloatGreaterThan{get;}

		void RemoveI1FloatGreaterThan();


		global::System.Int32? I1IntegerBetweenB
		{
			get;
			set;
		}

		bool ExistI1IntegerBetweenB{get;}

		void RemoveI1IntegerBetweenB();


		global::System.DateTime? I1DateTimeBetweenA
		{
			get;
			set;
		}

		bool ExistI1DateTimeBetweenA{get;}

		void RemoveI1DateTimeBetweenA();


		global::System.Double? I1AllorsDouble
		{
			get;
			set;
		}

		bool ExistI1AllorsDouble{get;}

		void RemoveI1AllorsDouble();


		global::Allors.Extent<S1> I1S1one2manies
		{
			get;
			set;
		}

		void AddI1S1one2many (S1 value);

		void RemoveI1S1one2many (S1 value);

		bool ExistI1S1one2manies
		{
			get;
		}

		void RemoveI1S1one2manies();


		I1 I1I1one2one
		{
			get;
			set;
		}

		bool ExistI1I1one2one
		{
			get;
		}

		void RemoveI1I1one2one();


		global::System.Int32? I1IntegerGreaterThan
		{
			get;
			set;
		}

		bool ExistI1IntegerGreaterThan{get;}

		void RemoveI1IntegerGreaterThan();


		S1 I1S1many2one
		{
			get;
			set;
		}

		bool ExistI1S1many2one
		{
			get;
		}

		void RemoveI1S1many2one();


		global::System.Double? I1FloatBetweenB
		{
			get;
			set;
		}

		bool ExistI1FloatBetweenB{get;}

		void RemoveI1FloatBetweenB();


		global::System.Decimal? I1DecimalLessThan
		{
			get;
			set;
		}

		bool ExistI1DecimalLessThan{get;}

		void RemoveI1DecimalLessThan();


		global::System.DateTime? I1DateTimeBetweenB
		{
			get;
			set;
		}

		bool ExistI1DateTimeBetweenB{get;}

		void RemoveI1DateTimeBetweenB();


		global::System.Guid? I1AllorsUnique
		{
			get;
			set;
		}

		bool ExistI1AllorsUnique{get;}

		void RemoveI1AllorsUnique();


		global::Allors.Extent<C1> I1C1one2manies
		{
			get;
			set;
		}

		void AddI1C1one2many (C1 value);

		void RemoveI1C1one2many (C1 value);

		bool ExistI1C1one2manies
		{
			get;
		}

		void RemoveI1C1one2manies();


		S2 I1S2many2one
		{
			get;
			set;
		}

		bool ExistI1S2many2one
		{
			get;
		}

		void RemoveI1S2many2one();



		C1 C1WhereC1I1one2one
		{
			get;
		}

		bool ExistC1WhereC1I1one2one
		{
			get;
		}


		global::Allors.Extent<C1> C1sWhereC1I1many2many
		{
			get;
		}

		bool ExistC1sWhereC1I1many2many
		{
			get;
		}


		global::Allors.Extent<C1> C1sWhereC1I1many2one
		{
			get;
		}

		bool ExistC1sWhereC1I1many2one
		{
			get;
		}


		C1 C1WhereC1I1one2many
		{
			get;
		}

		bool ExistC1WhereC1I1one2many
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I1many2one
		{
			get;
		}

		bool ExistI1sWhereI1I1many2one
		{
			get;
		}


		I1 I1WhereI1I1one2many
		{
			get;
		}

		bool ExistI1WhereI1I1one2many
		{
			get;
		}


		global::Allors.Extent<I1> I1sWhereI1I1many2many
		{
			get;
		}

		bool ExistI1sWhereI1I1many2many
		{
			get;
		}


		I1 I1WhereI1I1one2one
		{
			get;
		}

		bool ExistI1WhereI1I1one2one
		{
			get;
		}

	}

	public partial interface I1Builder : S1Builder , global::System.IDisposable
	{

		global::System.Collections.Generic.List<I34> I1I34one2manies {get;}



		global::System.Collections.Generic.List<I2> I1I2one2manies {get;}


		I2 I1I2many2one {get;}


		C2 I1C2many2one {get;}


		C2 I1C2one2one {get;}


		global::System.Decimal? I1DecimalBetweenA {get;}

		S1 I1S1one2one {get;}


		I12 I1I12many2one {get;}


		global::System.String I1AllorsString {get;}

		global::System.DateTime? I1DateTimeLessThan {get;}


		global::System.Collections.Generic.List<C2> I1C2one2manies {get;}


		global::System.String I1StringLarge {get;}

		global::System.Double? I1FloatLessThan {get;}

		global::System.DateTime? I1AllorsDateTime {get;}

		C1 I1C1many2one {get;}


		I12 I1I12one2one {get;}


		global::System.Decimal? I1DecimalGreaterThan {get;}

		C1 I1C1one2one {get;}



		global::System.Collections.Generic.List<I2> I1I2many2manies {get;}


		global::System.Int32? I1IntegerBetweenA {get;}

		I34 I1I34many2one {get;}


		global::System.Double? I1FloatBetweenA {get;}

		global::System.Int32? I1IntegerLessThan {get;}

		global::System.Int32? I1AllorsInteger {get;}

		S2 I1S2one2one {get;}


		global::System.Boolean? I1AllorsBoolean {get;}

		I1 I1I1many2one {get;}



		global::System.Collections.Generic.List<C1> I1C1many2manies {get;}


		I2 I1I2one2one {get;}


		global::System.Decimal? I1AllorsDecimal {get;}


		global::System.Collections.Generic.List<S1> I1S1many2manies {get;}


		global::System.DateTime? I1DateTimeGreaterThan {get;}


		global::System.Collections.Generic.List<I34> I1I34many2manies {get;}


		I34 I1I34one2one {get;}



		global::System.Collections.Generic.List<I1> I1I1one2manies {get;}



		global::System.Collections.Generic.List<I1> I1I1many2manies {get;}



		global::System.Collections.Generic.List<S2> I1S2many2manies {get;}



		global::System.Collections.Generic.List<I12> I1I12many2manies {get;}


		global::System.String I1StringEquals {get;}


		global::System.Collections.Generic.List<I12> I1I12one2manies {get;}



		global::System.Collections.Generic.List<S2> I1S2one2manies {get;}



		global::System.Collections.Generic.List<C2> I1C2many2manies {get;}


		global::System.Byte[] I1AllorsBinary {get;}

		global::System.Decimal? I1DecimalBetweenB {get;}

		global::System.Double? I1FloatGreaterThan {get;}

		global::System.Int32? I1IntegerBetweenB {get;}

		global::System.DateTime? I1DateTimeBetweenA {get;}

		global::System.Double? I1AllorsDouble {get;}


		global::System.Collections.Generic.List<S1> I1S1one2manies {get;}


		I1 I1I1one2one {get;}


		global::System.Int32? I1IntegerGreaterThan {get;}

		S1 I1S1many2one {get;}


		global::System.Double? I1FloatBetweenB {get;}

		global::System.Decimal? I1DecimalLessThan {get;}

		global::System.DateTime? I1DateTimeBetweenB {get;}

		global::System.Guid? I1AllorsUnique {get;}


		global::System.Collections.Generic.List<C1> I1C1one2manies {get;}


		S2 I1S2many2one {get;}


	}
}