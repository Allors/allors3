// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Person : Allors.IObject , Named
	{
		private readonly IStrategy strategy;
		private readonly Allors.Meta.M m;

		public Person(Allors.IStrategy strategy)
		{
			this.strategy = strategy;
			this.m = this.DatabaseState().M;
		}

		public Allors.Meta.M M => m;

		public Allors.Meta.MetaPerson Meta => m.Person;

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Person Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Person) allorsSession.Instantiate(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public Person NextPerson
		{
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.NextPerson.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.NextPerson.RelationType, value);
			}
		}

		virtual public bool ExistNextPerson
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.NextPerson.RelationType);
			}
		}

		virtual public void RemoveNextPerson()
		{
			Strategy.RemoveCompositeRole(Meta.NextPerson.RelationType);
		}


		virtual public Company Company
		{
			get
			{
				return (Company) Strategy.GetCompositeRole(Meta.Company.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Company.RelationType, value);
			}
		}

		virtual public bool ExistCompany
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Company.RelationType);
			}
		}

		virtual public void RemoveCompany()
		{
			Strategy.RemoveCompositeRole(Meta.Company.RelationType);
		}


		virtual public global::System.String Name
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name.RelationType, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name.RelationType);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name.RelationType);
		}


		virtual public global::System.Int32? Index
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Index.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Index.RelationType, value);
			}
		}

		virtual public bool ExistIndex{
			get
			{
				return Strategy.ExistUnitRole(Meta.Index.RelationType);
			}
		}

		virtual public void RemoveIndex()
		{
			Strategy.RemoveUnitRole(Meta.Index.RelationType);
		}



		virtual public global::Allors.Extent<Company> CompaniesWhereManager
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereManager.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereManager
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereManager.RelationType);
			}
		}


		virtual public Company CompanyWhereEmployee
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWhereEmployee.RelationType);
			}
		}

		virtual public bool ExistCompanyWhereEmployee
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWhereEmployee.RelationType);
			}
		}


		virtual public Company CompanyWhereFirstPerson
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWhereFirstPerson.RelationType);
			}
		}

		virtual public bool ExistCompanyWhereFirstPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWhereFirstPerson.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWhereOwner
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereOwner.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereOwner
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereOwner.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWhereIndexedMany2ManyPerson
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereIndexedMany2ManyPerson.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereIndexedMany2ManyPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereIndexedMany2ManyPerson.RelationType);
			}
		}


		virtual public Company CompanyWherePersonsOneSort1
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWherePersonsOneSort1.RelationType);
			}
		}

		virtual public bool ExistCompanyWherePersonsOneSort1
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWherePersonsOneSort1.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWherePersonsManySort1
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWherePersonsManySort1.RelationType);
			}
		}

		virtual public bool ExistCompaniesWherePersonsManySort1
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWherePersonsManySort1.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWherePersonsManySort2
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWherePersonsManySort2.RelationType);
			}
		}

		virtual public bool ExistCompaniesWherePersonsManySort2
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWherePersonsManySort2.RelationType);
			}
		}


		virtual public Company CompanyWherePersonsOneSort2
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWherePersonsOneSort2.RelationType);
			}
		}

		virtual public bool ExistCompanyWherePersonsOneSort2
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWherePersonsOneSort2.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWhereMany2ManyPerson
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereMany2ManyPerson.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereMany2ManyPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereMany2ManyPerson.RelationType);
			}
		}


		virtual public Person PersonWhereNextPerson
		{
			get
			{
				return (Person) Strategy.GetCompositeAssociation(Meta.PersonWhereNextPerson.RelationType);
			}
		}

		virtual public bool ExistPersonWhereNextPerson
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PersonWhereNextPerson.RelationType);
			}
		}


		virtual public Company CompanyWhereNamedsOneSort2
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWhereNamedsOneSort2.RelationType);
			}
		}

		virtual public bool ExistCompanyWhereNamedsOneSort2
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWhereNamedsOneSort2.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWhereNamedsManySort1
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereNamedsManySort1.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereNamedsManySort1
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereNamedsManySort1.RelationType);
			}
		}


		virtual public global::Allors.Extent<Company> CompaniesWhereNamedManySort2
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CompaniesWhereNamedManySort2.RelationType);
			}
		}

		virtual public bool ExistCompaniesWhereNamedManySort2
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CompaniesWhereNamedManySort2.RelationType);
			}
		}


		virtual public Company CompanyWhereNamedsOneSort1
		{
			get
			{
				return (Company) Strategy.GetCompositeAssociation(Meta.CompanyWhereNamedsOneSort1.RelationType);
			}
		}

		virtual public bool ExistCompanyWhereNamedsOneSort1
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CompanyWhereNamedsOneSort1.RelationType);
			}
		}



		public NamedInheritedDoIt InheritedDoIt()
		{
			return new PersonInheritedDoIt(this);
		}

        #region Test Helpers
        public static Person Create(ISession session) => (Person)session.Create(session.Database.State().M.Person.ObjectType);

        public static Person[] Create(ISession session, int count) => (Person[])session.Create(session.Database.State().M.Person.ObjectType, count);

        public static Person Instantiate(ISession session, long id) => (Person)session.Instantiate(id);

        public static Person[] Instantiate(ISession session, string[] ids) => (Person[])session.Instantiate(ids);

        public static Person[] Extent(ISession session) => (Person[])session.Extent(session.Database.State().M.Person.ObjectType).ToArray();
        #endregion
	}
}