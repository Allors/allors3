// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Sandbox : Allors.IObject 
	{
		private readonly IStrategy strategy;
		private readonly Allors.Meta.M m;

		public Sandbox(Allors.IStrategy strategy)
		{
			this.strategy = strategy;
			this.m = this.DatabaseState().M;
		}

		public Allors.Meta.M M => m;

		public Allors.Meta.MetaSandbox Meta => m.Sandbox;

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static Sandbox Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Sandbox) allorsSession.Instantiate(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::Allors.Extent<Sandbox> InvisibleManies
		{
			get
			{
				return Strategy.GetCompositeRoles(Meta.InvisibleManies.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.InvisibleManies.RelationType, value);
			}
		}

		virtual public void AddInvisibleMany (Sandbox value)
		{
			Strategy.AddCompositeRole(Meta.InvisibleManies.RelationType, value);
		}

		virtual public void RemoveInvisibleMany (Sandbox value)
		{
			Strategy.RemoveCompositeRole(Meta.InvisibleManies.RelationType, value);
		}

		virtual public bool ExistInvisibleManies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.InvisibleManies.RelationType);
			}
		}

		virtual public void RemoveInvisibleManies()
		{
			Strategy.RemoveCompositeRoles(Meta.InvisibleManies.RelationType);
		}


		virtual public Sandbox InvisibleOne
		{
			get
			{
				return (Sandbox) Strategy.GetCompositeRole(Meta.InvisibleOne.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InvisibleOne.RelationType, value);
			}
		}

		virtual public bool ExistInvisibleOne
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InvisibleOne.RelationType);
			}
		}

		virtual public void RemoveInvisibleOne()
		{
			Strategy.RemoveCompositeRole(Meta.InvisibleOne.RelationType);
		}


		virtual public global::System.String InvisibleValue
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.InvisibleValue.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.InvisibleValue.RelationType, value);
			}
		}

		virtual public bool ExistInvisibleValue{
			get
			{
				return Strategy.ExistUnitRole(Meta.InvisibleValue.RelationType);
			}
		}

		virtual public void RemoveInvisibleValue()
		{
			Strategy.RemoveUnitRole(Meta.InvisibleValue.RelationType);
		}


		virtual public global::System.String Test
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Test.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Test.RelationType, value);
			}
		}

		virtual public bool ExistTest{
			get
			{
				return Strategy.ExistUnitRole(Meta.Test.RelationType);
			}
		}

		virtual public void RemoveTest()
		{
			Strategy.RemoveUnitRole(Meta.Test.RelationType);
		}


		virtual public global::System.Int32? AllorsInteger
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistAllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveAllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.AllorsInteger.RelationType);
		}


		virtual public global::System.String AllorsString
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.AllorsString.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsString.RelationType, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsString.RelationType);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(Meta.AllorsString.RelationType);
		}



		virtual public global::Allors.Extent<Sandbox> SandboxesWhereInvisibleMany
		{
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SandboxesWhereInvisibleMany.RelationType);
			}
		}

		virtual public bool ExistSandboxesWhereInvisibleMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SandboxesWhereInvisibleMany.RelationType);
			}
		}


		virtual public Sandbox SandboxWhereInvisibleOne
		{
			get
			{
				return (Sandbox) Strategy.GetCompositeAssociation(Meta.SandboxWhereInvisibleOne.RelationType);
			}
		}

		virtual public bool ExistSandboxWhereInvisibleOne
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.SandboxWhereInvisibleOne.RelationType);
			}
		}



		public SandboxDoIt DoIt()
		{
			return new SandboxDoIt(this);
		}

        #region Test Helpers
        public static Sandbox Create(ISession session) => (Sandbox)session.Create(session.Database.State().M.Sandbox.ObjectType);

        public static Sandbox[] Create(ISession session, int count) => (Sandbox[])session.Create(session.Database.State().M.Sandbox.ObjectType, count);

        public static Sandbox Instantiate(ISession session, long id) => (Sandbox)session.Instantiate(id);

        public static Sandbox[] Instantiate(ISession session, string[] ids) => (Sandbox[])session.Instantiate(ids);

        public static Sandbox[] Extent(ISession session) => (Sandbox[])session.Extent(session.Database.State().M.Sandbox.ObjectType).ToArray();
        #endregion
	}
}