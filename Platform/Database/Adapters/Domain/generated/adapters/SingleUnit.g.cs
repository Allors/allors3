// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SingleUnit : Allors.IObject 
	{
		private readonly IStrategy strategy;
		private readonly Allors.Meta.M m;

		public SingleUnit(Allors.IStrategy strategy)
		{
			this.strategy = strategy;
			this.m = this.DatabaseState().M;
		}

		public Allors.Meta.M M => m;

		public Allors.Meta.MetaSingleUnit Meta => m.SingleUnit;

		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static SingleUnit Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (SingleUnit) allorsSession.Instantiate(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }



		virtual public global::System.Int32? AllorsInteger
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.AllorsInteger.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AllorsInteger.RelationType, value);
			}
		}

		virtual public bool ExistAllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.AllorsInteger.RelationType);
			}
		}

		virtual public void RemoveAllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.AllorsInteger.RelationType);
		}


        #region Test Helpers
        public static SingleUnit Create(ISession session) => (SingleUnit)session.Create(session.Database.State().M.SingleUnit.ObjectType);

        public static SingleUnit[] Create(ISession session, int count) => (SingleUnit[])session.Create(session.Database.State().M.SingleUnit.ObjectType, count);

        public static SingleUnit Instantiate(ISession session, long id) => (SingleUnit)session.Instantiate(id);

        public static SingleUnit[] Instantiate(ISession session, string[] ids) => (SingleUnit[])session.Instantiate(ids);

        public static SingleUnit[] Extent(ISession session) => (SingleUnit[])session.Extent(session.Database.State().M.SingleUnit.ObjectType).ToArray();
        #endregion
	}
}