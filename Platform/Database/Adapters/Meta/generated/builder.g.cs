// <auto-generated />
namespace Allors.Meta
{
	public partial class MetaBuilder
	{
        internal class Domains
        {
             public Domain Adapters;
        }

        internal class ObjectTypes
        {
             public Unit Binary;
             public Unit Boolean;
             public Unit DateTime;
             public Unit Decimal;
             public Unit Float;
             public Unit Integer;
             public Unit String;
             public Unit Unique;
             public Interface I1;
             public Interface I12;
             public Interface I2;
             public Interface I23;
             public Interface I3;
             public Interface I34;
             public Interface I4;
             public Interface IGT32Composite;
             public Interface IGT32Unit;
             public Interface ILT32Composite;
             public Interface ILT32Unit;
             public Interface InterfaceWithoutConcreteClass;
             public Interface ISandbox;
             public Interface Named;
             public Interface Object;
             public Interface S1;
             public Interface S12;
             public Interface S1234;
             public Interface S2;
             public Interface S3;
             public Interface S4;
             public Class C1;
             public Class C2;
             public Class C3;
             public Class C4;
             public Class ClassWithoutRoles;
             public Class ClassWithoutUnitRoles;
             public Class Company;
             public Class GT32;
             public Class GT32UnitLT32Composite;
             public Class LT32;
             public Class LT32UnitGT32Composite;
             public Class Person;
             public Class Sandbox;
             public Class SingleUnit;
             public Class User;
        }

        internal class RelationTypes
        {
            public RelationType C1C1DecimalBetweenA;
            public RelationType C1C1I2one2one;
            public RelationType C1C1DecimalBetweenB;
            public RelationType C1Argument;
            public RelationType C1C1S1one2many;
            public RelationType C1C1I12one2one;
            public RelationType C1C1AllorsString;
            public RelationType C1C1C1many2one;
            public RelationType C1C1S2many2one;
            public RelationType C1C1FloatBetweenA;
            public RelationType C1Many2One;
            public RelationType C1C1C1many2many;
            public RelationType C1C1S1many2many;
            public RelationType C1C1FloatBetweenB;
            public RelationType C1C1I1one2one;
            public RelationType C1C1IntegerLessThan;
            public RelationType C1C1StringLarge;
            public RelationType C1C1I2one2many;
            public RelationType C1C1C1one2one;
            public RelationType C1C1FloatGreaterThan;
            public RelationType C1C1I2many2one;
            public RelationType C1C1I12many2one;
            public RelationType C1C1DateTimeLessThan;
            public RelationType C1IndexedMaxBinary;
            public RelationType C1IndexedMaxString;
            public RelationType C1C1DateTimeBetweenA;
            public RelationType C1C1C2many2many;
            public RelationType C1C1S1many2one;
            public RelationType C1C1I1many2many;
            public RelationType C1C1FloatLessThan;
            public RelationType C1C1I1many2one;
            public RelationType C1C1DecimalGreaterThan;
            public RelationType C1C1AllorsDecimal;
            public RelationType C1C1S2one2one;
            public RelationType C1C1DateTimeBetweenB;
            public RelationType C1C1AllorsBinary;
            public RelationType C1C1DateTimeGreaterThan;
            public RelationType C1C1S1one2one;
            public RelationType C1C1C1one2many;
            public RelationType C1C1I1one2many;
            public RelationType C1C1C2many2one;
            public RelationType C1C1I12one2many;
            public RelationType C1C1S2many2many;
            public RelationType C1C1C2one2one;
            public RelationType C1C1AllorsBoolean;
            public RelationType C1C1I12many2many;
            public RelationType C1C1I2many2many;
            public RelationType C1C1AllorsUnique;
            public RelationType C1C1C3one2one;
            public RelationType C1C1C3many2many;
            public RelationType C1C1StringEquals;
            public RelationType C1C1IntegerGreaterThan;
            public RelationType C1C3may2one;
            public RelationType C1C1IntegerBetweenB;
            public RelationType C1C1AllorsDateTime;
            public RelationType C1C1IntegerBetweenA;
            public RelationType C1C1AllorsDouble;
            public RelationType C1C1C2one2many;
            public RelationType C1C1S2one2many;
            public RelationType C1C1AllorsInteger;
            public RelationType C1C1DecimalLessThan;
            public RelationType C1C1C3one2many;
            public RelationType C2C2AllorsDecimal;
            public RelationType C2C1many2many;
            public RelationType C2C2C2many2one;
            public RelationType C2C2AllorsDouble;
            public RelationType C2C2AllorsInteger;
            public RelationType C2C2C2many2many;
            public RelationType C2C2AllorsBoolean;
            public RelationType C2C1many2one;
            public RelationType C2C1one2one;
            public RelationType C2C2AllorsString;
            public RelationType C2C2C2one2one;
            public RelationType C2C2C2one2many;
            public RelationType C2C2AllorsDateTime;
            public RelationType C2C1one2many;
            public RelationType C2C3Many2Many;
            public RelationType C2C3Many2One;
            public RelationType C3C3AllorsString;
            public RelationType C3C3C2many2many;
            public RelationType C3C3I4one2one;
            public RelationType C3C3C4many2one;
            public RelationType C3C3C4many2many;
            public RelationType C3C3I4many2many;
            public RelationType C3C3C2one2many;
            public RelationType C3C3C2many2one;
            public RelationType C3C3I4many2one;
            public RelationType C3C3C4one2many;
            public RelationType C3C3C2one2one;
            public RelationType C3C3C4one2one;
            public RelationType C3C3StringEquals;
            public RelationType C3C3I4one2many;
            public RelationType C4C4AllorsString;


            public RelationType CompanyManager;
            public RelationType CompanyEmployee;
            public RelationType CompanyFirstPerson;
            public RelationType CompanyNamedsOneSort2;
            public RelationType CompanyOwner;
            public RelationType CompanyIndexedMany2ManyPerson;
            public RelationType CompanyPersonsOneSort1;
            public RelationType CompanyPersonsManySort1;
            public RelationType CompanyNamedsManySort1;
            public RelationType CompanyPersonsManySort2;
            public RelationType CompanyPersonsOneSort2;
            public RelationType CompanyNamedManySort2;
            public RelationType CompanyMany2ManyPerson;
            public RelationType CompanyChild;
            public RelationType CompanyNamedsOneSort1;




            public RelationType PersonNextPerson;
            public RelationType PersonCompany;
            public RelationType SandboxInvisibleMany;
            public RelationType SandboxInvisibleOne;
            public RelationType SandboxInvisibleValue;
            public RelationType SandboxTest;
            public RelationType SandboxAllorsInteger;
            public RelationType SandboxAllorsString;
            public RelationType SingleUnitAllorsInteger;
            public RelationType UserSelect;
            public RelationType UserFrom;
            public RelationType I1I1I34one2many;
            public RelationType I1I1I2one2many;
            public RelationType I1I1I2many2one;
            public RelationType I1I1C2many2one;
            public RelationType I1I1C2one2one;
            public RelationType I1I1DecimalBetweenA;
            public RelationType I1I1S1one2one;
            public RelationType I1I1I12many2one;
            public RelationType I1I1AllorsString;
            public RelationType I1I1DateTimeLessThan;
            public RelationType I1I1C2one2many;
            public RelationType I1I1StringLarge;
            public RelationType I1I1FloatLessThan;
            public RelationType I1I1AllorsDateTime;
            public RelationType I1I1C1many2one;
            public RelationType I1I1I12one2one;
            public RelationType I1I1DecimalGreaterThan;
            public RelationType I1I1C1one2one;
            public RelationType I1I1I2many2many;
            public RelationType I1I1IntegerBetweenA;
            public RelationType I1I1I34many2one;
            public RelationType I1I1FloatBetweenA;
            public RelationType I1I1IntegerLessThan;
            public RelationType I1I1AllorsInteger;
            public RelationType I1I1S2one2one;
            public RelationType I1I1AllorsBoolean;
            public RelationType I1I1I1many2one;
            public RelationType I1I1C1many2many;
            public RelationType I1I1I2one2one;
            public RelationType I1I1AllorsDecimal;
            public RelationType I1I1S1many2many;
            public RelationType I1I1DateTimeGreaterThan;
            public RelationType I1I1I34many2many;
            public RelationType I1I1I34one2one;
            public RelationType I1I1I1one2many;
            public RelationType I1I1I1many2many;
            public RelationType I1I1S2many2many;
            public RelationType I1I1I12many2many;
            public RelationType I1I1StringEquals;
            public RelationType I1I1I12one2many;
            public RelationType I1I1S2one2many;
            public RelationType I1I1C2many2many;
            public RelationType I1I1AllorsBinary;
            public RelationType I1I1DecimalBetweenB;
            public RelationType I1I1FloatGreaterThan;
            public RelationType I1I1IntegerBetweenB;
            public RelationType I1I1DateTimeBetweenA;
            public RelationType I1I1AllorsDouble;
            public RelationType I1I1S1one2many;
            public RelationType I1I1I1one2one;
            public RelationType I1I1IntegerGreaterThan;
            public RelationType I1I1S1many2one;
            public RelationType I1I1FloatBetweenB;
            public RelationType I1I1DecimalLessThan;
            public RelationType I1I1DateTimeBetweenB;
            public RelationType I1I1AllorsUnique;
            public RelationType I1I1C1one2many;
            public RelationType I1I1S2many2one;
            public RelationType I12I12AllorsBoolean;
            public RelationType I12I12AllorsInteger;
            public RelationType I12I12I34one2many;
            public RelationType I12C3many2one;
            public RelationType I12I12C2many2one;
            public RelationType I12I12AllorsDouble;
            public RelationType I12I12I34many2one;
            public RelationType I12I12I34many2many;
            public RelationType I12I12C3one2one;
            public RelationType I12I12C2many2many;
            public RelationType I12I12AllorsDecimal;
            public RelationType I12I12C2one2one;
            public RelationType I12I12C3one2many;
            public RelationType I12I12C3many2many;
            public RelationType I12PrefetchTest;
            public RelationType I12I12AllorsDateTime;
            public RelationType I12I12AllorsString;
            public RelationType I12I12I34one2one;
            public RelationType I12I12C2one2many;
            public RelationType I2I2AllorsBoolean;
            public RelationType I2I2AllorsDecimal;
            public RelationType I2I2AllorsDateTime;
            public RelationType I2I2AllorsString;
            public RelationType I2I2AllorsInteger;
            public RelationType I2I2AllorsDouble;
            public RelationType I23I23AllorsString;
            public RelationType I3I3C4many2many;
            public RelationType I3I3AllorsString;
            public RelationType I3I3I4one2many;
            public RelationType I3I3C4one2many;
            public RelationType I3I3I4many2many;
            public RelationType I3I3I4many2one;
            public RelationType I3I3C4one2one;
            public RelationType I3I3I4one2one;
            public RelationType I3I3C4many2one;
            public RelationType I3I3StringEquals;
            public RelationType I3C1one2one;
            public RelationType I34I34AllorsDecimal;
            public RelationType I34I34AllorsBoolean;
            public RelationType I34I34AllorsDouble;
            public RelationType I34I34AllorsInteger;
            public RelationType I34I34AllorsString;

            public RelationType IGT32CompositeSelf13;
            public RelationType IGT32CompositeSelf31;
            public RelationType IGT32CompositeSelf14;
            public RelationType IGT32CompositeSelf21;
            public RelationType IGT32CompositeSelf2;
            public RelationType IGT32CompositeSelf23;
            public RelationType IGT32CompositeSelf22;
            public RelationType IGT32CompositeSelf18;
            public RelationType IGT32CompositeSelf17;
            public RelationType IGT32CompositeSelf3;
            public RelationType IGT32CompositeSelf29;
            public RelationType IGT32CompositeSelf26;
            public RelationType IGT32CompositeSelf4;
            public RelationType IGT32CompositeSelf8;
            public RelationType IGT32CompositeSelf24;
            public RelationType IGT32CompositeSelf12;
            public RelationType IGT32CompositeSelf7;
            public RelationType IGT32CompositeSelf6;
            public RelationType IGT32CompositeSelf25;
            public RelationType IGT32CompositeSelf20;
            public RelationType IGT32CompositeSelf9;
            public RelationType IGT32CompositeSelf11;
            public RelationType IGT32CompositeSelf32;
            public RelationType IGT32CompositeSelf28;
            public RelationType IGT32CompositeSelf33;
            public RelationType IGT32CompositeSelf27;
            public RelationType IGT32CompositeSelf30;
            public RelationType IGT32CompositeSelf1;
            public RelationType IGT32CompositeSelf15;
            public RelationType IGT32CompositeSelf5;
            public RelationType IGT32CompositeSelf19;
            public RelationType IGT32CompositeSelf10;
            public RelationType IGT32CompositeSelf16;
            public RelationType IGT32UnitAllorsString2;
            public RelationType IGT32UnitAllorsString5;
            public RelationType IGT32UnitAllorsString19;
            public RelationType IGT32UnitAllorsString18;
            public RelationType IGT32UnitAllorsString21;
            public RelationType IGT32UnitAllorsString31;
            public RelationType IGT32UnitAllorsString15;
            public RelationType IGT32UnitAllorsString6;
            public RelationType IGT32UnitAllorsString27;
            public RelationType IGT32UnitAllorsString11;
            public RelationType IGT32UnitAllorsString33;
            public RelationType IGT32UnitAllorsString32;
            public RelationType IGT32UnitAllorsString25;
            public RelationType IGT32UnitAllorsString8;
            public RelationType IGT32UnitAllorsString28;
            public RelationType IGT32UnitAllorsString29;
            public RelationType IGT32UnitAllorsString20;
            public RelationType IGT32UnitAllorsString16;
            public RelationType IGT32UnitAllorsString30;
            public RelationType IGT32UnitAllorsString12;
            public RelationType IGT32UnitAllorsString26;
            public RelationType IGT32UnitAllorsString17;
            public RelationType IGT32UnitAllorsString4;
            public RelationType IGT32UnitAllorsString10;
            public RelationType IGT32UnitAllorsString23;
            public RelationType IGT32UnitAllorsString24;
            public RelationType IGT32UnitAllorsString1;
            public RelationType IGT32UnitAllorsString14;
            public RelationType IGT32UnitAllorsString13;
            public RelationType IGT32UnitAllorsString22;
            public RelationType IGT32UnitAllorsString3;
            public RelationType IGT32UnitAllorsString7;
            public RelationType IGT32UnitAllorsString9;
            public RelationType ILT32CompositeSelf3;
            public RelationType ILT32CompositeSelf2;
            public RelationType ILT32CompositeSelf1;
            public RelationType ILT32UnitAllorsString1;
            public RelationType ILT32UnitAllorsString3;
            public RelationType ILT32UnitAllorsString2;
            public RelationType InterfaceWithoutConcreteClassAllorsBoolean;
            public RelationType ISandboxInvisibleValue;
            public RelationType ISandboxInvisibleMany;
            public RelationType ISandboxInvisibleOne;
            public RelationType NamedName;
            public RelationType NamedIndex;

            public RelationType S1S1AllorsDecimal;
            public RelationType S1S1AllorsInteger;
            public RelationType S1S1AllorsBinary;
            public RelationType S1S1AllorsUnique;
            public RelationType S1S1StringLarge;
            public RelationType S1S1S2many2one;
            public RelationType S1S1S2one2many;
            public RelationType S1S1AllorsDouble;
            public RelationType S1S1AllorsString;
            public RelationType S1S1C1many2one;
            public RelationType S1S1C1one2one;
            public RelationType S1S1AllorsBoolean;
            public RelationType S1S1C1many2many;
            public RelationType S1S1S2many2many;
            public RelationType S1S1S2one2one;
            public RelationType S1S1AllorsDateTime;
            public RelationType S1S1C1one2many;
            public RelationType S12S12AllorsString;
            public RelationType S12S12AllorsDateTime;
            public RelationType S12S12C2many2many;
            public RelationType S12S12C2many2one;
            public RelationType S12S12C2one2one;
            public RelationType S12S12C2one2many;
            public RelationType S12S12AllorsBoolean;
            public RelationType S12S12AllorsDouble;
            public RelationType S12S12AllorsInteger;
            public RelationType S12S12AllorsDecimal;
            public RelationType S1234Name;
            public RelationType S1234S1234AllorsDouble;
            public RelationType S1234S1234AllorsDecimal;
            public RelationType S1234S1234AllorsInteger;
            public RelationType S1234S1234many2one;
            public RelationType S1234S1234C2one2one;
            public RelationType S1234S1234C2many2many;
            public RelationType S1234S1234one2many;
            public RelationType S1234S1234C2one2many;
            public RelationType S1234S1234many2many;
            public RelationType S1234ClassName;
            public RelationType S1234S1234AllorsDateTime;
            public RelationType S1234S1234one2one;
            public RelationType S1234S1234C2many2one;
            public RelationType S1234S1234AllorsString;
            public RelationType S1234S1234AllorsBoolean;
            public RelationType S2S2AllorsString;
            public RelationType S2S2AllorsInteger;
            public RelationType S2S2AllorsDouble;
            public RelationType S2S2AllorsBoolean;
            public RelationType S2S2AllorsDecimal;
            public RelationType S2S2AllorsDateTime;


        }

         internal class RoleClasses
        {
            public RoleClass C1I1I34one2manies;
            public RoleClass C1I1I2one2manies;
            public RoleClass C1I1I2many2one;
            public RoleClass C1I1C2many2one;
            public RoleClass C1I1C2one2one;
            public RoleClass C1I1DecimalBetweenA;
            public RoleClass C1I1S1one2one;
            public RoleClass C1I1I12many2one;
            public RoleClass C1I1AllorsString;
            public RoleClass C1I1DateTimeLessThan;
            public RoleClass C1I1C2one2manies;
            public RoleClass C1I1StringLarge;
            public RoleClass C1I1FloatLessThan;
            public RoleClass C1I1AllorsDateTime;
            public RoleClass C1I1C1many2one;
            public RoleClass C1I1I12one2one;
            public RoleClass C1I1DecimalGreaterThan;
            public RoleClass C1I1C1one2one;
            public RoleClass C1I1I2many2manies;
            public RoleClass C1I1IntegerBetweenA;
            public RoleClass C1I1I34many2one;
            public RoleClass C1I1FloatBetweenA;
            public RoleClass C1I1IntegerLessThan;
            public RoleClass C1I1AllorsInteger;
            public RoleClass C1I1S2one2one;
            public RoleClass C1I1AllorsBoolean;
            public RoleClass C1I1I1many2one;
            public RoleClass C1I1C1many2manies;
            public RoleClass C1I1I2one2one;
            public RoleClass C1I1AllorsDecimal;
            public RoleClass C1I1S1many2manies;
            public RoleClass C1I1DateTimeGreaterThan;
            public RoleClass C1I1I34many2manies;
            public RoleClass C1I1I34one2one;
            public RoleClass C1I1I1one2manies;
            public RoleClass C1I1I1many2manies;
            public RoleClass C1I1S2many2manies;
            public RoleClass C1I1I12many2manies;
            public RoleClass C1I1StringEquals;
            public RoleClass C1I1I12one2manies;
            public RoleClass C1I1S2one2manies;
            public RoleClass C1I1C2many2manies;
            public RoleClass C1I1AllorsBinary;
            public RoleClass C1I1DecimalBetweenB;
            public RoleClass C1I1FloatGreaterThan;
            public RoleClass C1I1IntegerBetweenB;
            public RoleClass C1I1DateTimeBetweenA;
            public RoleClass C1I1AllorsDouble;
            public RoleClass C1I1S1one2manies;
            public RoleClass C1I1I1one2one;
            public RoleClass C1I1IntegerGreaterThan;
            public RoleClass C1I1S1many2one;
            public RoleClass C1I1FloatBetweenB;
            public RoleClass C1I1DecimalLessThan;
            public RoleClass C1I1DateTimeBetweenB;
            public RoleClass C1I1AllorsUnique;
            public RoleClass C1I1C1one2manies;
            public RoleClass C1I1S2many2one;
            public RoleClass C1S1AllorsDecimal;
            public RoleClass C1S1AllorsInteger;
            public RoleClass C1S1AllorsBinary;
            public RoleClass C1S1AllorsUnique;
            public RoleClass C1S1StringLarge;
            public RoleClass C1S1S2many2one;
            public RoleClass C1S1S2one2manies;
            public RoleClass C1S1AllorsDouble;
            public RoleClass C1S1AllorsString;
            public RoleClass C1S1C1many2one;
            public RoleClass C1S1C1one2one;
            public RoleClass C1S1AllorsBoolean;
            public RoleClass C1S1C1many2manies;
            public RoleClass C1S1S2many2manies;
            public RoleClass C1S1S2one2one;
            public RoleClass C1S1AllorsDateTime;
            public RoleClass C1S1C1one2manies;
            public RoleClass C1Name;
            public RoleClass C1S1234AllorsDouble;
            public RoleClass C1S1234AllorsDecimal;
            public RoleClass C1S1234AllorsInteger;
            public RoleClass C1S1234many2one;
            public RoleClass C1S1234C2one2one;
            public RoleClass C1S1234C2many2manies;
            public RoleClass C1S1234one2manies;
            public RoleClass C1S1234C2one2manies;
            public RoleClass C1S1234many2manies;
            public RoleClass C1ClassName;
            public RoleClass C1S1234AllorsDateTime;
            public RoleClass C1S1234one2one;
            public RoleClass C1S1234C2many2one;
            public RoleClass C1S1234AllorsString;
            public RoleClass C1S1234AllorsBoolean;
            public RoleClass C1I12AllorsBoolean;
            public RoleClass C1I12AllorsInteger;
            public RoleClass C1I12I34one2manies;
            public RoleClass C1C3many2one;
            public RoleClass C1I12C2many2one;
            public RoleClass C1I12AllorsDouble;
            public RoleClass C1I12I34many2one;
            public RoleClass C1I12I34many2manies;
            public RoleClass C1I12C3one2one;
            public RoleClass C1I12C2many2manies;
            public RoleClass C1I12AllorsDecimal;
            public RoleClass C1I12C2one2one;
            public RoleClass C1I12C3one2manies;
            public RoleClass C1I12C3many2manies;
            public RoleClass C1PrefetchTest;
            public RoleClass C1I12AllorsDateTime;
            public RoleClass C1I12AllorsString;
            public RoleClass C1I12I34one2one;
            public RoleClass C1I12C2one2manies;
            public RoleClass C1S12AllorsString;
            public RoleClass C1S12AllorsDateTime;
            public RoleClass C1S12C2many2manies;
            public RoleClass C1S12C2many2one;
            public RoleClass C1S12C2one2one;
            public RoleClass C1S12C2one2manies;
            public RoleClass C1S12AllorsBoolean;
            public RoleClass C1S12AllorsDouble;
            public RoleClass C1S12AllorsInteger;
            public RoleClass C1S12AllorsDecimal;
            public RoleClass C2I2AllorsBoolean;
            public RoleClass C2I2AllorsDecimal;
            public RoleClass C2I2AllorsDateTime;
            public RoleClass C2I2AllorsString;
            public RoleClass C2I2AllorsInteger;
            public RoleClass C2I2AllorsDouble;
            public RoleClass C2Name;
            public RoleClass C2S1234AllorsDouble;
            public RoleClass C2S1234AllorsDecimal;
            public RoleClass C2S1234AllorsInteger;
            public RoleClass C2S1234many2one;
            public RoleClass C2S1234C2one2one;
            public RoleClass C2S1234C2many2manies;
            public RoleClass C2S1234one2manies;
            public RoleClass C2S1234C2one2manies;
            public RoleClass C2S1234many2manies;
            public RoleClass C2ClassName;
            public RoleClass C2S1234AllorsDateTime;
            public RoleClass C2S1234one2one;
            public RoleClass C2S1234C2many2one;
            public RoleClass C2S1234AllorsString;
            public RoleClass C2S1234AllorsBoolean;
            public RoleClass C2S2AllorsString;
            public RoleClass C2S2AllorsInteger;
            public RoleClass C2S2AllorsDouble;
            public RoleClass C2S2AllorsBoolean;
            public RoleClass C2S2AllorsDecimal;
            public RoleClass C2S2AllorsDateTime;
            public RoleClass C2I23AllorsString;
            public RoleClass C2I12AllorsBoolean;
            public RoleClass C2I12AllorsInteger;
            public RoleClass C2I12I34one2manies;
            public RoleClass C2C3many2one;
            public RoleClass C2I12C2many2one;
            public RoleClass C2I12AllorsDouble;
            public RoleClass C2I12I34many2one;
            public RoleClass C2I12I34many2manies;
            public RoleClass C2I12C3one2one;
            public RoleClass C2I12C2many2manies;
            public RoleClass C2I12AllorsDecimal;
            public RoleClass C2I12C2one2one;
            public RoleClass C2I12C3one2manies;
            public RoleClass C2I12C3many2manies;
            public RoleClass C2PrefetchTest;
            public RoleClass C2I12AllorsDateTime;
            public RoleClass C2I12AllorsString;
            public RoleClass C2I12I34one2one;
            public RoleClass C2I12C2one2manies;
            public RoleClass C2S12AllorsString;
            public RoleClass C2S12AllorsDateTime;
            public RoleClass C2S12C2many2manies;
            public RoleClass C2S12C2many2one;
            public RoleClass C2S12C2one2one;
            public RoleClass C2S12C2one2manies;
            public RoleClass C2S12AllorsBoolean;
            public RoleClass C2S12AllorsDouble;
            public RoleClass C2S12AllorsInteger;
            public RoleClass C2S12AllorsDecimal;
            public RoleClass C3I3C4many2manies;
            public RoleClass C3I3AllorsString;
            public RoleClass C3I3I4one2manies;
            public RoleClass C3I3C4one2manies;
            public RoleClass C3I3I4many2manies;
            public RoleClass C3I3I4many2one;
            public RoleClass C3I3C4one2one;
            public RoleClass C3I3I4one2one;
            public RoleClass C3I3C4many2one;
            public RoleClass C3I3StringEquals;
            public RoleClass C3C1one2one;
            public RoleClass C3Name;
            public RoleClass C3S1234AllorsDouble;
            public RoleClass C3S1234AllorsDecimal;
            public RoleClass C3S1234AllorsInteger;
            public RoleClass C3S1234many2one;
            public RoleClass C3S1234C2one2one;
            public RoleClass C3S1234C2many2manies;
            public RoleClass C3S1234one2manies;
            public RoleClass C3S1234C2one2manies;
            public RoleClass C3S1234many2manies;
            public RoleClass C3ClassName;
            public RoleClass C3S1234AllorsDateTime;
            public RoleClass C3S1234one2one;
            public RoleClass C3S1234C2many2one;
            public RoleClass C3S1234AllorsString;
            public RoleClass C3S1234AllorsBoolean;
            public RoleClass C3I23AllorsString;
            public RoleClass C3I34AllorsDecimal;
            public RoleClass C3I34AllorsBoolean;
            public RoleClass C3I34AllorsDouble;
            public RoleClass C3I34AllorsInteger;
            public RoleClass C3I34AllorsString;
            public RoleClass C4Name;
            public RoleClass C4S1234AllorsDouble;
            public RoleClass C4S1234AllorsDecimal;
            public RoleClass C4S1234AllorsInteger;
            public RoleClass C4S1234many2one;
            public RoleClass C4S1234C2one2one;
            public RoleClass C4S1234C2many2manies;
            public RoleClass C4S1234one2manies;
            public RoleClass C4S1234C2one2manies;
            public RoleClass C4S1234many2manies;
            public RoleClass C4ClassName;
            public RoleClass C4S1234AllorsDateTime;
            public RoleClass C4S1234one2one;
            public RoleClass C4S1234C2many2one;
            public RoleClass C4S1234AllorsString;
            public RoleClass C4S1234AllorsBoolean;
            public RoleClass C4I34AllorsDecimal;
            public RoleClass C4I34AllorsBoolean;
            public RoleClass C4I34AllorsDouble;
            public RoleClass C4I34AllorsInteger;
            public RoleClass C4I34AllorsString;


            public RoleClass CompanyName;
            public RoleClass CompanyIndex;




            public RoleClass PersonName;
            public RoleClass PersonIndex;




            internal RoleClasses(ObjectTypes objectTypes, RelationTypes relationTypes)
            {
                this.C1I1I34one2manies = relationTypes.I1I1I34one2many.RoleClassBy(objectTypes.C1);
                this.C1I1I2one2manies = relationTypes.I1I1I2one2many.RoleClassBy(objectTypes.C1);
                this.C1I1I2many2one = relationTypes.I1I1I2many2one.RoleClassBy(objectTypes.C1);
                this.C1I1C2many2one = relationTypes.I1I1C2many2one.RoleClassBy(objectTypes.C1);
                this.C1I1C2one2one = relationTypes.I1I1C2one2one.RoleClassBy(objectTypes.C1);
                this.C1I1DecimalBetweenA = relationTypes.I1I1DecimalBetweenA.RoleClassBy(objectTypes.C1);
                this.C1I1S1one2one = relationTypes.I1I1S1one2one.RoleClassBy(objectTypes.C1);
                this.C1I1I12many2one = relationTypes.I1I1I12many2one.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsString = relationTypes.I1I1AllorsString.RoleClassBy(objectTypes.C1);
                this.C1I1DateTimeLessThan = relationTypes.I1I1DateTimeLessThan.RoleClassBy(objectTypes.C1);
                this.C1I1C2one2manies = relationTypes.I1I1C2one2many.RoleClassBy(objectTypes.C1);
                this.C1I1StringLarge = relationTypes.I1I1StringLarge.RoleClassBy(objectTypes.C1);
                this.C1I1FloatLessThan = relationTypes.I1I1FloatLessThan.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsDateTime = relationTypes.I1I1AllorsDateTime.RoleClassBy(objectTypes.C1);
                this.C1I1C1many2one = relationTypes.I1I1C1many2one.RoleClassBy(objectTypes.C1);
                this.C1I1I12one2one = relationTypes.I1I1I12one2one.RoleClassBy(objectTypes.C1);
                this.C1I1DecimalGreaterThan = relationTypes.I1I1DecimalGreaterThan.RoleClassBy(objectTypes.C1);
                this.C1I1C1one2one = relationTypes.I1I1C1one2one.RoleClassBy(objectTypes.C1);
                this.C1I1I2many2manies = relationTypes.I1I1I2many2many.RoleClassBy(objectTypes.C1);
                this.C1I1IntegerBetweenA = relationTypes.I1I1IntegerBetweenA.RoleClassBy(objectTypes.C1);
                this.C1I1I34many2one = relationTypes.I1I1I34many2one.RoleClassBy(objectTypes.C1);
                this.C1I1FloatBetweenA = relationTypes.I1I1FloatBetweenA.RoleClassBy(objectTypes.C1);
                this.C1I1IntegerLessThan = relationTypes.I1I1IntegerLessThan.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsInteger = relationTypes.I1I1AllorsInteger.RoleClassBy(objectTypes.C1);
                this.C1I1S2one2one = relationTypes.I1I1S2one2one.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsBoolean = relationTypes.I1I1AllorsBoolean.RoleClassBy(objectTypes.C1);
                this.C1I1I1many2one = relationTypes.I1I1I1many2one.RoleClassBy(objectTypes.C1);
                this.C1I1C1many2manies = relationTypes.I1I1C1many2many.RoleClassBy(objectTypes.C1);
                this.C1I1I2one2one = relationTypes.I1I1I2one2one.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsDecimal = relationTypes.I1I1AllorsDecimal.RoleClassBy(objectTypes.C1);
                this.C1I1S1many2manies = relationTypes.I1I1S1many2many.RoleClassBy(objectTypes.C1);
                this.C1I1DateTimeGreaterThan = relationTypes.I1I1DateTimeGreaterThan.RoleClassBy(objectTypes.C1);
                this.C1I1I34many2manies = relationTypes.I1I1I34many2many.RoleClassBy(objectTypes.C1);
                this.C1I1I34one2one = relationTypes.I1I1I34one2one.RoleClassBy(objectTypes.C1);
                this.C1I1I1one2manies = relationTypes.I1I1I1one2many.RoleClassBy(objectTypes.C1);
                this.C1I1I1many2manies = relationTypes.I1I1I1many2many.RoleClassBy(objectTypes.C1);
                this.C1I1S2many2manies = relationTypes.I1I1S2many2many.RoleClassBy(objectTypes.C1);
                this.C1I1I12many2manies = relationTypes.I1I1I12many2many.RoleClassBy(objectTypes.C1);
                this.C1I1StringEquals = relationTypes.I1I1StringEquals.RoleClassBy(objectTypes.C1);
                this.C1I1I12one2manies = relationTypes.I1I1I12one2many.RoleClassBy(objectTypes.C1);
                this.C1I1S2one2manies = relationTypes.I1I1S2one2many.RoleClassBy(objectTypes.C1);
                this.C1I1C2many2manies = relationTypes.I1I1C2many2many.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsBinary = relationTypes.I1I1AllorsBinary.RoleClassBy(objectTypes.C1);
                this.C1I1DecimalBetweenB = relationTypes.I1I1DecimalBetweenB.RoleClassBy(objectTypes.C1);
                this.C1I1FloatGreaterThan = relationTypes.I1I1FloatGreaterThan.RoleClassBy(objectTypes.C1);
                this.C1I1IntegerBetweenB = relationTypes.I1I1IntegerBetweenB.RoleClassBy(objectTypes.C1);
                this.C1I1DateTimeBetweenA = relationTypes.I1I1DateTimeBetweenA.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsDouble = relationTypes.I1I1AllorsDouble.RoleClassBy(objectTypes.C1);
                this.C1I1S1one2manies = relationTypes.I1I1S1one2many.RoleClassBy(objectTypes.C1);
                this.C1I1I1one2one = relationTypes.I1I1I1one2one.RoleClassBy(objectTypes.C1);
                this.C1I1IntegerGreaterThan = relationTypes.I1I1IntegerGreaterThan.RoleClassBy(objectTypes.C1);
                this.C1I1S1many2one = relationTypes.I1I1S1many2one.RoleClassBy(objectTypes.C1);
                this.C1I1FloatBetweenB = relationTypes.I1I1FloatBetweenB.RoleClassBy(objectTypes.C1);
                this.C1I1DecimalLessThan = relationTypes.I1I1DecimalLessThan.RoleClassBy(objectTypes.C1);
                this.C1I1DateTimeBetweenB = relationTypes.I1I1DateTimeBetweenB.RoleClassBy(objectTypes.C1);
                this.C1I1AllorsUnique = relationTypes.I1I1AllorsUnique.RoleClassBy(objectTypes.C1);
                this.C1I1C1one2manies = relationTypes.I1I1C1one2many.RoleClassBy(objectTypes.C1);
                this.C1I1S2many2one = relationTypes.I1I1S2many2one.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsDecimal = relationTypes.S1S1AllorsDecimal.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsInteger = relationTypes.S1S1AllorsInteger.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsBinary = relationTypes.S1S1AllorsBinary.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsUnique = relationTypes.S1S1AllorsUnique.RoleClassBy(objectTypes.C1);
                this.C1S1StringLarge = relationTypes.S1S1StringLarge.RoleClassBy(objectTypes.C1);
                this.C1S1S2many2one = relationTypes.S1S1S2many2one.RoleClassBy(objectTypes.C1);
                this.C1S1S2one2manies = relationTypes.S1S1S2one2many.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsDouble = relationTypes.S1S1AllorsDouble.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsString = relationTypes.S1S1AllorsString.RoleClassBy(objectTypes.C1);
                this.C1S1C1many2one = relationTypes.S1S1C1many2one.RoleClassBy(objectTypes.C1);
                this.C1S1C1one2one = relationTypes.S1S1C1one2one.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsBoolean = relationTypes.S1S1AllorsBoolean.RoleClassBy(objectTypes.C1);
                this.C1S1C1many2manies = relationTypes.S1S1C1many2many.RoleClassBy(objectTypes.C1);
                this.C1S1S2many2manies = relationTypes.S1S1S2many2many.RoleClassBy(objectTypes.C1);
                this.C1S1S2one2one = relationTypes.S1S1S2one2one.RoleClassBy(objectTypes.C1);
                this.C1S1AllorsDateTime = relationTypes.S1S1AllorsDateTime.RoleClassBy(objectTypes.C1);
                this.C1S1C1one2manies = relationTypes.S1S1C1one2many.RoleClassBy(objectTypes.C1);
                this.C1Name = relationTypes.S1234Name.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsDouble = relationTypes.S1234S1234AllorsDouble.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsDecimal = relationTypes.S1234S1234AllorsDecimal.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsInteger = relationTypes.S1234S1234AllorsInteger.RoleClassBy(objectTypes.C1);
                this.C1S1234many2one = relationTypes.S1234S1234many2one.RoleClassBy(objectTypes.C1);
                this.C1S1234C2one2one = relationTypes.S1234S1234C2one2one.RoleClassBy(objectTypes.C1);
                this.C1S1234C2many2manies = relationTypes.S1234S1234C2many2many.RoleClassBy(objectTypes.C1);
                this.C1S1234one2manies = relationTypes.S1234S1234one2many.RoleClassBy(objectTypes.C1);
                this.C1S1234C2one2manies = relationTypes.S1234S1234C2one2many.RoleClassBy(objectTypes.C1);
                this.C1S1234many2manies = relationTypes.S1234S1234many2many.RoleClassBy(objectTypes.C1);
                this.C1ClassName = relationTypes.S1234ClassName.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsDateTime = relationTypes.S1234S1234AllorsDateTime.RoleClassBy(objectTypes.C1);
                this.C1S1234one2one = relationTypes.S1234S1234one2one.RoleClassBy(objectTypes.C1);
                this.C1S1234C2many2one = relationTypes.S1234S1234C2many2one.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsString = relationTypes.S1234S1234AllorsString.RoleClassBy(objectTypes.C1);
                this.C1S1234AllorsBoolean = relationTypes.S1234S1234AllorsBoolean.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsBoolean = relationTypes.I12I12AllorsBoolean.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsInteger = relationTypes.I12I12AllorsInteger.RoleClassBy(objectTypes.C1);
                this.C1I12I34one2manies = relationTypes.I12I12I34one2many.RoleClassBy(objectTypes.C1);
                this.C1C3many2one = relationTypes.I12C3many2one.RoleClassBy(objectTypes.C1);
                this.C1I12C2many2one = relationTypes.I12I12C2many2one.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsDouble = relationTypes.I12I12AllorsDouble.RoleClassBy(objectTypes.C1);
                this.C1I12I34many2one = relationTypes.I12I12I34many2one.RoleClassBy(objectTypes.C1);
                this.C1I12I34many2manies = relationTypes.I12I12I34many2many.RoleClassBy(objectTypes.C1);
                this.C1I12C3one2one = relationTypes.I12I12C3one2one.RoleClassBy(objectTypes.C1);
                this.C1I12C2many2manies = relationTypes.I12I12C2many2many.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsDecimal = relationTypes.I12I12AllorsDecimal.RoleClassBy(objectTypes.C1);
                this.C1I12C2one2one = relationTypes.I12I12C2one2one.RoleClassBy(objectTypes.C1);
                this.C1I12C3one2manies = relationTypes.I12I12C3one2many.RoleClassBy(objectTypes.C1);
                this.C1I12C3many2manies = relationTypes.I12I12C3many2many.RoleClassBy(objectTypes.C1);
                this.C1PrefetchTest = relationTypes.I12PrefetchTest.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsDateTime = relationTypes.I12I12AllorsDateTime.RoleClassBy(objectTypes.C1);
                this.C1I12AllorsString = relationTypes.I12I12AllorsString.RoleClassBy(objectTypes.C1);
                this.C1I12I34one2one = relationTypes.I12I12I34one2one.RoleClassBy(objectTypes.C1);
                this.C1I12C2one2manies = relationTypes.I12I12C2one2many.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsString = relationTypes.S12S12AllorsString.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsDateTime = relationTypes.S12S12AllorsDateTime.RoleClassBy(objectTypes.C1);
                this.C1S12C2many2manies = relationTypes.S12S12C2many2many.RoleClassBy(objectTypes.C1);
                this.C1S12C2many2one = relationTypes.S12S12C2many2one.RoleClassBy(objectTypes.C1);
                this.C1S12C2one2one = relationTypes.S12S12C2one2one.RoleClassBy(objectTypes.C1);
                this.C1S12C2one2manies = relationTypes.S12S12C2one2many.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsBoolean = relationTypes.S12S12AllorsBoolean.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsDouble = relationTypes.S12S12AllorsDouble.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsInteger = relationTypes.S12S12AllorsInteger.RoleClassBy(objectTypes.C1);
                this.C1S12AllorsDecimal = relationTypes.S12S12AllorsDecimal.RoleClassBy(objectTypes.C1);
                this.C2I2AllorsBoolean = relationTypes.I2I2AllorsBoolean.RoleClassBy(objectTypes.C2);
                this.C2I2AllorsDecimal = relationTypes.I2I2AllorsDecimal.RoleClassBy(objectTypes.C2);
                this.C2I2AllorsDateTime = relationTypes.I2I2AllorsDateTime.RoleClassBy(objectTypes.C2);
                this.C2I2AllorsString = relationTypes.I2I2AllorsString.RoleClassBy(objectTypes.C2);
                this.C2I2AllorsInteger = relationTypes.I2I2AllorsInteger.RoleClassBy(objectTypes.C2);
                this.C2I2AllorsDouble = relationTypes.I2I2AllorsDouble.RoleClassBy(objectTypes.C2);
                this.C2Name = relationTypes.S1234Name.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsDouble = relationTypes.S1234S1234AllorsDouble.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsDecimal = relationTypes.S1234S1234AllorsDecimal.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsInteger = relationTypes.S1234S1234AllorsInteger.RoleClassBy(objectTypes.C2);
                this.C2S1234many2one = relationTypes.S1234S1234many2one.RoleClassBy(objectTypes.C2);
                this.C2S1234C2one2one = relationTypes.S1234S1234C2one2one.RoleClassBy(objectTypes.C2);
                this.C2S1234C2many2manies = relationTypes.S1234S1234C2many2many.RoleClassBy(objectTypes.C2);
                this.C2S1234one2manies = relationTypes.S1234S1234one2many.RoleClassBy(objectTypes.C2);
                this.C2S1234C2one2manies = relationTypes.S1234S1234C2one2many.RoleClassBy(objectTypes.C2);
                this.C2S1234many2manies = relationTypes.S1234S1234many2many.RoleClassBy(objectTypes.C2);
                this.C2ClassName = relationTypes.S1234ClassName.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsDateTime = relationTypes.S1234S1234AllorsDateTime.RoleClassBy(objectTypes.C2);
                this.C2S1234one2one = relationTypes.S1234S1234one2one.RoleClassBy(objectTypes.C2);
                this.C2S1234C2many2one = relationTypes.S1234S1234C2many2one.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsString = relationTypes.S1234S1234AllorsString.RoleClassBy(objectTypes.C2);
                this.C2S1234AllorsBoolean = relationTypes.S1234S1234AllorsBoolean.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsString = relationTypes.S2S2AllorsString.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsInteger = relationTypes.S2S2AllorsInteger.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsDouble = relationTypes.S2S2AllorsDouble.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsBoolean = relationTypes.S2S2AllorsBoolean.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsDecimal = relationTypes.S2S2AllorsDecimal.RoleClassBy(objectTypes.C2);
                this.C2S2AllorsDateTime = relationTypes.S2S2AllorsDateTime.RoleClassBy(objectTypes.C2);
                this.C2I23AllorsString = relationTypes.I23I23AllorsString.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsBoolean = relationTypes.I12I12AllorsBoolean.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsInteger = relationTypes.I12I12AllorsInteger.RoleClassBy(objectTypes.C2);
                this.C2I12I34one2manies = relationTypes.I12I12I34one2many.RoleClassBy(objectTypes.C2);
                this.C2C3many2one = relationTypes.I12C3many2one.RoleClassBy(objectTypes.C2);
                this.C2I12C2many2one = relationTypes.I12I12C2many2one.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsDouble = relationTypes.I12I12AllorsDouble.RoleClassBy(objectTypes.C2);
                this.C2I12I34many2one = relationTypes.I12I12I34many2one.RoleClassBy(objectTypes.C2);
                this.C2I12I34many2manies = relationTypes.I12I12I34many2many.RoleClassBy(objectTypes.C2);
                this.C2I12C3one2one = relationTypes.I12I12C3one2one.RoleClassBy(objectTypes.C2);
                this.C2I12C2many2manies = relationTypes.I12I12C2many2many.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsDecimal = relationTypes.I12I12AllorsDecimal.RoleClassBy(objectTypes.C2);
                this.C2I12C2one2one = relationTypes.I12I12C2one2one.RoleClassBy(objectTypes.C2);
                this.C2I12C3one2manies = relationTypes.I12I12C3one2many.RoleClassBy(objectTypes.C2);
                this.C2I12C3many2manies = relationTypes.I12I12C3many2many.RoleClassBy(objectTypes.C2);
                this.C2PrefetchTest = relationTypes.I12PrefetchTest.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsDateTime = relationTypes.I12I12AllorsDateTime.RoleClassBy(objectTypes.C2);
                this.C2I12AllorsString = relationTypes.I12I12AllorsString.RoleClassBy(objectTypes.C2);
                this.C2I12I34one2one = relationTypes.I12I12I34one2one.RoleClassBy(objectTypes.C2);
                this.C2I12C2one2manies = relationTypes.I12I12C2one2many.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsString = relationTypes.S12S12AllorsString.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsDateTime = relationTypes.S12S12AllorsDateTime.RoleClassBy(objectTypes.C2);
                this.C2S12C2many2manies = relationTypes.S12S12C2many2many.RoleClassBy(objectTypes.C2);
                this.C2S12C2many2one = relationTypes.S12S12C2many2one.RoleClassBy(objectTypes.C2);
                this.C2S12C2one2one = relationTypes.S12S12C2one2one.RoleClassBy(objectTypes.C2);
                this.C2S12C2one2manies = relationTypes.S12S12C2one2many.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsBoolean = relationTypes.S12S12AllorsBoolean.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsDouble = relationTypes.S12S12AllorsDouble.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsInteger = relationTypes.S12S12AllorsInteger.RoleClassBy(objectTypes.C2);
                this.C2S12AllorsDecimal = relationTypes.S12S12AllorsDecimal.RoleClassBy(objectTypes.C2);
                this.C3I3C4many2manies = relationTypes.I3I3C4many2many.RoleClassBy(objectTypes.C3);
                this.C3I3AllorsString = relationTypes.I3I3AllorsString.RoleClassBy(objectTypes.C3);
                this.C3I3I4one2manies = relationTypes.I3I3I4one2many.RoleClassBy(objectTypes.C3);
                this.C3I3C4one2manies = relationTypes.I3I3C4one2many.RoleClassBy(objectTypes.C3);
                this.C3I3I4many2manies = relationTypes.I3I3I4many2many.RoleClassBy(objectTypes.C3);
                this.C3I3I4many2one = relationTypes.I3I3I4many2one.RoleClassBy(objectTypes.C3);
                this.C3I3C4one2one = relationTypes.I3I3C4one2one.RoleClassBy(objectTypes.C3);
                this.C3I3I4one2one = relationTypes.I3I3I4one2one.RoleClassBy(objectTypes.C3);
                this.C3I3C4many2one = relationTypes.I3I3C4many2one.RoleClassBy(objectTypes.C3);
                this.C3I3StringEquals = relationTypes.I3I3StringEquals.RoleClassBy(objectTypes.C3);
                this.C3C1one2one = relationTypes.I3C1one2one.RoleClassBy(objectTypes.C3);
                this.C3Name = relationTypes.S1234Name.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsDouble = relationTypes.S1234S1234AllorsDouble.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsDecimal = relationTypes.S1234S1234AllorsDecimal.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsInteger = relationTypes.S1234S1234AllorsInteger.RoleClassBy(objectTypes.C3);
                this.C3S1234many2one = relationTypes.S1234S1234many2one.RoleClassBy(objectTypes.C3);
                this.C3S1234C2one2one = relationTypes.S1234S1234C2one2one.RoleClassBy(objectTypes.C3);
                this.C3S1234C2many2manies = relationTypes.S1234S1234C2many2many.RoleClassBy(objectTypes.C3);
                this.C3S1234one2manies = relationTypes.S1234S1234one2many.RoleClassBy(objectTypes.C3);
                this.C3S1234C2one2manies = relationTypes.S1234S1234C2one2many.RoleClassBy(objectTypes.C3);
                this.C3S1234many2manies = relationTypes.S1234S1234many2many.RoleClassBy(objectTypes.C3);
                this.C3ClassName = relationTypes.S1234ClassName.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsDateTime = relationTypes.S1234S1234AllorsDateTime.RoleClassBy(objectTypes.C3);
                this.C3S1234one2one = relationTypes.S1234S1234one2one.RoleClassBy(objectTypes.C3);
                this.C3S1234C2many2one = relationTypes.S1234S1234C2many2one.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsString = relationTypes.S1234S1234AllorsString.RoleClassBy(objectTypes.C3);
                this.C3S1234AllorsBoolean = relationTypes.S1234S1234AllorsBoolean.RoleClassBy(objectTypes.C3);
                this.C3I23AllorsString = relationTypes.I23I23AllorsString.RoleClassBy(objectTypes.C3);
                this.C3I34AllorsDecimal = relationTypes.I34I34AllorsDecimal.RoleClassBy(objectTypes.C3);
                this.C3I34AllorsBoolean = relationTypes.I34I34AllorsBoolean.RoleClassBy(objectTypes.C3);
                this.C3I34AllorsDouble = relationTypes.I34I34AllorsDouble.RoleClassBy(objectTypes.C3);
                this.C3I34AllorsInteger = relationTypes.I34I34AllorsInteger.RoleClassBy(objectTypes.C3);
                this.C3I34AllorsString = relationTypes.I34I34AllorsString.RoleClassBy(objectTypes.C3);
                this.C4Name = relationTypes.S1234Name.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsDouble = relationTypes.S1234S1234AllorsDouble.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsDecimal = relationTypes.S1234S1234AllorsDecimal.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsInteger = relationTypes.S1234S1234AllorsInteger.RoleClassBy(objectTypes.C4);
                this.C4S1234many2one = relationTypes.S1234S1234many2one.RoleClassBy(objectTypes.C4);
                this.C4S1234C2one2one = relationTypes.S1234S1234C2one2one.RoleClassBy(objectTypes.C4);
                this.C4S1234C2many2manies = relationTypes.S1234S1234C2many2many.RoleClassBy(objectTypes.C4);
                this.C4S1234one2manies = relationTypes.S1234S1234one2many.RoleClassBy(objectTypes.C4);
                this.C4S1234C2one2manies = relationTypes.S1234S1234C2one2many.RoleClassBy(objectTypes.C4);
                this.C4S1234many2manies = relationTypes.S1234S1234many2many.RoleClassBy(objectTypes.C4);
                this.C4ClassName = relationTypes.S1234ClassName.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsDateTime = relationTypes.S1234S1234AllorsDateTime.RoleClassBy(objectTypes.C4);
                this.C4S1234one2one = relationTypes.S1234S1234one2one.RoleClassBy(objectTypes.C4);
                this.C4S1234C2many2one = relationTypes.S1234S1234C2many2one.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsString = relationTypes.S1234S1234AllorsString.RoleClassBy(objectTypes.C4);
                this.C4S1234AllorsBoolean = relationTypes.S1234S1234AllorsBoolean.RoleClassBy(objectTypes.C4);
                this.C4I34AllorsDecimal = relationTypes.I34I34AllorsDecimal.RoleClassBy(objectTypes.C4);
                this.C4I34AllorsBoolean = relationTypes.I34I34AllorsBoolean.RoleClassBy(objectTypes.C4);
                this.C4I34AllorsDouble = relationTypes.I34I34AllorsDouble.RoleClassBy(objectTypes.C4);
                this.C4I34AllorsInteger = relationTypes.I34I34AllorsInteger.RoleClassBy(objectTypes.C4);
                this.C4I34AllorsString = relationTypes.I34I34AllorsString.RoleClassBy(objectTypes.C4);


                this.CompanyName = relationTypes.NamedName.RoleClassBy(objectTypes.Company);
                this.CompanyIndex = relationTypes.NamedIndex.RoleClassBy(objectTypes.Company);




                this.PersonName = relationTypes.NamedName.RoleClassBy(objectTypes.Person);
                this.PersonIndex = relationTypes.NamedIndex.RoleClassBy(objectTypes.Person);



            }
        }

        internal class MethodTypes
        {
         public MethodType SandboxDoIt;















         public MethodType NamedInheritedDoIt;







        }

        public MetaPopulation Build() {
            var meta =  new MetaPopulation();
            var domains = new Domains();
            var objectTypes = new ObjectTypes();
            var relationTypes = new RelationTypes();
            var methodTypes = new MethodTypes();

            this.BuildDomains(meta, domains);
            this.BuildDomainInheritances(meta, domains);
            this.BuildUnits(meta, domains, objectTypes);
            this.BuildInterfaces(meta, domains, objectTypes);
            this.BuildClasses(meta, domains, objectTypes);
            this.BuildInheritances(meta, domains, objectTypes);
            this.BuildRelationTypes(meta, domains, objectTypes, relationTypes);
            this.BuildMethodTypes(meta, domains, objectTypes, methodTypes);

            var roleClasses = new RoleClasses(objectTypes, relationTypes);

            this.BuildAdapters(meta, domains, objectTypes, relationTypes, methodTypes, roleClasses);

            return meta;
        }

		private void BuildDomains(MetaPopulation meta, Domains domains)
		{
	        domains.Adapters = new Domain(meta, new System.Guid("d9de700e-ead7-4518-92d9-962efd02e59a"))
			{
				Name = "Adapters"
			};
		}

		private void BuildDomainInheritances(MetaPopulation meta, Domains domains)
		{
		}

		private void BuildUnits(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
	        objectTypes.Binary = new Unit(meta, UnitIds.Binary)
            {
                UnitTag = UnitTags.Binary,
                SingularName = UnitNames.Binary
            };
	        objectTypes.Boolean = new Unit(meta, UnitIds.Boolean)
            {
                UnitTag = UnitTags.Boolean,
                SingularName = UnitNames.Boolean
            };
	        objectTypes.DateTime = new Unit(meta, UnitIds.DateTime)
            {
                UnitTag = UnitTags.DateTime,
                SingularName = UnitNames.DateTime
            };
	        objectTypes.Decimal = new Unit(meta, UnitIds.Decimal)
            {
                UnitTag = UnitTags.Decimal,
                SingularName = UnitNames.Decimal
            };
	        objectTypes.Float = new Unit(meta, UnitIds.Float)
            {
                UnitTag = UnitTags.Float,
                SingularName = UnitNames.Float
            };
	        objectTypes.Integer = new Unit(meta, UnitIds.Integer)
            {
                UnitTag = UnitTags.Integer,
                SingularName = UnitNames.Integer
            };
	        objectTypes.String = new Unit(meta, UnitIds.String)
            {
                UnitTag = UnitTags.String,
                SingularName = UnitNames.String
            };
	        objectTypes.Unique = new Unit(meta, UnitIds.Unique)
            {
                UnitTag = UnitTags.Unique,
                SingularName = UnitNames.Unique
            };
		}

		private void BuildInterfaces(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
	        objectTypes.I1 = new Interface(meta, new System.Guid("fefcf1b6-ac8f-47b0-bed5-939207a2833e"))
            {
                SingularName = "I1",
            };
	        objectTypes.I12 = new Interface(meta, new System.Guid("97755724-b934-4cc5-beb4-3d49a7a4b27e"))
            {
                SingularName = "I12",
            };
	        objectTypes.I2 = new Interface(meta, new System.Guid("19bb2bc3-d53a-4d15-86d0-b250fdbcb0a0"))
            {
                SingularName = "I2",
            };
	        objectTypes.I23 = new Interface(meta, new System.Guid("29cb9717-2452-4da0-9a29-8bd5d815307a"))
            {
                SingularName = "I23",
            };
	        objectTypes.I3 = new Interface(meta, new System.Guid("2d86277f-3993-4831-a7de-3640166d3d50"))
            {
                SingularName = "I3",
            };
	        objectTypes.I34 = new Interface(meta, new System.Guid("ebc22540-54c8-4601-a43d-2ed6da9f3e79"))
            {
                SingularName = "I34",
            };
	        objectTypes.I4 = new Interface(meta, new System.Guid("7a49be0e-cb91-4e1e-b113-ac67ec969935"))
            {
                SingularName = "I4",
            };
	        objectTypes.IGT32Composite = new Interface(meta, new System.Guid("ee84609f-e165-4037-b8ce-f7c8b826e603"))
            {
                SingularName = "IGT32Composite",
            };
	        objectTypes.IGT32Unit = new Interface(meta, new System.Guid("584681af-90f0-45b1-a80e-6a73c3592600"))
            {
                SingularName = "IGT32Unit",
            };
	        objectTypes.ILT32Composite = new Interface(meta, new System.Guid("4f53e1e7-e88a-4161-969c-1fed0b3a24a2"))
            {
                SingularName = "ILT32Composite",
            };
	        objectTypes.ILT32Unit = new Interface(meta, new System.Guid("228fa79f-afa7-418c-968e-8c0d38fb3ad2"))
            {
                SingularName = "ILT32Unit",
            };
	        objectTypes.InterfaceWithoutConcreteClass = new Interface(meta, new System.Guid("2f4bc713-47c9-4e07-9f2b-1d22a0cb4fad"))
            {
                SingularName = "InterfaceWithoutConcreteClass",
            };
	        objectTypes.ISandbox = new Interface(meta, new System.Guid("7ba2ab26-491b-49eb-944c-26f6bb66e50f"))
            {
                SingularName = "ISandbox",
            };
	        objectTypes.Named = new Interface(meta, new System.Guid("fcaa52e3-4a90-4981-b45d-d158e2589506"))
            {
                SingularName = "Named",
            };
	        objectTypes.Object = new Interface(meta, new System.Guid("12504f04-02c6-4778-98fe-04eba12ef8b2"))
            {
                SingularName = "Object",
            };
	        objectTypes.S1 = new Interface(meta, new System.Guid("15c3bb71-075d-48ad-8a00-250c2f627092"))
            {
                SingularName = "S1",
            };
	        objectTypes.S12 = new Interface(meta, new System.Guid("c5747a64-f468-4d0d-80f3-6463bd32b0ca"))
            {
                SingularName = "S12",
            };
	        objectTypes.S1234 = new Interface(meta, new System.Guid("c3c0ecf3-9f8d-4701-854f-8ddea1bd69fd"))
            {
                SingularName = "S1234",
            };
	        objectTypes.S2 = new Interface(meta, new System.Guid("feeb7027-7c6c-4cb5-8718-93e6e8a4afd8"))
            {
                SingularName = "S2",
            };
	        objectTypes.S3 = new Interface(meta, new System.Guid("5b24107d-f5e8-499b-94f7-2bf712493546"))
            {
                SingularName = "S3",
            };
	        objectTypes.S4 = new Interface(meta, new System.Guid("5b348bcb-823d-4cbe-b3ac-a18b1cd96581"))
            {
                SingularName = "S4",
            };
		}

		private void BuildClasses(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
	        objectTypes.C1 = new Class(meta, new System.Guid("7041c691-d896-4628-8f50-1c24f5d03414"))
            {
                SingularName = "C1",
                PluralName = "C1s",
            };
	        objectTypes.C2 = new Class(meta, new System.Guid("72c07e8a-03f5-4da8-ab37-236333d4f74e"))
            {
                SingularName = "C2",
                PluralName = "C2s",
            };
	        objectTypes.C3 = new Class(meta, new System.Guid("2a9b5a77-6065-4f2a-bbc3-655426f0f97b"))
            {
                SingularName = "C3",
                PluralName = "C3s",
            };
	        objectTypes.C4 = new Class(meta, new System.Guid("20049a79-20c7-478b-a5ba-c54b1e615168"))
            {
                SingularName = "C4",
                PluralName = "C4s",
            };
	        objectTypes.ClassWithoutRoles = new Class(meta, new System.Guid("e1008840-6d7c-4d44-b2ad-1545d23f90d8"))
            {
                SingularName = "ClassWithoutRoles",
                PluralName = "ClassWithoutRoleses",
            };
	        objectTypes.ClassWithoutUnitRoles = new Class(meta, new System.Guid("071d291d-fcc6-4511-8aa2-2d30fdeede8f"))
            {
                SingularName = "ClassWithoutUnitRoles",
                PluralName = "ClassWithoutUnitRoleses",
            };
	        objectTypes.Company = new Class(meta, new System.Guid("b1b6361e-5ee5-434c-9c92-46c6166195c4"))
            {
                SingularName = "Company",
                PluralName = "Companies",
            };
	        objectTypes.GT32 = new Class(meta, new System.Guid("4f6301b3-6f0a-40c2-8267-4f8631bae706"))
            {
                SingularName = "GT32",
                PluralName = "GT32s",
            };
	        objectTypes.GT32UnitLT32Composite = new Class(meta, new System.Guid("7683eb7f-cbac-4947-ac29-4ef15ae47597"))
            {
                SingularName = "GT32UnitLT32Composite",
                PluralName = "GT32UnitLT32Composites",
            };
	        objectTypes.LT32 = new Class(meta, new System.Guid("67c8d19f-1947-487c-8884-dbd76033aab0"))
            {
                SingularName = "LT32",
                PluralName = "LT32s",
            };
	        objectTypes.LT32UnitGT32Composite = new Class(meta, new System.Guid("15ea889f-21d6-4682-aca2-c2987f592f0e"))
            {
                SingularName = "LT32UnitGT32Composite",
                PluralName = "LT32UnitGT32Composites",
            };
	        objectTypes.Person = new Class(meta, new System.Guid("6a082a25-a8f2-4acd-a1a3-ba4461b729f1"))
            {
                SingularName = "Person",
                PluralName = "People",
            };
	        objectTypes.Sandbox = new Class(meta, new System.Guid("73970b0f-1ff4-4d39-aad8-fdbfbaae472f"))
            {
                SingularName = "Sandbox",
                PluralName = "Sandboxes",
            };
	        objectTypes.SingleUnit = new Class(meta, new System.Guid("c3e82ab0-f586-4913-acb0-838ffd6701f8"))
            {
                SingularName = "SingleUnit",
                PluralName = "SingleUnits",
            };
	        objectTypes.User = new Class(meta, new System.Guid("0d6bc154-112b-4a58-aa96-3b2a96f82523"))
            {
                SingularName = "User",
                PluralName = "Users",
            };
		}

		private void BuildInheritances(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
            new Inheritance(meta){ Subtype = objectTypes.C1, Supertype = objectTypes.I1};
            new Inheritance(meta){ Subtype = objectTypes.C1, Supertype = objectTypes.I12};
            new Inheritance(meta){ Subtype = objectTypes.C2, Supertype = objectTypes.I2};
            new Inheritance(meta){ Subtype = objectTypes.C2, Supertype = objectTypes.I23};
            new Inheritance(meta){ Subtype = objectTypes.C2, Supertype = objectTypes.I12};
            new Inheritance(meta){ Subtype = objectTypes.C3, Supertype = objectTypes.I3};
            new Inheritance(meta){ Subtype = objectTypes.C3, Supertype = objectTypes.I23};
            new Inheritance(meta){ Subtype = objectTypes.C3, Supertype = objectTypes.I34};
            new Inheritance(meta){ Subtype = objectTypes.C4, Supertype = objectTypes.I4};
            new Inheritance(meta){ Subtype = objectTypes.C4, Supertype = objectTypes.I34};


            new Inheritance(meta){ Subtype = objectTypes.Company, Supertype = objectTypes.Named};




            new Inheritance(meta){ Subtype = objectTypes.Person, Supertype = objectTypes.Named};



            new Inheritance(meta){ Subtype = objectTypes.I1, Supertype = objectTypes.S1};
            new Inheritance(meta){ Subtype = objectTypes.I12, Supertype = objectTypes.S12};
            new Inheritance(meta){ Subtype = objectTypes.I2, Supertype = objectTypes.S1234};
            new Inheritance(meta){ Subtype = objectTypes.I2, Supertype = objectTypes.S2};
            new Inheritance(meta){ Subtype = objectTypes.I23, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.I3, Supertype = objectTypes.S1234};
            new Inheritance(meta){ Subtype = objectTypes.I3, Supertype = objectTypes.S3};
            new Inheritance(meta){ Subtype = objectTypes.I34, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.I4, Supertype = objectTypes.S4};
            new Inheritance(meta){ Subtype = objectTypes.I4, Supertype = objectTypes.S1234};
            new Inheritance(meta){ Subtype = objectTypes.IGT32Composite, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.IGT32Unit, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.ILT32Composite, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.ILT32Unit, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.InterfaceWithoutConcreteClass, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.ISandbox, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.Named, Supertype = objectTypes.Object};

            new Inheritance(meta){ Subtype = objectTypes.S1, Supertype = objectTypes.S1234};
            new Inheritance(meta){ Subtype = objectTypes.S12, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.S1234, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.S2, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.S3, Supertype = objectTypes.Object};
            new Inheritance(meta){ Subtype = objectTypes.S4, Supertype = objectTypes.Object};
		}

		private void BuildRelationTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
		{
                this.BuildC1C1DecimalBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DecimalBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildC1Argument(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I12one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1FloatBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildC1Many2One(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1FloatBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1IntegerLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1StringLarge(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1FloatGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I12many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DateTimeLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1IndexedMaxBinary(meta, domains, objectTypes, relationTypes);
                this.BuildC1IndexedMaxString(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DateTimeBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1FloatLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DecimalGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DateTimeBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsBinary(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DateTimeGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I12one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I12many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1I2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsUnique(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C3one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C3many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1StringEquals(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1IntegerGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C3may2one(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1IntegerBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1IntegerBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1S2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1DecimalLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildC1C1C3one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildC2C1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildC2C1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC2C1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C2AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildC2C1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C3Many2Many(meta, domains, objectTypes, relationTypes);
                this.BuildC2C3Many2One(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3I4one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C4many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C4many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3I4many2many(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3I4many2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C4one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3C4one2one(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3StringEquals(meta, domains, objectTypes, relationTypes);
                this.BuildC3C3I4one2many(meta, domains, objectTypes, relationTypes);
                this.BuildC4C4AllorsString(meta, domains, objectTypes, relationTypes);


                this.BuildCompanyManager(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyEmployee(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyFirstPerson(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyNamedsOneSort2(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyOwner(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyIndexedMany2ManyPerson(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyPersonsOneSort1(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyPersonsManySort1(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyNamedsManySort1(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyPersonsManySort2(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyPersonsOneSort2(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyNamedManySort2(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyMany2ManyPerson(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyChild(meta, domains, objectTypes, relationTypes);
                this.BuildCompanyNamedsOneSort1(meta, domains, objectTypes, relationTypes);




                this.BuildPersonNextPerson(meta, domains, objectTypes, relationTypes);
                this.BuildPersonCompany(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxInvisibleMany(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxInvisibleOne(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxInvisibleValue(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxTest(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxAllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildSandboxAllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildSingleUnitAllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildUserSelect(meta, domains, objectTypes, relationTypes);
                this.BuildUserFrom(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I34one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DecimalBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I12many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DateTimeLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1StringLarge(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1FloatLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I12one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DecimalGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1IntegerBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I34many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1FloatBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1IntegerLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DateTimeGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I34many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I34one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I12many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1StringEquals(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I12one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsBinary(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DecimalBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1FloatGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1IntegerBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DateTimeBetweenA(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1I1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1IntegerGreaterThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1FloatBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DecimalLessThan(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1DateTimeBetweenB(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1AllorsUnique(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1C1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI1I1S2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12I34one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI12C3many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12I34many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12I34many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C3one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C3one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C3many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI12PrefetchTest(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12I34one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI12I12C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildI2I2AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildI23I23AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3C4many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3I4one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3C4one2many(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3I4many2many(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3I4many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3C4one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3I4one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3C4many2one(meta, domains, objectTypes, relationTypes);
                this.BuildI3I3StringEquals(meta, domains, objectTypes, relationTypes);
                this.BuildI3C1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildI34I34AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildI34I34AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildI34I34AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildI34I34AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildI34I34AllorsString(meta, domains, objectTypes, relationTypes);

                this.BuildIGT32CompositeSelf13(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf31(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf14(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf21(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf2(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf23(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf22(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf18(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf17(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf3(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf29(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf26(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf4(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf8(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf24(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf12(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf7(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf6(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf25(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf20(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf9(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf11(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf32(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf28(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf33(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf27(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf30(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf1(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf15(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf5(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf19(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf10(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32CompositeSelf16(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString2(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString5(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString19(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString18(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString21(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString31(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString15(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString6(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString27(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString11(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString33(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString32(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString25(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString8(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString28(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString29(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString20(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString16(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString30(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString12(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString26(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString17(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString4(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString10(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString23(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString24(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString1(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString14(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString13(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString22(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString3(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString7(meta, domains, objectTypes, relationTypes);
                this.BuildIGT32UnitAllorsString9(meta, domains, objectTypes, relationTypes);
                this.BuildILT32CompositeSelf3(meta, domains, objectTypes, relationTypes);
                this.BuildILT32CompositeSelf2(meta, domains, objectTypes, relationTypes);
                this.BuildILT32CompositeSelf1(meta, domains, objectTypes, relationTypes);
                this.BuildILT32UnitAllorsString1(meta, domains, objectTypes, relationTypes);
                this.BuildILT32UnitAllorsString3(meta, domains, objectTypes, relationTypes);
                this.BuildILT32UnitAllorsString2(meta, domains, objectTypes, relationTypes);
                this.BuildInterfaceWithoutConcreteClassAllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildISandboxInvisibleValue(meta, domains, objectTypes, relationTypes);
                this.BuildISandboxInvisibleMany(meta, domains, objectTypes, relationTypes);
                this.BuildISandboxInvisibleOne(meta, domains, objectTypes, relationTypes);
                this.BuildNamedName(meta, domains, objectTypes, relationTypes);
                this.BuildNamedIndex(meta, domains, objectTypes, relationTypes);

                this.BuildS1S1AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsBinary(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsUnique(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1StringLarge(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1S2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1S2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1C1many2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1C1one2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1C1many2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1S2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1S2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildS1S1C1one2many(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildS12S12AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildS1234Name(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234many2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234C2one2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234C2many2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234one2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234C2one2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234many2many(meta, domains, objectTypes, relationTypes);
                this.BuildS1234ClassName(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsDateTime(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234one2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234C2many2one(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildS1234S1234AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsString(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsInteger(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsDouble(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsBoolean(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsDecimal(meta, domains, objectTypes, relationTypes);
                this.BuildS2S2AllorsDateTime(meta, domains, objectTypes, relationTypes);


		}

        private void BuildC1C1DecimalBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DecimalBetweenA = new RelationType(objectTypes.C1, new System.Guid("024db9e0-b51f-4d8b-a2d0-0a041dcebd62"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C1DecimalBetweenA",
                    PluralName = "C1DecimalBetweenAs",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildC1C1I2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I2one2one = new RelationType(objectTypes.C1, new System.Guid("03fc18eb-46be-411a-9b1e-4a1953843d92"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "C1I2one2one",
                    PluralName = "C1I2one2ones",
                },
            };
        }
        private void BuildC1C1DecimalBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DecimalBetweenB = new RelationType(objectTypes.C1, new System.Guid("0aefa669-9c8a-4fbf-98a4-230d93df8341"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C1DecimalBetweenB",
                    PluralName = "C1DecimalBetweenBs",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildC1Argument(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1Argument = new RelationType(objectTypes.C1, new System.Guid("0e57dd07-bb58-4620-a898-3060af007f60"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "Argument",
                    PluralName = "Arguments",
		            Size = 256,
                },
            };
        }
        private void BuildC1C1S1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S1one2many = new RelationType(objectTypes.C1, new System.Guid("10df748e-3b9c-48f4-82dc-85498f199567"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "C1S1one2many",
                    PluralName = "C1S1one2manies",
                },
            };
        }
        private void BuildC1C1I12one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I12one2one = new RelationType(objectTypes.C1, new System.Guid("13761939-4842-45ba-af73-2a5976e2d6e3"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "C1I12one2one",
                    PluralName = "C1I12one2ones",
                },
            };
        }
        private void BuildC1C1AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsString = new RelationType(objectTypes.C1, new System.Guid("20713860-8abd-4d71-8ccc-2b4d1b88bce3"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C1AllorsString",
                    PluralName = "C1AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildC1C1C1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C1many2one = new RelationType(objectTypes.C1, new System.Guid("2cd8b843-f1f5-413d-9d6d-0d2b9b3c5cf6"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1C1many2one",
                    PluralName = "C1C1many2ones",
                },
            };
        }
        private void BuildC1C1S2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S2many2one = new RelationType(objectTypes.C1, new System.Guid("2cee32ad-4e62-4112-9775-f84b0298e93a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "C1S2many2one",
                    PluralName = "C1S2many2ones",
                },
            };
        }
        private void BuildC1C1FloatBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1FloatBetweenA = new RelationType(objectTypes.C1, new System.Guid("2fa10f1e-d7f6-4f75-92a8-15d7b02b8c19"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C1FloatBetweenA",
                    PluralName = "C1FloatBetweenAs",
                },
            };
        }
        private void BuildC1Many2One(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1Many2One = new RelationType(objectTypes.C1, new System.Guid("2fc66f19-7fd4-4dc1-95ef-7931864ad083"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "Many2One",
                    PluralName = "Many2Ones",
                },
            };
        }
        private void BuildC1C1C1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C1many2many = new RelationType(objectTypes.C1, new System.Guid("2ff1c9ba-0017-466e-9f11-776086e6d0b0"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1C1many2many",
                    PluralName = "C1C1many2manies",
                },
            };
        }
        private void BuildC1C1S1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S1many2many = new RelationType(objectTypes.C1, new System.Guid("3673e4f6-8b40-44e7-be25-d73907b5806a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "C1S1many2many",
                    PluralName = "C1S1many2manies",
                },
            };
        }
        private void BuildC1C1FloatBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1FloatBetweenB = new RelationType(objectTypes.C1, new System.Guid("392e8c95-bbfc-4d24-b751-36c17a7b0ee6"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C1FloatBetweenB",
                    PluralName = "C1FloatBetweenBs",
                },
            };
        }
        private void BuildC1C1I1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I1one2one = new RelationType(objectTypes.C1, new System.Guid("3fea182f-07b0-4c36-8170-960b484801f6"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "C1I1one2one",
                    PluralName = "C1I1one2ones",
                },
            };
        }
        private void BuildC1C1IntegerLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1IntegerLessThan = new RelationType(objectTypes.C1, new System.Guid("49970761-ebe1-4623-a822-5ee1d1f3fafc"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C1IntegerLessThan",
                    PluralName = "C1IntegerLessThans",
                },
            };
        }
        private void BuildC1C1StringLarge(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1StringLarge = new RelationType(objectTypes.C1, new System.Guid("4b970db5-d0ec-4765-9f9b-6e9aafc9dbcc"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C1StringLarge",
                    PluralName = "C1StringLarges",
		            Size = 100000,
                },
            };
        }
        private void BuildC1C1I2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I2one2many = new RelationType(objectTypes.C1, new System.Guid("4c0362ad-4d0e-4e57-a057-1852ddd8eed8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "C1I2one2many",
                    PluralName = "C1I2one2manies",
                },
            };
        }
        private void BuildC1C1C1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C1one2one = new RelationType(objectTypes.C1, new System.Guid("4c776502-77d7-45d9-b101-62dee27c0c2e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1C1one2one",
                    PluralName = "C1C1one2ones",
                },
            };
        }
        private void BuildC1C1FloatGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1FloatGreaterThan = new RelationType(objectTypes.C1, new System.Guid("4c95279f-fb68-49d1-b9c2-27c612c4c28e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C1FloatGreaterThan",
                    PluralName = "C1FloatGreaterThans",
                },
            };
        }
        private void BuildC1C1I2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I2many2one = new RelationType(objectTypes.C1, new System.Guid("4dab4e16-b8a2-46c1-949d-62aead9a9c9f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "C1I2many2one",
                    PluralName = "C1I2many2ones",
                },
            };
        }
        private void BuildC1C1I12many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I12many2one = new RelationType(objectTypes.C1, new System.Guid("599420c6-0757-49f6-8ae7-4cb0714ca791"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "C1I12many2one",
                    PluralName = "C1I12many2ones",
                },
            };
        }
        private void BuildC1C1DateTimeLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DateTimeLessThan = new RelationType(objectTypes.C1, new System.Guid("6459deba-24e6-4867-a555-75f672f33893"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C1DateTimeLessThan",
                    PluralName = "C1DateTimeLessThans",
                },
            };
        }
        private void BuildC1IndexedMaxBinary(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1IndexedMaxBinary = new RelationType(objectTypes.C1, new System.Guid("65cff232-60fb-4ed9-9f36-2aebbdc3fc79"))
            {
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.Binary,
                    SingularName = "IndexedMaxBinary",
                    PluralName = "IndexedMaxBinaries",
		            Size = -1,
                },
            };
        }
        private void BuildC1IndexedMaxString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1IndexedMaxString = new RelationType(objectTypes.C1, new System.Guid("68fa3256-c5ba-42bb-b424-9349f1c6efa3"))
            {
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "IndexedMaxString",
                    PluralName = "IndexedMaxStrings",
		            Size = -1,
                },
            };
        }
        private void BuildC1C1DateTimeBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DateTimeBetweenA = new RelationType(objectTypes.C1, new System.Guid("6aadb05d-6b80-47c5-b625-18b86e762c94"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C1DateTimeBetweenA",
                    PluralName = "C1DateTimeBetweenAs",
                },
            };
        }
        private void BuildC1C1C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C2many2many = new RelationType(objectTypes.C1, new System.Guid("71abe169-dea4-4834-8d37-34cbcffa6cee"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C1C2many2many",
                    PluralName = "C1C2many2manies",
                },
            };
        }
        private void BuildC1C1S1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S1many2one = new RelationType(objectTypes.C1, new System.Guid("724f101c-db45-44f3-b9ca-c8f3b0c28d29"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "C1S1many2one",
                    PluralName = "C1S1many2ones",
                },
            };
        }
        private void BuildC1C1I1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I1many2many = new RelationType(objectTypes.C1, new System.Guid("79fbfbc3-50e3-4e45-a5bf-8a253bb6f0c6"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "C1I1many2many",
                    PluralName = "C1I1many2manies",
                },
            };
        }
        private void BuildC1C1FloatLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1FloatLessThan = new RelationType(objectTypes.C1, new System.Guid("7b058b52-dc6b-4f8c-af72-28c9b0c0fde4"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C1FloatLessThan",
                    PluralName = "C1FloatLessThans",
                },
            };
        }
        private void BuildC1C1I1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I1many2one = new RelationType(objectTypes.C1, new System.Guid("7fce490e-78af-46a9-a87d-de233073ab3c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "C1I1many2one",
                    PluralName = "C1I1many2ones",
                },
            };
        }
        private void BuildC1C1DecimalGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DecimalGreaterThan = new RelationType(objectTypes.C1, new System.Guid("8679b3aa-cdad-4ee1-b4fb-edcefd660edb"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C1DecimalGreaterThan",
                    PluralName = "C1DecimalGreaterThans",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildC1C1AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsDecimal = new RelationType(objectTypes.C1, new System.Guid("87eb0d19-73a7-4aae-aeed-66dc9163233c"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C1AllorsDecimal",
                    PluralName = "C1AllorsDecimals",
		        Precision = 10,
		        Scale = 2,
                },
            };
        }
        private void BuildC1C1S2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S2one2one = new RelationType(objectTypes.C1, new System.Guid("92cbd254-9763-41e1-9c73-4a378aab4b8e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "C1S2one2one",
                    PluralName = "C1S2one2ones",
                },
            };
        }
        private void BuildC1C1DateTimeBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DateTimeBetweenB = new RelationType(objectTypes.C1, new System.Guid("934421bd-6cac-4e99-9457-43117a9f3c52"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C1DateTimeBetweenB",
                    PluralName = "C1DateTimeBetweenBs",
                },
            };
        }
        private void BuildC1C1AllorsBinary(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsBinary = new RelationType(objectTypes.C1, new System.Guid("97f31053-0e7b-42a0-90c2-ce6f09c56e86"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Binary,
                    SingularName = "C1AllorsBinary",
                    PluralName = "C1AllorsBinaries",
		            Size = -1,
                },
            };
        }
        private void BuildC1C1DateTimeGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DateTimeGreaterThan = new RelationType(objectTypes.C1, new System.Guid("9d8c9863-dd8d-4c85-a5e6-58042ff3619d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C1DateTimeGreaterThan",
                    PluralName = "C1DateTimeGreaterThans",
                },
            };
        }
        private void BuildC1C1S1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S1one2one = new RelationType(objectTypes.C1, new System.Guid("9df07ff8-7a29-4d41-a08e-d46efdd15e32"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "C1S1one2one",
                    PluralName = "C1S1one2ones",
                },
            };
        }
        private void BuildC1C1C1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C1one2many = new RelationType(objectTypes.C1, new System.Guid("ab6d11cc-ec86-4828-8875-2e9a779ba627"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1C1one2many",
                    PluralName = "C1C1one2manies",
                },
            };
        }
        private void BuildC1C1I1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I1one2many = new RelationType(objectTypes.C1, new System.Guid("ac0cfbe2-a2ff-4781-83aa-5d4e459d939f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "C1I1one2many",
                    PluralName = "C1I1one2manies",
                },
            };
        }
        private void BuildC1C1C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C2many2one = new RelationType(objectTypes.C1, new System.Guid("ac2096a9-b58b-41d3-a1d3-920f0b41cb2f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C1C2many2one",
                    PluralName = "C1C2many2ones",
                },
            };
        }
        private void BuildC1C1I12one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I12one2many = new RelationType(objectTypes.C1, new System.Guid("ad1b1fb1-b30c-431f-b975-5505f6311a18"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "C1I12one2many",
                    PluralName = "C1I12one2manies",
                },
            };
        }
        private void BuildC1C1S2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S2many2many = new RelationType(objectTypes.C1, new System.Guid("b2071550-cc1b-4543-b98f-006e7564a74b"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "C1S2many2many",
                    PluralName = "C1S2many2manies",
                },
            };
        }
        private void BuildC1C1C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C2one2one = new RelationType(objectTypes.C1, new System.Guid("b4e3d3d1-65b2-4803-954f-1e09f39e5594"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C1C2one2one",
                    PluralName = "C1C2one2ones",
                },
            };
        }
        private void BuildC1C1AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsBoolean = new RelationType(objectTypes.C1, new System.Guid("b4ee673f-bba0-4e24-9cda-3cf993c79a0a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "C1AllorsBoolean",
                    PluralName = "C1AllorsBooleans",
                },
            };
        }
        private void BuildC1C1I12many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I12many2many = new RelationType(objectTypes.C1, new System.Guid("c58903fb-443b-4de9-b010-15f3f09ff5df"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "C1I12many2many",
                    PluralName = "C1I12many2manies",
                },
            };
        }
        private void BuildC1C1I2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1I2many2many = new RelationType(objectTypes.C1, new System.Guid("c92fbc53-ae5e-450e-9681-ca17833e6e2f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "C1I2many2many",
                    PluralName = "C1I2many2manies",
                },
            };
        }
        private void BuildC1C1AllorsUnique(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsUnique = new RelationType(objectTypes.C1, new System.Guid("cef13620-b7d7-4bfe-8d3b-c0f826da5989"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Unique,
                    SingularName = "C1AllorsUnique",
                    PluralName = "C1AllorsUniques",
                },
            };
        }
        private void BuildC1C1C3one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C3one2one = new RelationType(objectTypes.C1, new System.Guid("d3f73a6d-8f95-44c6-bbc8-ddc468b803f7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C1C3one2one",
                    PluralName = "C1C3one2ones",
                },
            };
        }
        private void BuildC1C1C3many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C3many2many = new RelationType(objectTypes.C1, new System.Guid("da4d6a24-6b0f-4841-b355-80ee1ba10c59"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C1C3many2many",
                    PluralName = "C1C3many2manies",
                },
            };
        }
        private void BuildC1C1StringEquals(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1StringEquals = new RelationType(objectTypes.C1, new System.Guid("dc55a574-5546-4a68-b886-706c39bc4e80"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C1StringEquals",
                    PluralName = "C1StringEquals",
		            Size = 256,
                },
            };
        }
        private void BuildC1C1IntegerGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1IntegerGreaterThan = new RelationType(objectTypes.C1, new System.Guid("e2153298-73b0-4f5f-bba0-00c832b044b3"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C1IntegerGreaterThan",
                    PluralName = "C1IntegerGreaterThans",
                },
            };
        }
        private void BuildC1C3may2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C3may2one = new RelationType(objectTypes.C1, new System.Guid("e3af3413-4631-4052-ac57-955651a319fc"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C3may2one",
                    PluralName = "C3may2ones",
                },
            };
        }
        private void BuildC1C1IntegerBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1IntegerBetweenB = new RelationType(objectTypes.C1, new System.Guid("e3dedb1d-6738-46f7-8a25-77213c90a8f9"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C1IntegerBetweenB",
                    PluralName = "C1IntegerBetweenBs",
                },
            };
        }
        private void BuildC1C1AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsDateTime = new RelationType(objectTypes.C1, new System.Guid("ef75cc4e-8787-4f1c-ae5c-73577d721467"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C1AllorsDateTime",
                    PluralName = "C1AllorsDateTimes",
                },
            };
        }
        private void BuildC1C1IntegerBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1IntegerBetweenA = new RelationType(objectTypes.C1, new System.Guid("ef909fec-7a03-4a3c-a3f4-6097a51ff1f0"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C1IntegerBetweenA",
                    PluralName = "C1IntegerBetweenAs",
                },
            };
        }
        private void BuildC1C1AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsDouble = new RelationType(objectTypes.C1, new System.Guid("f268783d-42ed-41c1-b0b0-b8a60e30a601"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C1AllorsDouble",
                    PluralName = "C1AllorsDoubles",
                },
            };
        }
        private void BuildC1C1C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C2one2many = new RelationType(objectTypes.C1, new System.Guid("f39739d2-e8fc-406e-be6a-c92acee07686"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C1C2one2many",
                    PluralName = "C1C2one2manies",
                },
            };
        }
        private void BuildC1C1S2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1S2one2many = new RelationType(objectTypes.C1, new System.Guid("f47b9392-1391-416e-9a49-23ab0627133e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "C1S2one2many",
                    PluralName = "C1S2one2manies",
                },
            };
        }
        private void BuildC1C1AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1AllorsInteger = new RelationType(objectTypes.C1, new System.Guid("f4920d94-8cd0-45b6-be00-f18d377368fd"))
            {
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C1AllorsInteger",
                    PluralName = "C1AllorsIntegers",
                },
            };
        }
        private void BuildC1C1DecimalLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1DecimalLessThan = new RelationType(objectTypes.C1, new System.Guid("fc56ca04-9737-4b51-939e-4854e5507953"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C1DecimalLessThan",
                    PluralName = "C1DecimalLessThans",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildC1C1C3one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C1C1C3one2many = new RelationType(objectTypes.C1, new System.Guid("fee2d1a8-bb65-4bfe-b25f-407c629dec18"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C1C3one2many",
                    PluralName = "C1C3one2manies",
                },
            };
        }
        private void BuildC2C2AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsDecimal = new RelationType(objectTypes.C2, new System.Guid("07eaa992-322a-40e9-bf2c-aa33b69f54cd"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "C2AllorsDecimal",
                    PluralName = "C2AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildC2C1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C1many2many = new RelationType(objectTypes.C2, new System.Guid("0947eb06-5511-475f-8d68-06cfb812678e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1many2many",
                    PluralName = "C1many2manies",
                },
            };
        }
        private void BuildC2C2C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2C2many2one = new RelationType(objectTypes.C2, new System.Guid("0ecc2d3b-f813-44db-b349-3e67d7e0b2d7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C2C2many2one",
                    PluralName = "C2C2many2ones",
                },
            };
        }
        private void BuildC2C2AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsDouble = new RelationType(objectTypes.C2, new System.Guid("262ad367-a52c-4d8b-94e2-b477bb098423"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "C2AllorsDouble",
                    PluralName = "C2AllorsDoubles",
                },
            };
        }
        private void BuildC2C2AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsInteger = new RelationType(objectTypes.C2, new System.Guid("42f9f4b6-3b35-4168-93cb-35171dbf83f4"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "C2AllorsInteger",
                    PluralName = "C2AllorsIntegers",
                },
            };
        }
        private void BuildC2C2C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2C2many2many = new RelationType(objectTypes.C2, new System.Guid("49d04b6f-6393-49f6-bb6b-2dd634d6b9ee"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C2C2many2many",
                    PluralName = "C2C2many2manies",
                },
            };
        }
        private void BuildC2C2AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsBoolean = new RelationType(objectTypes.C2, new System.Guid("61daaaae-dd22-405e-aa98-6321d2f8af04"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "C2AllorsBoolean",
                    PluralName = "C2AllorsBooleans",
                },
            };
        }
        private void BuildC2C1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C1many2one = new RelationType(objectTypes.C2, new System.Guid("7ee9d97c-8ae3-438c-adfd-6a35b3ff645b"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1many2one",
                    PluralName = "C1many2ones",
                },
            };
        }
        private void BuildC2C1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C1one2one = new RelationType(objectTypes.C2, new System.Guid("9540e8d3-9fe3-4aea-9918-fc31210f2622"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1one2one",
                    PluralName = "C1one2ones",
                },
            };
        }
        private void BuildC2C2AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsString = new RelationType(objectTypes.C2, new System.Guid("9c7cde3f-9b61-4c79-a5d7-afe1067262ce"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C2AllorsString",
                    PluralName = "C2AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildC2C2C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2C2one2one = new RelationType(objectTypes.C2, new System.Guid("9e9d1c6a-f647-4922-b5f4-874b8b6c1907"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C2C2one2one",
                    PluralName = "C2C2one2ones",
                },
            };
        }
        private void BuildC2C2C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2C2one2many = new RelationType(objectTypes.C2, new System.Guid("a95948a7-3f12-4b85-8823-82dea87740c0"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C2C2one2many",
                    PluralName = "C2C2one2manies",
                },
            };
        }
        private void BuildC2C2AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C2AllorsDateTime = new RelationType(objectTypes.C2, new System.Guid("ce23482d-3a22-4202-98e7-5934fd9abd2d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "C2AllorsDateTime",
                    PluralName = "C2AllorsDateTimes",
                },
            };
        }
        private void BuildC2C1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C1one2many = new RelationType(objectTypes.C2, new System.Guid("d82be8f5-673a-466b-8abb-077be0bc6eb5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1one2many",
                    PluralName = "C1one2manies",
                },
            };
        }
        private void BuildC2C3Many2Many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C3Many2Many = new RelationType(objectTypes.C2, new System.Guid("d92643c0-854c-40f8-92c8-93a0245e33c2"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C3Many2Many",
                    PluralName = "C3Many2Manies",
                },
            };
        }
        private void BuildC2C3Many2One(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C2C3Many2One = new RelationType(objectTypes.C2, new System.Guid("f3482f88-4408-4e2e-b179-7f757bf0eb3d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C3Many2One",
                    PluralName = "C3Many2Ones",
                },
            };
        }
        private void BuildC3C3AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3AllorsString = new RelationType(objectTypes.C3, new System.Guid("02a07b71-a40d-4600-ae12-370be7e973f5"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C3AllorsString",
                    PluralName = "C3AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildC3C3C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C2many2many = new RelationType(objectTypes.C3, new System.Guid("0e06c403-2a29-4f40-b7b6-3e4fed28aeba"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C3C2many2many",
                    PluralName = "C3C2many2manies",
                },
            };
        }
        private void BuildC3C3I4one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3I4one2one = new RelationType(objectTypes.C3, new System.Guid("29e76785-f3eb-48b9-a9bf-c44e64762631"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "C3I4one2one",
                    PluralName = "C3I4one2ones",
                },
            };
        }
        private void BuildC3C3C4many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C4many2one = new RelationType(objectTypes.C3, new System.Guid("39313684-8ea1-4f15-aada-2a16feb148ea"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "C3C4many2one",
                    PluralName = "C3C4many2ones",
                },
            };
        }
        private void BuildC3C3C4many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C4many2many = new RelationType(objectTypes.C3, new System.Guid("5e6c2802-3dc5-405a-a2f7-03c9361d4562"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "C3C4many2many",
                    PluralName = "C3C4many2manies",
                },
            };
        }
        private void BuildC3C3I4many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3I4many2many = new RelationType(objectTypes.C3, new System.Guid("8f2225b7-8c15-414a-a9be-50c757f80b3e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "C3I4many2many",
                    PluralName = "C3I4many2manies",
                },
            };
        }
        private void BuildC3C3C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C2one2many = new RelationType(objectTypes.C3, new System.Guid("92505f70-3611-4ed6-bd27-71030299e176"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C3C2one2many",
                    PluralName = "C3C2one2manies",
                },
            };
        }
        private void BuildC3C3C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C2many2one = new RelationType(objectTypes.C3, new System.Guid("958bc7c6-d609-4407-ba92-50726c9af5d5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C3C2many2one",
                    PluralName = "C3C2many2ones",
                },
            };
        }
        private void BuildC3C3I4many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3I4many2one = new RelationType(objectTypes.C3, new System.Guid("b7745909-a63a-448a-b4bd-6caf614c4b12"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "C3I4many2one",
                    PluralName = "C3I4many2ones",
                },
            };
        }
        private void BuildC3C3C4one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C4one2many = new RelationType(objectTypes.C3, new System.Guid("d1601926-ae62-4592-b15b-6511e0d98355"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "C3C4one2many",
                    PluralName = "C3C4one2manies",
                },
            };
        }
        private void BuildC3C3C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C2one2one = new RelationType(objectTypes.C3, new System.Guid("d81da318-f954-42b4-b605-e011a92726ba"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "C3C2one2one",
                    PluralName = "C3C2one2ones",
                },
            };
        }
        private void BuildC3C3C4one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3C4one2one = new RelationType(objectTypes.C3, new System.Guid("da44bf79-b72e-4565-bd33-0eb278a6f4ec"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "C3C4one2one",
                    PluralName = "C3C4one2ones",
                },
            };
        }
        private void BuildC3C3StringEquals(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3StringEquals = new RelationType(objectTypes.C3, new System.Guid("dd006700-a00c-4c67-819e-1d63df26a5b6"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C3StringEquals",
                    PluralName = "C3StringEquals",
		            Size = 256,
                },
            };
        }
        private void BuildC3C3I4one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C3C3I4one2many = new RelationType(objectTypes.C3, new System.Guid("ed3267fb-fbc4-4e38-87f5-8e2ee91b1bac"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "C3I4one2many",
                    PluralName = "C3I4one2manies",
                },
            };
        }
        private void BuildC4C4AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.C4C4AllorsString = new RelationType(objectTypes.C4, new System.Guid("9f24fc51-8568-4ffc-b47a-c5c317d00954"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "C4AllorsString",
                    PluralName = "C4AllorsStrings",
		            Size = 256,
                },
            };
        }


        private void BuildCompanyManager(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyManager = new RelationType(objectTypes.Company, new System.Guid("08ab248d-bdb1-49c5-a2da-d6485f49239f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "Manager",
                    PluralName = "Managers",
                },
            };
        }
        private void BuildCompanyEmployee(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyEmployee = new RelationType(objectTypes.Company, new System.Guid("1a4087de-f116-4f79-9441-31faee8054f3"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "Employee",
                    PluralName = "Employees",
                },
            };
        }
        private void BuildCompanyFirstPerson(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyFirstPerson = new RelationType(objectTypes.Company, new System.Guid("28021756-f15f-4671-aa01-a40d3707d61a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "FirstPerson",
                    PluralName = "FirstPeople",
                },
            };
        }
        private void BuildCompanyNamedsOneSort2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyNamedsOneSort2 = new RelationType(objectTypes.Company, new System.Guid("2f9fc05e-c904-4056-83f0-a7081762594a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Named,
                    SingularName = "NamedsOneSort2",
                    PluralName = "NamedsOneSort2",
                },
            };
        }
        private void BuildCompanyOwner(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyOwner = new RelationType(objectTypes.Company, new System.Guid("44abca14-9fb2-42a7-b8ab-a1ca87d87b2e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "Owner",
                    PluralName = "Owners",
                },
            };
        }
        private void BuildCompanyIndexedMany2ManyPerson(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyIndexedMany2ManyPerson = new RelationType(objectTypes.Company, new System.Guid("509c5341-3d87-4da4-a807-5567d897169b"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "IndexedMany2ManyPerson",
                    PluralName = "IndexedMany2ManyPersons",
                },
            };
        }
        private void BuildCompanyPersonsOneSort1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyPersonsOneSort1 = new RelationType(objectTypes.Company, new System.Guid("62b4ddac-efd7-4fc9-bbed-91c831a62f01"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "PersonsOneSort1",
                    PluralName = "PersonsOneSort1",
                },
            };
        }
        private void BuildCompanyPersonsManySort1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyPersonsManySort1 = new RelationType(objectTypes.Company, new System.Guid("64c1be0a-0636-4da0-8404-2a93ab600cd9"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "PersonsManySort1",
                    PluralName = "PersonsManySort1",
                },
            };
        }
        private void BuildCompanyNamedsManySort1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyNamedsManySort1 = new RelationType(objectTypes.Company, new System.Guid("996d27ff-3615-4a51-9214-944fac566a11"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Named,
                    SingularName = "NamedsManySort1",
                    PluralName = "NamedsManySort1",
                },
            };
        }
        private void BuildCompanyPersonsManySort2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyPersonsManySort2 = new RelationType(objectTypes.Company, new System.Guid("a9f60154-6bd1-4c76-94eb-edfd5beb6749"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "PersonsManySort2",
                    PluralName = "PersonsManySort2",
                },
            };
        }
        private void BuildCompanyPersonsOneSort2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyPersonsOneSort2 = new RelationType(objectTypes.Company, new System.Guid("bdf71d38-8082-4a99-9636-4f4ec26fd45c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "PersonsOneSort2",
                    PluralName = "PersonsOneSort2",
                },
            };
        }
        private void BuildCompanyNamedManySort2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyNamedManySort2 = new RelationType(objectTypes.Company, new System.Guid("c1f68661-4999-4851-9224-1878258b6a58"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.Named,
                    SingularName = "NamedManySort2",
                    PluralName = "NamedManySort2s",
                },
            };
        }
        private void BuildCompanyMany2ManyPerson(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyMany2ManyPerson = new RelationType(objectTypes.Company, new System.Guid("c53bdaea-c0a5-4179-bfbb-e12de45e2ae0"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "Many2ManyPerson",
                    PluralName = "Many2ManyPersons",
                },
            };
        }
        private void BuildCompanyChild(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyChild = new RelationType(objectTypes.Company, new System.Guid("cde0a8e7-1a14-4f1a-a0ca-a305f0548df8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Company,
                    SingularName = "Child",
                    PluralName = "Children",
                },
            };
        }
        private void BuildCompanyNamedsOneSort1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.CompanyNamedsOneSort1 = new RelationType(objectTypes.Company, new System.Guid("cdf04399-aa37-4ea2-9ac8-bf6d19884933"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Named,
                    SingularName = "NamedsOneSort1",
                    PluralName = "NamedsOneSort1",
                },
            };
        }




        private void BuildPersonNextPerson(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.PersonNextPerson = new RelationType(objectTypes.Person, new System.Guid("25ff791d-9547-41ba-ac34-f2fe501ef217"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.Person,
                    SingularName = "NextPerson",
                    PluralName = "NextPeople",
                },
            };
        }
        private void BuildPersonCompany(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.PersonCompany = new RelationType(objectTypes.Person, new System.Guid("6cc83cb8-cb94-4716-bb7d-e25201f06b20"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.Company,
                    SingularName = "Company",
                    PluralName = "Companies",
                },
            };
        }
        private void BuildSandboxInvisibleMany(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxInvisibleMany = new RelationType(objectTypes.Sandbox, new System.Guid("0e0ee030-8fb5-42fb-82b5-5daade2aca9d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.Sandbox,
                    SingularName = "InvisibleMany",
                    PluralName = "InvisibleManies",
                },
            };
        }
        private void BuildSandboxInvisibleOne(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxInvisibleOne = new RelationType(objectTypes.Sandbox, new System.Guid("122b0376-8d1a-4d46-b8a0-9f4ea94c9e96"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.Sandbox,
                    SingularName = "InvisibleOne",
                    PluralName = "InvisibleOnes",
                },
            };
        }
        private void BuildSandboxInvisibleValue(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxInvisibleValue = new RelationType(objectTypes.Sandbox, new System.Guid("5eec5096-d8ba-424e-988f-b50828fc7b51"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "InvisibleValue",
                    PluralName = "InvisibleValues",
		            Size = 256,
                },
            };
        }
        private void BuildSandboxTest(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxTest = new RelationType(objectTypes.Sandbox, new System.Guid("856a0161-2a46-428a-bae5-95d6a86a89e8"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "Test",
                    PluralName = "Tests",
		            Size = 256,
                },
            };
        }
        private void BuildSandboxAllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxAllorsInteger = new RelationType(objectTypes.Sandbox, new System.Guid("a0dac9fc-2d19-429b-a522-46425a01ab78"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "AllorsInteger",
                    PluralName = "AllorsIntegers",
                },
            };
        }
        private void BuildSandboxAllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SandboxAllorsString = new RelationType(objectTypes.Sandbox, new System.Guid("c82d1693-7b88-4fab-8389-a43185c832ed"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString",
                    PluralName = "AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildSingleUnitAllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.SingleUnitAllorsInteger = new RelationType(objectTypes.SingleUnit, new System.Guid("acf7d284-2480-4a09-a13b-ba4ba96e0892"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "AllorsInteger",
                    PluralName = "AllorsIntegers",
                },
            };
        }
        private void BuildUserSelect(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.UserSelect = new RelationType(objectTypes.User, new System.Guid("1ffa3cb7-41f0-406a-a3a5-2f3a4c5ad59c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.User,
                    SingularName = "Select",
                    PluralName = "Selects",
                },
            };
        }
        private void BuildUserFrom(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.UserFrom = new RelationType(objectTypes.User, new System.Guid("bc6b71a8-2a66-4b57-9c86-ecf521b973ba"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "From",
                    PluralName = "Froms",
		            Size = 256,
                },
            };
        }
        private void BuildI1I1I34one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I34one2many = new RelationType(objectTypes.I1, new System.Guid("00a70a04-4fc8-4585-83ce-0f7f0e0db7ab"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I1I34one2many",
                    PluralName = "I1I34one2manies",
                },
            };
        }
        private void BuildI1I1I2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I2one2many = new RelationType(objectTypes.I1, new System.Guid("036e3008-07f8-4a15-bca2-eb21837778a0"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "I1I2one2many",
                    PluralName = "I1I2one2manies",
                },
            };
        }
        private void BuildI1I1I2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I2many2one = new RelationType(objectTypes.I1, new System.Guid("0b0f8c40-266c-424a-8276-0e8e2673d1a7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "I1I2many2one",
                    PluralName = "I1I2many2ones",
                },
            };
        }
        private void BuildI1I1C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C2many2one = new RelationType(objectTypes.I1, new System.Guid("0d63e4c7-28de-4d47-8f23-7ee1d3606751"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I1C2many2one",
                    PluralName = "I1C2many2ones",
                },
            };
        }
        private void BuildI1I1C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C2one2one = new RelationType(objectTypes.I1, new System.Guid("14a93943-13f6-481d-98c7-19fb55625af9"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I1C2one2one",
                    PluralName = "I1C2one2ones",
                },
            };
        }
        private void BuildI1I1DecimalBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DecimalBetweenA = new RelationType(objectTypes.I1, new System.Guid("19e09e31-31ac-44cc-ad1e-a015f4747aeb"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I1DecimalBetweenA",
                    PluralName = "I1DecimalBetweenAs",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI1I1S1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S1one2one = new RelationType(objectTypes.I1, new System.Guid("1d41941b-3b1d-48d7-bc6f-e8811cbd96e4"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "I1S1one2one",
                    PluralName = "I1S1one2ones",
                },
            };
        }
        private void BuildI1I1I12many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I12many2one = new RelationType(objectTypes.I1, new System.Guid("28b92468-27e5-4471-b3a5-37b8ec4f794e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "I1I12many2one",
                    PluralName = "I1I12many2ones",
                },
            };
        }
        private void BuildI1I1AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsString = new RelationType(objectTypes.I1, new System.Guid("28ceffc2-c776-4a0a-9825-a6d1bcb265dc"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I1AllorsString",
                    PluralName = "I1AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildI1I1DateTimeLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DateTimeLessThan = new RelationType(objectTypes.I1, new System.Guid("29244f33-6d79-44aa-9ed2-8cc01b5070b7"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I1DateTimeLessThan",
                    PluralName = "I1DateTimeLessThans",
                },
            };
        }
        private void BuildI1I1C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C2one2many = new RelationType(objectTypes.I1, new System.Guid("2cd562b6-7f54-49af-b853-2244f10ec60e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I1C2one2many",
                    PluralName = "I1C2one2manies",
                },
            };
        }
        private void BuildI1I1StringLarge(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1StringLarge = new RelationType(objectTypes.I1, new System.Guid("2e98ec7e-486f-4b96-ac15-5149fe6c4e0e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I1StringLarge",
                    PluralName = "I1StringLarges",
		            Size = 100000,
                },
            };
        }
        private void BuildI1I1FloatLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1FloatLessThan = new RelationType(objectTypes.I1, new System.Guid("2f739fa2-c169-4721-8d2d-79f27a6e57c6"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I1FloatLessThan",
                    PluralName = "I1FloatLessThans",
                },
            };
        }
        private void BuildI1I1AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsDateTime = new RelationType(objectTypes.I1, new System.Guid("32fc21cc-4be7-4a0e-ac71-df135be95e68"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I1AllorsDateTime",
                    PluralName = "I1AllorsDateTimes",
                },
            };
        }
        private void BuildI1I1C1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C1many2one = new RelationType(objectTypes.I1, new System.Guid("33f13167-3a14-4b06-a1d8-87076918b285"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "I1C1many2one",
                    PluralName = "I1C1many2ones",
                },
            };
        }
        private void BuildI1I1I12one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I12one2one = new RelationType(objectTypes.I1, new System.Guid("381c61c1-312d-47ea-8314-8ac051378a81"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
		        IsIndexed = true,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "I1I12one2one",
                    PluralName = "I1I12one2ones",
                },
            };
        }
        private void BuildI1I1DecimalGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DecimalGreaterThan = new RelationType(objectTypes.I1, new System.Guid("39f1c13c-7d77-429f-ac9b-1491e949aa3a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I1DecimalGreaterThan",
                    PluralName = "I1DecimalGreaterThans",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI1I1C1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C1one2one = new RelationType(objectTypes.I1, new System.Guid("4401d0b8-2450-45a8-92d2-ff3961e129b2"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "I1C1one2one",
                    PluralName = "I1C1one2ones",
                },
            };
        }
        private void BuildI1I1I2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I2many2many = new RelationType(objectTypes.I1, new System.Guid("4a30d40e-ade3-4304-b17b-185abc8b7fde"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "I1I2many2many",
                    PluralName = "I1I2many2manies",
                },
            };
        }
        private void BuildI1I1IntegerBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1IntegerBetweenA = new RelationType(objectTypes.I1, new System.Guid("518da995-1f6b-4632-94f1-11cea5e72717"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I1IntegerBetweenA",
                    PluralName = "I1IntegerBetweenAs",
                },
            };
        }
        private void BuildI1I1I34many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I34many2one = new RelationType(objectTypes.I1, new System.Guid("528ece9c-81f2-4ea4-8d42-50d9a3fe1eea"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I1I34many2one",
                    PluralName = "I1I34many2ones",
                },
            };
        }
        private void BuildI1I1FloatBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1FloatBetweenA = new RelationType(objectTypes.I1, new System.Guid("58d75a73-61d3-4ad7-bd1a-b3e673d8ee31"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I1FloatBetweenA",
                    PluralName = "I1FloatBetweenAs",
                },
            };
        }
        private void BuildI1I1IntegerLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1IntegerLessThan = new RelationType(objectTypes.I1, new System.Guid("5901c4d4-420f-47a3-87e3-ac04b4601efc"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I1IntegerLessThan",
                    PluralName = "I1IntegerLessThans",
                },
            };
        }
        private void BuildI1I1AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsInteger = new RelationType(objectTypes.I1, new System.Guid("5cb44331-fd8c-4f73-8994-161f702849b6"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I1AllorsInteger",
                    PluralName = "I1AllorsIntegers",
                },
            };
        }
        private void BuildI1I1S2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S2one2one = new RelationType(objectTypes.I1, new System.Guid("68549750-b8f9-4a29-a078-803e7348e142"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "I1S2one2one",
                    PluralName = "I1S2one2ones",
                },
            };
        }
        private void BuildI1I1AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsBoolean = new RelationType(objectTypes.I1, new System.Guid("6c3d04be-6f95-44b8-863a-245e150e3110"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "I1AllorsBoolean",
                    PluralName = "I1AllorsBooleans",
                },
            };
        }
        private void BuildI1I1I1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I1many2one = new RelationType(objectTypes.I1, new System.Guid("6e7c286c-42e0-45d7-8ad8-ac0ed91dbbb5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "I1I1many2one",
                    PluralName = "I1I1many2ones",
                },
            };
        }
        private void BuildI1I1C1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C1many2many = new RelationType(objectTypes.I1, new System.Guid("7014e84c-62c4-48ba-b4ec-ab52a897f443"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "I1C1many2many",
                    PluralName = "I1C1many2manies",
                },
            };
        }
        private void BuildI1I1I2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I2one2one = new RelationType(objectTypes.I1, new System.Guid("70312f37-52e9-4cf6-9dd6-b357628ea3ed"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I2,
                    SingularName = "I1I2one2one",
                    PluralName = "I1I2one2ones",
                },
            };
        }
        private void BuildI1I1AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsDecimal = new RelationType(objectTypes.I1, new System.Guid("818b4013-5ef1-4455-9f0d-9a39fa3425bb"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I1AllorsDecimal",
                    PluralName = "I1AllorsDecimals",
		        Precision = 10,
		        Scale = 2,
                },
            };
        }
        private void BuildI1I1S1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S1many2many = new RelationType(objectTypes.I1, new System.Guid("82a81e9e-7a13-43d3-bb8f-227edfe26a1f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "I1S1many2many",
                    PluralName = "I1S1many2manies",
                },
            };
        }
        private void BuildI1I1DateTimeGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DateTimeGreaterThan = new RelationType(objectTypes.I1, new System.Guid("9095f55b-de23-49d7-a28e-918c22c5cfd2"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I1DateTimeGreaterThan",
                    PluralName = "I1DateTimeGreaterThans",
                },
            };
        }
        private void BuildI1I1I34many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I34many2many = new RelationType(objectTypes.I1, new System.Guid("912eeb1b-c5d6-4ea3-9e66-6d92cc455ef6"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I1I34many2many",
                    PluralName = "I1I34many2manies",
                },
            };
        }
        private void BuildI1I1I34one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I34one2one = new RelationType(objectTypes.I1, new System.Guid("9291fb85-9d1f-4c5d-96ec-797be51557ce"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I1I34one2one",
                    PluralName = "I1I34one2ones",
                },
            };
        }
        private void BuildI1I1I1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I1one2many = new RelationType(objectTypes.I1, new System.Guid("95fff847-922f-4d6f-9e98-37013bdf6b06"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "I1I1one2many",
                    PluralName = "I1I1one2manies",
                },
            };
        }
        private void BuildI1I1I1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I1many2many = new RelationType(objectTypes.I1, new System.Guid("9735d027-4249-4540-9658-f3ec06d3b868"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "I1I1many2many",
                    PluralName = "I1I1many2manies",
                },
            };
        }
        private void BuildI1I1S2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S2many2many = new RelationType(objectTypes.I1, new System.Guid("973d6e4f-57ff-454a-9621-bd5dccb65525"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "I1S2many2many",
                    PluralName = "I1S2many2manies",
                },
            };
        }
        private void BuildI1I1I12many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I12many2many = new RelationType(objectTypes.I1, new System.Guid("9b05ecb0-c3d5-4b11-98dc-653aef9f65cc"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "I1I12many2many",
                    PluralName = "I1I12many2manies",
                },
            };
        }
        private void BuildI1I1StringEquals(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1StringEquals = new RelationType(objectTypes.I1, new System.Guid("9f70c4eb-2e36-4ae1-8ed2-b3fab908e392"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I1StringEquals",
                    PluralName = "I1StringEquals",
		            Size = 256,
                },
            };
        }
        private void BuildI1I1I12one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I12one2many = new RelationType(objectTypes.I1, new System.Guid("a458ad6e-0f4a-473b-a233-04b8e7fadf62"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I12,
                    SingularName = "I1I12one2many",
                    PluralName = "I1I12one2manies",
                },
            };
        }
        private void BuildI1I1S2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S2one2many = new RelationType(objectTypes.I1, new System.Guid("a77bcd80-82df-4b76-a1bc-8e78106d7d53"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "I1S2one2many",
                    PluralName = "I1S2one2manies",
                },
            };
        }
        private void BuildI1I1C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C2many2many = new RelationType(objectTypes.I1, new System.Guid("b4f171d3-1463-41bc-8230-e53e5a717b89"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I1C2many2many",
                    PluralName = "I1C2many2manies",
                },
            };
        }
        private void BuildI1I1AllorsBinary(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsBinary = new RelationType(objectTypes.I1, new System.Guid("b9c67658-4abc-41f3-9434-c8512a482179"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Binary,
                    SingularName = "I1AllorsBinary",
                    PluralName = "I1AllorsBinaries",
		            Size = -1,
                },
            };
        }
        private void BuildI1I1DecimalBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DecimalBetweenB = new RelationType(objectTypes.I1, new System.Guid("c04d1e56-2686-495b-a02d-cda84f7cd2ff"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I1DecimalBetweenB",
                    PluralName = "I1DecimalBetweenBs",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI1I1FloatGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1FloatGreaterThan = new RelationType(objectTypes.I1, new System.Guid("c3496e43-335b-43b8-9fed-44439c9ae0d1"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I1FloatGreaterThan",
                    PluralName = "I1FloatGreaterThans",
                },
            };
        }
        private void BuildI1I1IntegerBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1IntegerBetweenB = new RelationType(objectTypes.I1, new System.Guid("c892a286-fe92-4b8b-98ba-c5e02fb96279"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I1IntegerBetweenB",
                    PluralName = "I1IntegerBetweenBs",
                },
            };
        }
        private void BuildI1I1DateTimeBetweenA(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DateTimeBetweenA = new RelationType(objectTypes.I1, new System.Guid("c95ac96b-4385-4e31-8719-f120c76ab67a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I1DateTimeBetweenA",
                    PluralName = "I1DateTimeBetweenAs",
                },
            };
        }
        private void BuildI1I1AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsDouble = new RelationType(objectTypes.I1, new System.Guid("cdb758bf-ecaf-4d99-88fb-58df9258c13c"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I1AllorsDouble",
                    PluralName = "I1AllorsDoubles",
                },
            };
        }
        private void BuildI1I1S1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S1one2many = new RelationType(objectTypes.I1, new System.Guid("d24b5b74-6ea2-4788-857c-90e0ba1433a5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "I1S1one2many",
                    PluralName = "I1S1one2manies",
                },
            };
        }
        private void BuildI1I1I1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1I1one2one = new RelationType(objectTypes.I1, new System.Guid("ddbfe021-3310-4d8e-a4ef-438306aaf191"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I1,
                    SingularName = "I1I1one2one",
                    PluralName = "I1I1one2ones",
                },
            };
        }
        private void BuildI1I1IntegerGreaterThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1IntegerGreaterThan = new RelationType(objectTypes.I1, new System.Guid("e8f1c37a-6bae-4ff5-b385-39bff287bf78"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I1IntegerGreaterThan",
                    PluralName = "I1IntegerGreaterThans",
                },
            };
        }
        private void BuildI1I1S1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S1many2one = new RelationType(objectTypes.I1, new System.Guid("ee44a1bb-a5c7-4b05-a06b-8ff9ca9d4f98"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1,
                    SingularName = "I1S1many2one",
                    PluralName = "I1S1many2ones",
                },
            };
        }
        private void BuildI1I1FloatBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1FloatBetweenB = new RelationType(objectTypes.I1, new System.Guid("eec19d8e-727c-437a-95db-b301cd1cd65a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I1FloatBetweenB",
                    PluralName = "I1FloatBetweenBs",
                },
            };
        }
        private void BuildI1I1DecimalLessThan(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DecimalLessThan = new RelationType(objectTypes.I1, new System.Guid("f1a1ef6a-8275-4b57-8cd0-8e79ee5a517d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I1DecimalLessThan",
                    PluralName = "I1DecimalLessThans",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI1I1DateTimeBetweenB(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1DateTimeBetweenB = new RelationType(objectTypes.I1, new System.Guid("f5a6b7d9-9f49-44a8-b303-1a2969195bd1"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I1DateTimeBetweenB",
                    PluralName = "I1DateTimeBetweenBs",
                },
            };
        }
        private void BuildI1I1AllorsUnique(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1AllorsUnique = new RelationType(objectTypes.I1, new System.Guid("f9d7411e-7993-4e43-a7e2-726f1e44e29c"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Unique,
                    SingularName = "I1AllorsUnique",
                    PluralName = "I1AllorsUniques",
                },
            };
        }
        private void BuildI1I1C1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1C1one2many = new RelationType(objectTypes.I1, new System.Guid("fbc1fd9f-853a-4b7d-b618-447b765b3bcb"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "I1C1one2many",
                    PluralName = "I1C1one2manies",
                },
            };
        }
        private void BuildI1I1S2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I1I1S2many2one = new RelationType(objectTypes.I1, new System.Guid("fe51c02e-ed28-4628-9da1-7bc2131c8992"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "I1S2many2one",
                    PluralName = "I1S2many2ones",
                },
            };
        }
        private void BuildI12I12AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsBoolean = new RelationType(objectTypes.I12, new System.Guid("1a0eb6ea-d877-42c9-a35a-889fb347f883"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "I12AllorsBoolean",
                    PluralName = "I12AllorsBooleans",
                },
            };
        }
        private void BuildI12I12AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsInteger = new RelationType(objectTypes.I12, new System.Guid("249ff221-9261-4219-b0a8-0dc2a8dac8db"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I12AllorsInteger",
                    PluralName = "I12AllorsIntegers",
                },
            };
        }
        private void BuildI12I12I34one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12I34one2many = new RelationType(objectTypes.I12, new System.Guid("2c05b90e-a036-450a-8b4e-ee70c8146fed"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I12I34one2many",
                    PluralName = "I12I34one2manies",
                },
            };
        }
        private void BuildI12C3many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12C3many2one = new RelationType(objectTypes.I12, new System.Guid("3327e14d-5601-4806-b6c5-b740a2c3aa38"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "C3many2one",
                    PluralName = "C3many2ones",
                },
            };
        }
        private void BuildI12I12C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C2many2one = new RelationType(objectTypes.I12, new System.Guid("3589d5bc-3338-449a-bd14-34a19d92251e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I12C2many2one",
                    PluralName = "I12C2many2ones",
                },
            };
        }
        private void BuildI12I12AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsDouble = new RelationType(objectTypes.I12, new System.Guid("4c7dd6a2-db16-4477-9b21-34dcb8f50738"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I12AllorsDouble",
                    PluralName = "I12AllorsDoubles",
                },
            };
        }
        private void BuildI12I12I34many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12I34many2one = new RelationType(objectTypes.I12, new System.Guid("61fc731f-d769-4eb9-bf87-983e73e403e4"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I12I34many2one",
                    PluralName = "I12I34many2ones",
                },
            };
        }
        private void BuildI12I12I34many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12I34many2many = new RelationType(objectTypes.I12, new System.Guid("716d13fc-f608-41a8-ac9e-824890c585b5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I12I34many2many",
                    PluralName = "I12I34many2manies",
                },
            };
        }
        private void BuildI12I12C3one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C3one2one = new RelationType(objectTypes.I12, new System.Guid("74a22498-ec2c-441b-a42c-0c248ace685d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "I12C3one2one",
                    PluralName = "I12C3one2ones",
                },
            };
        }
        private void BuildI12I12C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C2many2many = new RelationType(objectTypes.I12, new System.Guid("7f373030-657a-4c6b-a086-ac4de33e4648"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I12C2many2many",
                    PluralName = "I12C2many2manies",
                },
            };
        }
        private void BuildI12I12AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsDecimal = new RelationType(objectTypes.I12, new System.Guid("9fbca845-1f98-4ac8-8117-fa66bbe287eb"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I12AllorsDecimal",
                    PluralName = "I12AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI12I12C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C2one2one = new RelationType(objectTypes.I12, new System.Guid("afabb84c-f1b3-423b-9028-2ec5bb58e994"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I12C2one2one",
                    PluralName = "I12C2one2ones",
                },
            };
        }
        private void BuildI12I12C3one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C3one2many = new RelationType(objectTypes.I12, new System.Guid("b0fc73fb-fa74-4e8c-b9e1-17c01698f342"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "I12C3one2many",
                    PluralName = "I12C3one2manies",
                },
            };
        }
        private void BuildI12I12C3many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C3many2many = new RelationType(objectTypes.I12, new System.Guid("b889bc75-3d93-4577-a4d7-752393284220"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C3,
                    SingularName = "I12C3many2many",
                    PluralName = "I12C3many2manies",
                },
            };
        }
        private void BuildI12PrefetchTest(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12PrefetchTest = new RelationType(objectTypes.I12, new System.Guid("c2d1f044-b996-4b16-8fe3-1786f86973b1"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "PrefetchTest",
                    PluralName = "PrefetchTests",
		            Size = 256,
                },
            };
        }
        private void BuildI12I12AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsDateTime = new RelationType(objectTypes.I12, new System.Guid("c3a2e1da-307c-4fad-ab34-6e9d07eea74f"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I12AllorsDateTime",
                    PluralName = "I12AllorsDateTimes",
                },
            };
        }
        private void BuildI12I12AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12AllorsString = new RelationType(objectTypes.I12, new System.Guid("e227ff6c-a4df-49cf-a02f-04e94af6eb4b"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I12AllorsString",
                    PluralName = "I12AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildI12I12I34one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12I34one2one = new RelationType(objectTypes.I12, new System.Guid("f31ace17-76b1-46db-9fc0-099b94fbada5"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I34,
                    SingularName = "I12I34one2one",
                    PluralName = "I12I34one2ones",
                },
            };
        }
        private void BuildI12I12C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I12I12C2one2many = new RelationType(objectTypes.I12, new System.Guid("f37b107e-74e5-401f-a7e8-8ac54ceb6c73"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "I12C2one2many",
                    PluralName = "I12C2one2manies",
                },
            };
        }
        private void BuildI2I2AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsBoolean = new RelationType(objectTypes.I2, new System.Guid("35040d7c-ab7f-4a99-9d09-e01e24ca3cb9"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "I2AllorsBoolean",
                    PluralName = "I2AllorsBooleans",
                },
            };
        }
        private void BuildI2I2AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsDecimal = new RelationType(objectTypes.I2, new System.Guid("4f095abd-8803-4610-87f0-2847ddd5e9f4"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I2AllorsDecimal",
                    PluralName = "I2AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI2I2AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsDateTime = new RelationType(objectTypes.I2, new System.Guid("81d9eb2f-55a7-4d1c-853d-4369eb691ba5"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "I2AllorsDateTime",
                    PluralName = "I2AllorsDateTimes",
                },
            };
        }
        private void BuildI2I2AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsString = new RelationType(objectTypes.I2, new System.Guid("9f91841c-f63f-4ffa-bee6-62e100f3cd15"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I2AllorsString",
                    PluralName = "I2AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildI2I2AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsInteger = new RelationType(objectTypes.I2, new System.Guid("d30dd036-6d28-48df-873b-3a76da8c029e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I2AllorsInteger",
                    PluralName = "I2AllorsIntegers",
                },
            };
        }
        private void BuildI2I2AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I2I2AllorsDouble = new RelationType(objectTypes.I2, new System.Guid("fbad33e7-ede1-41fc-97e9-ddf33a0f6459"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I2AllorsDouble",
                    PluralName = "I2AllorsDoubles",
                },
            };
        }
        private void BuildI23I23AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I23I23AllorsString = new RelationType(objectTypes.I23, new System.Guid("0407c93e-f2ea-49e4-8779-44b42c554e60"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I23AllorsString",
                    PluralName = "I23AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildI3I3C4many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3C4many2many = new RelationType(objectTypes.I3, new System.Guid("00b706bb-681e-44ce-bbf3-c3b01bb11269"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "I3C4many2many",
                    PluralName = "I3C4many2manies",
                },
            };
        }
        private void BuildI3I3AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3AllorsString = new RelationType(objectTypes.I3, new System.Guid("25a3bcbf-cd9a-4735-879d-c5415b19cf88"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I3AllorsString",
                    PluralName = "I3AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildI3I3I4one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3I4one2many = new RelationType(objectTypes.I3, new System.Guid("2b273c39-cc85-4585-806f-d991f43dda29"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "I3I4one2many",
                    PluralName = "I3I4one2manies",
                },
            };
        }
        private void BuildI3I3C4one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3C4one2many = new RelationType(objectTypes.I3, new System.Guid("3a55d57f-768f-4c11-9c18-baa5f3eeda8c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "I3C4one2many",
                    PluralName = "I3C4one2manies",
                },
            };
        }
        private void BuildI3I3I4many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3I4many2many = new RelationType(objectTypes.I3, new System.Guid("3f553db3-b490-4de5-b388-5d096d83de0d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "I3I4many2many",
                    PluralName = "I3I4many2manies",
                },
            };
        }
        private void BuildI3I3I4many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3I4many2one = new RelationType(objectTypes.I3, new System.Guid("57f8f305-e1a9-452b-bcc1-febf7ccc346a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "I3I4many2one",
                    PluralName = "I3I4many2ones",
                },
            };
        }
        private void BuildI3I3C4one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3C4one2one = new RelationType(objectTypes.I3, new System.Guid("cc48853e-46f3-4292-be9b-8a4937cea308"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "I3C4one2one",
                    PluralName = "I3C4one2ones",
                },
            };
        }
        private void BuildI3I3I4one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3I4one2one = new RelationType(objectTypes.I3, new System.Guid("d36e7cf1-08d1-4333-b539-e50503c10934"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.I4,
                    SingularName = "I3I4one2one",
                    PluralName = "I3I4one2ones",
                },
            };
        }
        private void BuildI3I3C4many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3C4many2one = new RelationType(objectTypes.I3, new System.Guid("d5ff5333-6bbc-4bb5-8208-44e1d4b53aee"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C4,
                    SingularName = "I3C4many2one",
                    PluralName = "I3C4many2ones",
                },
            };
        }
        private void BuildI3I3StringEquals(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3I3StringEquals = new RelationType(objectTypes.I3, new System.Guid("e0cf6092-d865-4386-823b-a2906a3eab1a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I3StringEquals",
                    PluralName = "I3StringEquals",
		            Size = 256,
                },
            };
        }
        private void BuildI3C1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I3C1one2one = new RelationType(objectTypes.I3, new System.Guid("fb90c539-a392-4618-bb0b-9809a3a673aa"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "C1one2one",
                    PluralName = "C1one2ones",
                },
            };
        }
        private void BuildI34I34AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I34I34AllorsDecimal = new RelationType(objectTypes.I34, new System.Guid("37e8d764-bfeb-40d8-b7e9-d94e455dcc11"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "I34AllorsDecimal",
                    PluralName = "I34AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildI34I34AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I34I34AllorsBoolean = new RelationType(objectTypes.I34, new System.Guid("4a6db64f-aeeb-4657-a24c-7997129f3efa"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "I34AllorsBoolean",
                    PluralName = "I34AllorsBooleans",
                },
            };
        }
        private void BuildI34I34AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I34I34AllorsDouble = new RelationType(objectTypes.I34, new System.Guid("9b774204-37f3-4663-9162-dc801ea200f6"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "I34AllorsDouble",
                    PluralName = "I34AllorsDoubles",
                },
            };
        }
        private void BuildI34I34AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I34I34AllorsInteger = new RelationType(objectTypes.I34, new System.Guid("cd30dada-24c5-4b94-8f58-ab1018f087ea"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "I34AllorsInteger",
                    PluralName = "I34AllorsIntegers",
                },
            };
        }
        private void BuildI34I34AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.I34I34AllorsString = new RelationType(objectTypes.I34, new System.Guid("d8125c69-1921-4e16-84bc-d3d174be7b83"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "I34AllorsString",
                    PluralName = "I34AllorsStrings",
		            Size = 256,
                },
            };
        }

        private void BuildIGT32CompositeSelf13(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf13 = new RelationType(objectTypes.IGT32Composite, new System.Guid("010bc5d7-9e1e-4ca7-a146-33b73252c4c8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self13",
                    PluralName = "Self13s",
                },
            };
        }
        private void BuildIGT32CompositeSelf31(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf31 = new RelationType(objectTypes.IGT32Composite, new System.Guid("02894576-278f-4cbe-9c19-346187f9006f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self31",
                    PluralName = "Self31s",
                },
            };
        }
        private void BuildIGT32CompositeSelf14(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf14 = new RelationType(objectTypes.IGT32Composite, new System.Guid("03f0e0ab-d24d-4eae-9b05-0ce153055530"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self14",
                    PluralName = "Self14s",
                },
            };
        }
        private void BuildIGT32CompositeSelf21(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf21 = new RelationType(objectTypes.IGT32Composite, new System.Guid("11eb24d1-0c4d-4060-8373-e2f53da416d4"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self21",
                    PluralName = "Self21s",
                },
            };
        }
        private void BuildIGT32CompositeSelf2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf2 = new RelationType(objectTypes.IGT32Composite, new System.Guid("1d4d3282-f7bc-4619-ae32-d987b4bd87b7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self2",
                    PluralName = "Self2s",
                },
            };
        }
        private void BuildIGT32CompositeSelf23(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf23 = new RelationType(objectTypes.IGT32Composite, new System.Guid("3a691474-812c-4631-9909-0864297c9e86"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self23",
                    PluralName = "Self23s",
                },
            };
        }
        private void BuildIGT32CompositeSelf22(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf22 = new RelationType(objectTypes.IGT32Composite, new System.Guid("3b523d8e-2163-401a-9ccf-7d85777e216f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self22",
                    PluralName = "Self22s",
                },
            };
        }
        private void BuildIGT32CompositeSelf18(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf18 = new RelationType(objectTypes.IGT32Composite, new System.Guid("4f4eaf7d-cc6c-4279-b371-d569fc07f148"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self18",
                    PluralName = "Self18s",
                },
            };
        }
        private void BuildIGT32CompositeSelf17(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf17 = new RelationType(objectTypes.IGT32Composite, new System.Guid("6e2f60b4-ee37-4c66-9425-aee146f51bc8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self17",
                    PluralName = "Self17s",
                },
            };
        }
        private void BuildIGT32CompositeSelf3(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf3 = new RelationType(objectTypes.IGT32Composite, new System.Guid("6f1e2848-b27f-4ccc-a35e-467d77577a29"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self3",
                    PluralName = "Self3s",
                },
            };
        }
        private void BuildIGT32CompositeSelf29(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf29 = new RelationType(objectTypes.IGT32Composite, new System.Guid("77fccc90-38f2-48f6-b834-58f7f972823b"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self29",
                    PluralName = "Self29s",
                },
            };
        }
        private void BuildIGT32CompositeSelf26(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf26 = new RelationType(objectTypes.IGT32Composite, new System.Guid("7d18345c-7754-4ad7-96fa-e83460fa6235"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self26",
                    PluralName = "Self26s",
                },
            };
        }
        private void BuildIGT32CompositeSelf4(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf4 = new RelationType(objectTypes.IGT32Composite, new System.Guid("8ca8e840-1bf7-4131-b5a3-0abb66ba4e36"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self4",
                    PluralName = "Self4s",
                },
            };
        }
        private void BuildIGT32CompositeSelf8(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf8 = new RelationType(objectTypes.IGT32Composite, new System.Guid("8e898953-b166-4573-a56c-3be50b9c651d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self8",
                    PluralName = "Self8s",
                },
            };
        }
        private void BuildIGT32CompositeSelf24(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf24 = new RelationType(objectTypes.IGT32Composite, new System.Guid("90bb79e0-d32b-49e9-8c05-b02505a31858"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self24",
                    PluralName = "Self24s",
                },
            };
        }
        private void BuildIGT32CompositeSelf12(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf12 = new RelationType(objectTypes.IGT32Composite, new System.Guid("90fe5360-126b-4b2d-a7ba-b29c026883a4"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self12",
                    PluralName = "Self12s",
                },
            };
        }
        private void BuildIGT32CompositeSelf7(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf7 = new RelationType(objectTypes.IGT32Composite, new System.Guid("991b59d1-9225-4534-a86e-8668068c9d45"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self7",
                    PluralName = "Self7s",
                },
            };
        }
        private void BuildIGT32CompositeSelf6(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf6 = new RelationType(objectTypes.IGT32Composite, new System.Guid("a11bfd43-47a9-4f0f-a20a-ec60939a4de1"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self6",
                    PluralName = "Self6s",
                },
            };
        }
        private void BuildIGT32CompositeSelf25(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf25 = new RelationType(objectTypes.IGT32Composite, new System.Guid("ae8fbd21-64dd-4667-b0d9-f6398e14364f"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self25",
                    PluralName = "Self25s",
                },
            };
        }
        private void BuildIGT32CompositeSelf20(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf20 = new RelationType(objectTypes.IGT32Composite, new System.Guid("b6e0754a-b271-4853-afa0-fddb96444249"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self20",
                    PluralName = "Self20s",
                },
            };
        }
        private void BuildIGT32CompositeSelf9(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf9 = new RelationType(objectTypes.IGT32Composite, new System.Guid("b9d79c6c-46cb-4bd8-80a7-8bcae27a3d3c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self9",
                    PluralName = "Self9s",
                },
            };
        }
        private void BuildIGT32CompositeSelf11(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf11 = new RelationType(objectTypes.IGT32Composite, new System.Guid("c643a160-556b-44bb-b3e4-232d291ff1e2"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self11",
                    PluralName = "Self11s",
                },
            };
        }
        private void BuildIGT32CompositeSelf32(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf32 = new RelationType(objectTypes.IGT32Composite, new System.Guid("c662f343-3859-4d04-8d4b-011087c72885"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self32",
                    PluralName = "Self32s",
                },
            };
        }
        private void BuildIGT32CompositeSelf28(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf28 = new RelationType(objectTypes.IGT32Composite, new System.Guid("c6932f0a-e1de-4d93-ab94-80a5eb0a315c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self28",
                    PluralName = "Self28s",
                },
            };
        }
        private void BuildIGT32CompositeSelf33(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf33 = new RelationType(objectTypes.IGT32Composite, new System.Guid("c9f2803b-890d-4370-831b-83c65805b160"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self33",
                    PluralName = "Self33s",
                },
            };
        }
        private void BuildIGT32CompositeSelf27(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf27 = new RelationType(objectTypes.IGT32Composite, new System.Guid("cb03691e-8483-4af4-9fc0-83d9ab358e12"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self27",
                    PluralName = "Self27s",
                },
            };
        }
        private void BuildIGT32CompositeSelf30(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf30 = new RelationType(objectTypes.IGT32Composite, new System.Guid("d2b6c061-927e-4db5-b419-ec7375d8845a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self30",
                    PluralName = "Self30s",
                },
            };
        }
        private void BuildIGT32CompositeSelf1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf1 = new RelationType(objectTypes.IGT32Composite, new System.Guid("e50d68f0-ab9d-4a0e-8976-324037145aec"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self1",
                    PluralName = "Self1s",
                },
            };
        }
        private void BuildIGT32CompositeSelf15(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf15 = new RelationType(objectTypes.IGT32Composite, new System.Guid("ec22d147-fed5-40a7-9c85-4fccc0717127"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self15",
                    PluralName = "Self15s",
                },
            };
        }
        private void BuildIGT32CompositeSelf5(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf5 = new RelationType(objectTypes.IGT32Composite, new System.Guid("f16b7de2-aed2-49c9-b1dc-618e919136a6"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self5",
                    PluralName = "Self5s",
                },
            };
        }
        private void BuildIGT32CompositeSelf19(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf19 = new RelationType(objectTypes.IGT32Composite, new System.Guid("fdcad358-8532-471a-a47e-1ad45a34a962"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self19",
                    PluralName = "Self19s",
                },
            };
        }
        private void BuildIGT32CompositeSelf10(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf10 = new RelationType(objectTypes.IGT32Composite, new System.Guid("fee41b72-ace5-4cc4-bde5-e1df40b388e4"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self10",
                    PluralName = "Self10s",
                },
            };
        }
        private void BuildIGT32CompositeSelf16(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32CompositeSelf16 = new RelationType(objectTypes.IGT32Composite, new System.Guid("ffbe4164-497e-4b02-acc7-fefec48dc36e"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.IGT32Composite,
                    SingularName = "Self16",
                    PluralName = "Self16s",
                },
            };
        }
        private void BuildIGT32UnitAllorsString2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString2 = new RelationType(objectTypes.IGT32Unit, new System.Guid("113ea45f-0e8a-423d-b650-30ab4ac85ebd"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString2",
                    PluralName = "AllorsString2s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString5(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString5 = new RelationType(objectTypes.IGT32Unit, new System.Guid("163739dd-60aa-48b3-8566-43accb24cf0f"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString5",
                    PluralName = "AllorsString5s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString19(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString19 = new RelationType(objectTypes.IGT32Unit, new System.Guid("18bf90a6-2954-4e4f-bfa9-78ede63314bf"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString19",
                    PluralName = "AllorsString19s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString18(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString18 = new RelationType(objectTypes.IGT32Unit, new System.Guid("209d428f-87b5-49d9-b3b6-9ef357889f2a"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString18",
                    PluralName = "AllorsString18s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString21(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString21 = new RelationType(objectTypes.IGT32Unit, new System.Guid("2279e1c7-1f8d-4daf-b686-aee9c143ce5d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString21",
                    PluralName = "AllorsString21s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString31(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString31 = new RelationType(objectTypes.IGT32Unit, new System.Guid("26a72acf-af4e-48b5-af95-b3fa78bfbcf8"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString31",
                    PluralName = "AllorsString31s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString15(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString15 = new RelationType(objectTypes.IGT32Unit, new System.Guid("36daace4-f9d1-453d-9caf-90173b13017b"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString15",
                    PluralName = "AllorsString15s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString6(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString6 = new RelationType(objectTypes.IGT32Unit, new System.Guid("4c0539d2-2ef3-4572-8098-3e161c338316"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString6",
                    PluralName = "AllorsString6s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString27(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString27 = new RelationType(objectTypes.IGT32Unit, new System.Guid("505b67b2-6e0b-45cc-9474-5782ab40f0a7"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString27",
                    PluralName = "AllorsString27s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString11(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString11 = new RelationType(objectTypes.IGT32Unit, new System.Guid("60be7e02-6c19-4f55-a67d-041c0c29c7b1"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString11",
                    PluralName = "AllorsString11s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString33(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString33 = new RelationType(objectTypes.IGT32Unit, new System.Guid("63e19c51-8721-4a53-a129-fff09429498e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString33",
                    PluralName = "AllorsString33s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString32(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString32 = new RelationType(objectTypes.IGT32Unit, new System.Guid("6facb71c-1399-41c3-94cd-e51b2ace2d49"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString32",
                    PluralName = "AllorsString32s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString25(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString25 = new RelationType(objectTypes.IGT32Unit, new System.Guid("7890180e-3ea8-490d-a360-16f04ef567dd"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString25",
                    PluralName = "AllorsString25s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString8(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString8 = new RelationType(objectTypes.IGT32Unit, new System.Guid("7a653b33-2ea5-483f-903d-6f13891e6c44"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString8",
                    PluralName = "AllorsString8s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString28(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString28 = new RelationType(objectTypes.IGT32Unit, new System.Guid("81d16484-71fd-445b-a681-0363a6d95325"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString28",
                    PluralName = "AllorsString28s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString29(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString29 = new RelationType(objectTypes.IGT32Unit, new System.Guid("84670520-d8c9-407f-82e3-6eb53f1fb290"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString29",
                    PluralName = "AllorsString29s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString20(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString20 = new RelationType(objectTypes.IGT32Unit, new System.Guid("88324671-7170-4798-8cc0-d2b25212f7a1"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString20",
                    PluralName = "AllorsString20s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString16(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString16 = new RelationType(objectTypes.IGT32Unit, new System.Guid("8d97b1d0-304a-4e8a-b62f-f425e9327ad8"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString16",
                    PluralName = "AllorsString16s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString30(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString30 = new RelationType(objectTypes.IGT32Unit, new System.Guid("8f538538-785f-4cdc-9106-2137644f36ae"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString30",
                    PluralName = "AllorsString30s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString12(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString12 = new RelationType(objectTypes.IGT32Unit, new System.Guid("96f9bb98-8658-4903-9b97-7dbb50ac258d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString12",
                    PluralName = "AllorsString12s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString26(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString26 = new RelationType(objectTypes.IGT32Unit, new System.Guid("a0ce37ac-ec40-4215-9ff6-7b39121080af"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString26",
                    PluralName = "AllorsString26s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString17(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString17 = new RelationType(objectTypes.IGT32Unit, new System.Guid("a5ed3f77-5f87-4994-8f25-a35fad3f71fe"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString17",
                    PluralName = "AllorsString17s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString4(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString4 = new RelationType(objectTypes.IGT32Unit, new System.Guid("a6c3242f-aab8-481e-803e-67d7d45f15d3"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString4",
                    PluralName = "AllorsString4s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString10(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString10 = new RelationType(objectTypes.IGT32Unit, new System.Guid("a91487f7-8b1a-454c-9adb-e14c3ac49271"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString10",
                    PluralName = "AllorsString10s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString23(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString23 = new RelationType(objectTypes.IGT32Unit, new System.Guid("abd8508a-e03a-4bee-ac5f-738551400205"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString23",
                    PluralName = "AllorsString23s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString24(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString24 = new RelationType(objectTypes.IGT32Unit, new System.Guid("b43ff179-22f1-47cb-a304-24e4ec977cf9"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString24",
                    PluralName = "AllorsString24s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString1 = new RelationType(objectTypes.IGT32Unit, new System.Guid("b9309d7a-9946-4462-93a8-51f78efe0696"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString1",
                    PluralName = "AllorsString1s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString14(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString14 = new RelationType(objectTypes.IGT32Unit, new System.Guid("ca170e8c-5aef-452e-8a3e-1228054d9a85"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString14",
                    PluralName = "AllorsString14s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString13(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString13 = new RelationType(objectTypes.IGT32Unit, new System.Guid("cdb2dbc9-e481-4d7b-8746-e931c7c75da5"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString13",
                    PluralName = "AllorsString13s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString22(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString22 = new RelationType(objectTypes.IGT32Unit, new System.Guid("ce493f43-d598-43fd-970f-042debdc0d67"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString22",
                    PluralName = "AllorsString22s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString3(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString3 = new RelationType(objectTypes.IGT32Unit, new System.Guid("db9ce637-26ba-4551-abc2-4199d91e7db5"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString3",
                    PluralName = "AllorsString3s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString7(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString7 = new RelationType(objectTypes.IGT32Unit, new System.Guid("e27c59c0-a8ed-46c2-8fd6-707bb45b8af5"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString7",
                    PluralName = "AllorsString7s",
		            Size = 256,
                },
            };
        }
        private void BuildIGT32UnitAllorsString9(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.IGT32UnitAllorsString9 = new RelationType(objectTypes.IGT32Unit, new System.Guid("e518ffe9-7a15-469d-9062-fb0f3e25fde3"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString9",
                    PluralName = "AllorsString9s",
		            Size = 256,
                },
            };
        }
        private void BuildILT32CompositeSelf3(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32CompositeSelf3 = new RelationType(objectTypes.ILT32Composite, new System.Guid("be3fc71d-66d8-411f-ab5f-4ed91e437852"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.ILT32Composite,
                    SingularName = "Self3",
                    PluralName = "Self3s",
                },
            };
        }
        private void BuildILT32CompositeSelf2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32CompositeSelf2 = new RelationType(objectTypes.ILT32Composite, new System.Guid("c03a8b50-7fd1-4304-9d45-2c699fcbee80"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.ILT32Composite,
                    SingularName = "Self2",
                    PluralName = "Self2s",
                },
            };
        }
        private void BuildILT32CompositeSelf1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32CompositeSelf1 = new RelationType(objectTypes.ILT32Composite, new System.Guid("d0eeeb45-97a6-465e-9a05-7e0fa970a969"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.ILT32Composite,
                    SingularName = "Self1",
                    PluralName = "Self1s",
                },
            };
        }
        private void BuildILT32UnitAllorsString1(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32UnitAllorsString1 = new RelationType(objectTypes.ILT32Unit, new System.Guid("6822f677-7249-4c28-9b9c-18b21ba6f597"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString1",
                    PluralName = "AllorsString1s",
		            Size = 256,
                },
            };
        }
        private void BuildILT32UnitAllorsString3(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32UnitAllorsString3 = new RelationType(objectTypes.ILT32Unit, new System.Guid("b2734796-7140-4830-a0de-88df7d27b6a8"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString3",
                    PluralName = "AllorsString3s",
		            Size = 256,
                },
            };
        }
        private void BuildILT32UnitAllorsString2(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ILT32UnitAllorsString2 = new RelationType(objectTypes.ILT32Unit, new System.Guid("ced16c48-6301-4652-8dcb-ed8a80ea7ce4"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "AllorsString2",
                    PluralName = "AllorsString2s",
		            Size = 256,
                },
            };
        }
        private void BuildInterfaceWithoutConcreteClassAllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.InterfaceWithoutConcreteClassAllorsBoolean = new RelationType(objectTypes.InterfaceWithoutConcreteClass, new System.Guid("b490715d-e318-471b-bd37-1c1e12c0314e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "AllorsBoolean",
                    PluralName = "AllorsBooleans",
                },
            };
        }
        private void BuildISandboxInvisibleValue(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ISandboxInvisibleValue = new RelationType(objectTypes.ISandbox, new System.Guid("38361bff-62b3-4607-8291-cfdaeedbd36d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "InvisibleValue",
                    PluralName = "InvisibleValues",
		            Size = 256,
                },
            };
        }
        private void BuildISandboxInvisibleMany(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ISandboxInvisibleMany = new RelationType(objectTypes.ISandbox, new System.Guid("796ab057-88a0-4d71-bc4a-2673a209161b"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.ISandbox,
                    SingularName = "InvisibleMany",
                    PluralName = "InvisibleManies",
                },
            };
        }
        private void BuildISandboxInvisibleOne(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.ISandboxInvisibleOne = new RelationType(objectTypes.ISandbox, new System.Guid("dba5deb2-880d-47f4-adae-0b3125ff1379"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.ISandbox,
                    SingularName = "InvisibleOne",
                    PluralName = "InvisibleOnes",
                },
            };
        }
        private void BuildNamedName(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.NamedName = new RelationType(objectTypes.Named, new System.Guid("ce43ca5e-4dfb-4fe1-98ea-17d8382e9531"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "Name",
                    PluralName = "Names",
		            Size = 256,
                },
            };
        }
        private void BuildNamedIndex(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.NamedIndex = new RelationType(objectTypes.Named, new System.Guid("fdad723a-f062-492a-989c-8d8727c52679"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "Index",
                    PluralName = "Indices",
                },
            };
        }

        private void BuildS1S1AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsDecimal = new RelationType(objectTypes.S1, new System.Guid("294e7ce3-1b0b-490a-a5e8-6149885d4943"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "S1AllorsDecimal",
                    PluralName = "S1AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildS1S1AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsInteger = new RelationType(objectTypes.S1, new System.Guid("4cd28d56-ffd6-461c-b9ed-ca0e4bae51df"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "S1AllorsInteger",
                    PluralName = "S1AllorsIntegers",
                },
            };
        }
        private void BuildS1S1AllorsBinary(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsBinary = new RelationType(objectTypes.S1, new System.Guid("55ab6cfa-651b-48ec-bc33-ad3a381d2260"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Binary,
                    SingularName = "S1AllorsBinary",
                    PluralName = "S1AllorsBinaries",
		            Size = -1,
                },
            };
        }
        private void BuildS1S1AllorsUnique(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsUnique = new RelationType(objectTypes.S1, new System.Guid("645c20ac-5b4f-40db-8d11-d2b07123dabe"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Unique,
                    SingularName = "S1AllorsUnique",
                    PluralName = "S1AllorsUniques",
                },
            };
        }
        private void BuildS1S1StringLarge(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1StringLarge = new RelationType(objectTypes.S1, new System.Guid("678b14c4-b5ae-48e3-ac06-2459cab66c34"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "S1StringLarge",
                    PluralName = "S1StringLarges",
		            Size = 100000,
                },
            };
        }
        private void BuildS1S1S2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1S2many2one = new RelationType(objectTypes.S1, new System.Guid("6a166388-5bca-4cd9-bfee-0da27cbc3073"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "S1S2many2one",
                    PluralName = "S1S2many2ones",
                },
            };
        }
        private void BuildS1S1S2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1S2one2many = new RelationType(objectTypes.S1, new System.Guid("6ee98698-15dc-4998-88c3-d2a4d1c19e8c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "S1S2one2many",
                    PluralName = "S1S2one2manies",
                },
            };
        }
        private void BuildS1S1AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsDouble = new RelationType(objectTypes.S1, new System.Guid("701ca57d-241f-470c-b690-9045c0f76c8f"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "S1AllorsDouble",
                    PluralName = "S1AllorsDoubles",
                },
            };
        }
        private void BuildS1S1AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsString = new RelationType(objectTypes.S1, new System.Guid("70815e0c-11d4-41ac-b0b2-105f8ede6d27"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "S1AllorsString",
                    PluralName = "S1AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildS1S1C1many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1C1many2one = new RelationType(objectTypes.S1, new System.Guid("77afee4a-08b7-4231-aa73-575145efd1e3"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "S1C1many2one",
                    PluralName = "S1C1many2ones",
                },
            };
        }
        private void BuildS1S1C1one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1C1one2one = new RelationType(objectTypes.S1, new System.Guid("8f5485ba-5a82-4d01-809e-52b467f958d8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "S1C1one2one",
                    PluralName = "S1C1one2ones",
                },
            };
        }
        private void BuildS1S1AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsBoolean = new RelationType(objectTypes.S1, new System.Guid("9fbcf7ce-3b59-458d-ab5e-9c48dd3842b3"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "S1AllorsBoolean",
                    PluralName = "S1AllorsBooleans",
                },
            };
        }
        private void BuildS1S1C1many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1C1many2many = new RelationType(objectTypes.S1, new System.Guid("c0cfe3ee-d184-40bd-8354-b0b0bd4e641c"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "S1C1many2many",
                    PluralName = "S1C1many2manies",
                },
            };
        }
        private void BuildS1S1S2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1S2many2many = new RelationType(objectTypes.S1, new System.Guid("c6f49460-a259-44de-b674-4d0585fe00cd"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "S1S2many2many",
                    PluralName = "S1S2many2manies",
                },
            };
        }
        private void BuildS1S1S2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1S2one2one = new RelationType(objectTypes.S1, new System.Guid("dc22175f-185d-4cd3-b492-74b0a9389c91"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S2,
                    SingularName = "S1S2one2one",
                    PluralName = "S1S2one2ones",
                },
            };
        }
        private void BuildS1S1AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1AllorsDateTime = new RelationType(objectTypes.S1, new System.Guid("e263ac2b-822d-4aa4-8a8c-67db3f2b4bb0"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "S1AllorsDateTime",
                    PluralName = "S1AllorsDateTimes",
                },
            };
        }
        private void BuildS1S1C1one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1S1C1one2many = new RelationType(objectTypes.S1, new System.Guid("ef918b82-87f4-4591-bf19-2fd5a1019ece"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C1,
                    SingularName = "S1C1one2many",
                    PluralName = "S1C1one2manies",
                },
            };
        }
        private void BuildS12S12AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsString = new RelationType(objectTypes.S12, new System.Guid("06fabe71-737a-4cff-ac10-2d15dafce503"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "S12AllorsString",
                    PluralName = "S12AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildS12S12AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsDateTime = new RelationType(objectTypes.S12, new System.Guid("2eb9e232-4ed4-4997-a21a-f11bb0fe3b0e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "S12AllorsDateTime",
                    PluralName = "S12AllorsDateTimes",
                },
            };
        }
        private void BuildS12S12C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12C2many2many = new RelationType(objectTypes.S12, new System.Guid("39f50108-df59-455d-8371-fc07f3dbb7ef"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S12C2many2many",
                    PluralName = "S12C2many2manies",
                },
            };
        }
        private void BuildS12S12C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12C2many2one = new RelationType(objectTypes.S12, new System.Guid("61e8c425-407e-408b-9f2e-c95548833004"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S12C2many2one",
                    PluralName = "S12C2many2ones",
                },
            };
        }
        private void BuildS12S12C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12C2one2one = new RelationType(objectTypes.S12, new System.Guid("830117d4-fbe1-4944-bacf-54331e8451d7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S12C2one2one",
                    PluralName = "S12C2one2ones",
                },
            };
        }
        private void BuildS12S12C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12C2one2many = new RelationType(objectTypes.S12, new System.Guid("a3aac482-aad0-4b59-9361-51b23867e5a2"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S12C2one2many",
                    PluralName = "S12C2one2manies",
                },
            };
        }
        private void BuildS12S12AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsBoolean = new RelationType(objectTypes.S12, new System.Guid("a97eca8e-807b-4a06-9587-6240f6150203"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "S12AllorsBoolean",
                    PluralName = "S12AllorsBooleans",
                },
            };
        }
        private void BuildS12S12AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsDouble = new RelationType(objectTypes.S12, new System.Guid("acc4ae39-2d5c-4485-be22-87b27e84b627"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "S12AllorsDouble",
                    PluralName = "S12AllorsDoubles",
                },
            };
        }
        private void BuildS12S12AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsInteger = new RelationType(objectTypes.S12, new System.Guid("d07313ca-fd8d-4c74-928e-41274aa28de9"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "S12AllorsInteger",
                    PluralName = "S12AllorsIntegers",
                },
            };
        }
        private void BuildS12S12AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S12S12AllorsDecimal = new RelationType(objectTypes.S12, new System.Guid("f7ace363-89bd-4ea5-a865-4a6e3de2d723"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "S12AllorsDecimal",
                    PluralName = "S12AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildS1234Name(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234Name = new RelationType(objectTypes.S1234, new System.Guid("493D7A12-B7E2-455C-AA1E-B4F98C17DD19"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "Name",
                    PluralName = "Names",
		            Size = 256,
                },
            };
        }
        private void BuildS1234S1234AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsDouble = new RelationType(objectTypes.S1234, new System.Guid("012a43d3-e1e0-4693-a771-1526c29b7ac4"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "S1234AllorsDouble",
                    PluralName = "S1234AllorsDoubles",
                },
            };
        }
        private void BuildS1234S1234AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsDecimal = new RelationType(objectTypes.S1234, new System.Guid("2ac36edd-d718-4252-b7cf-74849e1fca6e"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "S1234AllorsDecimal",
                    PluralName = "S1234AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildS1234S1234AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsInteger = new RelationType(objectTypes.S1234, new System.Guid("46263379-afd4-4472-bb05-057fb88163ab"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "S1234AllorsInteger",
                    PluralName = "S1234AllorsIntegers",
                },
            };
        }
        private void BuildS1234S1234many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234many2one = new RelationType(objectTypes.S1234, new System.Guid("4b846355-000b-4651-bff2-51f1275c1461"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1234,
                    SingularName = "S1234many2one",
                    PluralName = "S1234many2ones",
                },
            };
        }
        private void BuildS1234S1234C2one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234C2one2one = new RelationType(objectTypes.S1234, new System.Guid("58a56dee-c613-4d76-ab99-5608e7709cd8"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S1234C2one2one",
                    PluralName = "S1234C2one2ones",
                },
            };
        }
        private void BuildS1234S1234C2many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234C2many2many = new RelationType(objectTypes.S1234, new System.Guid("73302b50-8526-40ae-a202-5b17e1093629"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S1234C2many2many",
                    PluralName = "S1234C2many2manies",
                },
            };
        }
        private void BuildS1234S1234one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234one2many = new RelationType(objectTypes.S1234, new System.Guid("8fb24e1c-9e04-4b3d-8a97-153d3c0ea7ec"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1234,
                    SingularName = "S1234one2many",
                    PluralName = "S1234one2manies",
                },
            };
        }
        private void BuildS1234S1234C2one2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234C2one2many = new RelationType(objectTypes.S1234, new System.Guid("94a49847-273f-4e9b-b07b-d615d994757a"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToMany,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S1234C2one2many",
                    PluralName = "S1234C2one2manies",
                },
            };
        }
        private void BuildS1234S1234many2many(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234many2many = new RelationType(objectTypes.S1234, new System.Guid("a2e7c6f6-ca0d-4fb3-9431-8dd1be7ebdb7"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToMany,
                RoleType =
                {
                    ObjectType = objectTypes.S1234,
                    SingularName = "S1234many2many",
                    PluralName = "S1234many2manies",
                },
            };
        }
        private void BuildS1234ClassName(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234ClassName = new RelationType(objectTypes.S1234, new System.Guid("b299db28-1107-4120-946c-fbdad2271c5c"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "ClassName",
                    PluralName = "ClassNames",
		            Size = 256,
                },
            };
        }
        private void BuildS1234S1234AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsDateTime = new RelationType(objectTypes.S1234, new System.Guid("c13e8484-75a3-40be-afd5-44a31aca3771"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "S1234AllorsDateTime",
                    PluralName = "S1234AllorsDateTimes",
                },
            };
        }
        private void BuildS1234S1234one2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234one2one = new RelationType(objectTypes.S1234, new System.Guid("c2fac2fc-14c6-4aa3-89ff-afba1316d06d"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.OneToOne,
                RoleType =
                {
                    ObjectType = objectTypes.S1234,
                    SingularName = "S1234one2one",
                    PluralName = "S1234one2ones",
                },
            };
        }
        private void BuildS1234S1234C2many2one(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234C2many2one = new RelationType(objectTypes.S1234, new System.Guid("df9eb36a-366f-4a5a-a750-f2f23f681c74"))
            {
		        AssignedMultiplicity = Allors.Multiplicity.ManyToOne,
                RoleType =
                {
                    ObjectType = objectTypes.C2,
                    SingularName = "S1234C2many2one",
                    PluralName = "S1234C2many2ones",
                },
            };
        }
        private void BuildS1234S1234AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsString = new RelationType(objectTypes.S1234, new System.Guid("e6164217-2f54-4134-8c53-4a45caa9dd11"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "S1234AllorsString",
                    PluralName = "S1234AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildS1234S1234AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S1234S1234AllorsBoolean = new RelationType(objectTypes.S1234, new System.Guid("ef45cd72-2e16-47df-b949-c803a554b307"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "S1234AllorsBoolean",
                    PluralName = "S1234AllorsBooleans",
                },
            };
        }
        private void BuildS2S2AllorsString(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsString = new RelationType(objectTypes.S2, new System.Guid("1c758737-140a-49f0-badc-29658b4bc55f"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.String,
                    SingularName = "S2AllorsString",
                    PluralName = "S2AllorsStrings",
		            Size = 256,
                },
            };
        }
        private void BuildS2S2AllorsInteger(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsInteger = new RelationType(objectTypes.S2, new System.Guid("1f5a6afe-f458-43db-bea0-8c90074b5abf"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Integer,
                    SingularName = "S2AllorsInteger",
                    PluralName = "S2AllorsIntegers",
                },
            };
        }
        private void BuildS2S2AllorsDouble(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsDouble = new RelationType(objectTypes.S2, new System.Guid("74dd2b7b-e647-4967-9838-46c701baf3a7"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Float,
                    SingularName = "S2AllorsDouble",
                    PluralName = "S2AllorsDoubles",
                },
            };
        }
        private void BuildS2S2AllorsBoolean(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsBoolean = new RelationType(objectTypes.S2, new System.Guid("9a191c76-bd05-498f-91da-33184c72fe90"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Boolean,
                    SingularName = "S2AllorsBoolean",
                    PluralName = "S2AllorsBooleans",
                },
            };
        }
        private void BuildS2S2AllorsDecimal(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsDecimal = new RelationType(objectTypes.S2, new System.Guid("9d70a5f5-ed72-4ba3-98ac-e50752f8fb79"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.Decimal,
                    SingularName = "S2AllorsDecimal",
                    PluralName = "S2AllorsDecimals",
		        Precision = 19,
		        Scale = 2,
                },
            };
        }
        private void BuildS2S2AllorsDateTime(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, RelationTypes relationTypes)
        {
            relationTypes.S2S2AllorsDateTime = new RelationType(objectTypes.S2, new System.Guid("a305d91a-5fe1-467d-9f24-6cce5dd30b1d"))
            {
                RoleType =
                {
                    ObjectType = objectTypes.DateTime,
                    SingularName = "S2AllorsDateTime",
                    PluralName = "S2AllorsDateTimes",
                },
            };
        }



		private void BuildMethodTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
		{
    this.BuildSandboxDoIt(meta, domains, objectTypes, methodTypes);















    this.BuildNamedInheritedDoIt(meta, domains, objectTypes, methodTypes);







		}

        private void BuildSandboxDoIt(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
        {
            methodTypes.SandboxDoIt = new MethodClass(objectTypes.Sandbox, new System.Guid("E551BDCA-9532-4024-B127-E971A5C1CDB2"))
            {
                Name = "DoIt",
            };
        }















        private void BuildNamedInheritedDoIt(MetaPopulation meta, Domains domains, ObjectTypes objectTypes, MethodTypes methodTypes)
        {
            methodTypes.NamedInheritedDoIt = new MethodInterface(objectTypes.Named, new System.Guid("BFDDD727-6793-41A4-873D-BF80535D7DE2"))
            {
                Name = "InheritedDoIt",
            };
        }







	}
}