group AllorsCSharpRepository;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<1.0.6>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(repository) ::= <<
$!
Copyright 2002-2016 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="builder" output="builder.g.cs"/>
</generations>
>>

builder(repository) ::= <<
// <auto-generated />
namespace Allors.Meta
{
	public class MetaBuilder
	{
        internal class Domains
        {
$repository.Domains:{assembly|              public Domain $assembly.Name$;}; separator="\n"$
        }

        internal class ObjectTypes
        {
$repository.Units:{unit|              public Unit $unit.SingularName$;}; separator="\n"$
$repository.Interfaces:{interface|              public Interface $interface.SingularName$;}; separator="\n"$
$repository.Classes:{class|              public Class $class.SingularName$;}; separator="\n"$
        }


        public MetaPopulation Build() {
            var meta =  new MetaPopulation();
            var domains = new Domains();
            var objectTypes = new ObjectTypes();

            this.BuildDomains(meta, domains);
            this.BuildDomainInheritances(meta, domains);
            this.BuildUnits(meta, domains, objectTypes);
            this.BuildInterfaces(meta, domains, objectTypes);
            this.BuildClasses(meta, domains, objectTypes);
            this.BuildInheritances(meta, domains, objectTypes);
            this.BuildRelationTypes(meta, domains, objectTypes);
            this.BuildMethodTypes(meta, domains, objectTypes);

            return meta;
        }

		private void BuildDomains(MetaPopulation meta, Domains domains)
		{
$repository.Domains:{assembly|$build_domain(assembly)$}; separator="\n"$
		}

		private void BuildDomainInheritances(MetaPopulation meta, Domains domains)
		{
$repository.Domains:{domain|$build_domain_inheritance(domain)$}; separator="\n"$
		}

		private void BuildUnits(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Units:{unit|$build_unit(unit)$}; separator="\n"$
		}

		private void BuildInterfaces(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Interfaces:{interface|$build_interface(interface)$}; separator="\n"$
		}

		private void BuildClasses(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Classes:{class|$build_class(class)$}; separator="\n"$
		}

		private void BuildInheritances(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Composites:{composite|$inheritance(composite)$}; separator="\n"$
		}

		private void BuildRelationTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Composites:{composite|$build_relations(composite)$}; separator="\n"$
		}

$repository.Composites:{composite|$relations(composite)$}; separator="\n"$

		private void BuildMethodTypes(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
		{
$repository.Composites:{composite|$build_methods(composite)$}; separator="\n"$
		}

$repository.Composites:{composite|$methods(composite)$}; separator="\n"$
	}
}
>>

build_domain(assembly) ::= <<
	        domains.$assembly.Name$ = new Domain(meta, new System.Guid("$assembly.Id$"))
			{
				Name = "$assembly.Name$"
			};
>>

build_domain_inheritance(domain) ::= <<
$if(domain.Base)$
			domains.$domain.Name$.AddDirectSuperdomain(domains.$domain.base.Name$);
$endif$
>>

build_unit(unit) ::= <<
	        objectTypes.$unit.SingularName$ = new Unit(meta, UnitIds.$unit.SingularName$)
            {
                UnitTag = UnitTags.$unit.SingularName$,
                SingularName = UnitNames.$unit.SingularName$
            };
>>

build_interface(interface) ::= <<
	        objectTypes.$interface.SingularName$ = new Interface(meta, new System.Guid("$interface.AttributeByName.Id.Value$"))
            {
                SingularName = "$interface.SingularName$",
                $if(interface.AttributeByName.Plural)$PluralName = "$interface.AttributeByName.Plural.Value$",$endif$
                $if(interface.XmlDoc)$XmlDoc = @"$interface.XmlDoc.VerbatimValue$",$endif$
                $if(interface.AttributeByName.Synced)$AssignedIsSynced = $interface.AttributeByName.Synced.Value$$endif$
            };
>>

build_class(class) ::= <<
	        objectTypes.$class.SingularName$ = new Class(meta, new System.Guid("$class.AttributeByName.Id.Value$"))
            {
                AssignedOrigin = Allors.Origin.$class.Origin$,
                SingularName = "$class.SingularName$",
                PluralName = "$class.PluralName$",
                $if(class.WorkspaceNames)$WorkspaceNames = new[] {$class.WorkspaceNames:{name|"$name$"}; separator=", "$},$endif$
                $if(class.XmlDoc)$XmlDoc = @"$class.XmlDoc.VerbatimValue$",$endif$
                $if(class.AttributeByName.Synced)$AssignedIsSynced = $class.AttributeByName.Synced.Value$$endif$
            };
>>

inheritance(composite) ::= <<$composite.ImplementedInterfaces:{implementedInterface|$build_inheritance(composite, implementedInterface)$}; separator="\n"$>>
build_inheritance(composite, implementedInterface) ::= <<            new Inheritance(meta){ Subtype = objectTypes.$composite.SingularName$, Supertype = objectTypes.$implementedInterface.SingularName$};>>

build_relations(composite) ::= <<
$composite.DefinedProperties:{property|     this.Build$property.DefiningType.SingularName$$property.RoleSingularName$(meta, domains, objectTypes);}; separator="\n"$
>>

relations(composite) ::= <<
$composite.DefinedProperties:{property|$relation(property)$}; separator="\n"$
>>

relation(property) ::= <<
        private void Build$property.DefiningType.SingularName$$property.RoleSingularName$(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
        {
            new RelationType(meta, new System.Guid("$property.AttributeByName.Id.Value$"), new System.Guid("$property.AttributeByName.AssociationId.Value$"), new System.Guid("$property.AttributeByName.RoleId.Value$"))
            {
                AssignedOrigin = Origin.$property.Origin$,
$if(property.WorkspaceNames)$		        WorkspaceNames = new[] {$property.WorkspaceNames:{name|"$name$"}; separator=", "$},$endif$
$if(property.XmlDoc)$		    XmlDoc = @"$property.XmlDoc.VerbatimValue$",$endif$
$if(property.AttributeByName.Multiplicity)$		        AssignedMultiplicity = Allors.Multiplicity.$property.AttributeByName.Multiplicity.Value$,$endif$
$if(property.AttributeByName.Derived)$		        IsDerived = $property.AttributeByName.Derived.Value$,$endif$
$if(property.AttributeByName.Synced)$		    IsSynced = $property.AttributeByName.Synced.Value$,$endif$
$if(property.AttributeByName.Indexed)$		        IsIndexed = $property.AttributeByName.Indexed.Value$,$endif$
                AssociationType =
                {
                    ObjectType = objectTypes.$property.DefiningType.SingularName$,
                },
                RoleType =
                {
                    ObjectType = objectTypes.$property.Type.SingularName$,
                    SingularName = "$property.RoleSingularName$",
                    PluralName = "$property.RolePluralName$",
$if(property.AttributeByName.Required)$		            IsRequired = $property.AttributeByName.Required.Value$,$endif$
$if(property.AttributeByName.Unique)$		          IsUnique = $property.AttributeByName.Unique.Value$,$endif$
$if(property.AttributeByName.Size)$		            Size = $property.AttributeByName.Size.Value$,$endif$
$if(property.AttributeByName.Precision)$		        Precision = $property.AttributeByName.Precision.Value$,$endif$
$if(property.AttributeByName.Scale)$		        Scale = $property.AttributeByName.Scale.Value$,$endif$
$if(property.AttributeByName.MediaType)$		        MediaType = "$property.AttributeByName.MediaType.Value$",$endif$
                },
            };
        }
>>

build_methods(composite) ::= <<
$composite.DefinedMethods:{method|     this.Build$method.DefiningType.SingularName$$method.Name$(meta, domains, objectTypes);}; separator="\n"$
>>

methods(composite) ::= <<$composite.DefinedMethods:{method|$method(method)$}; separator="\n"$>>
method(method) ::= <<
        private void Build$method.DefiningType.SingularName$$method.Name$(MetaPopulation meta, Domains domains, ObjectTypes objectTypes)
        {
            new MethodType(meta, new System.Guid("$method.AttributeByName.Id.Value$"))
            {
                ObjectType = objectTypes.$method.DefiningType.SingularName$,
                Name = "$method.Name$",
$if(method.WorkspaceNames)$		        WorkspaceNames = new[] {$method.WorkspaceNames:{name|"$name$"}; separator=", "$},$endif$
$if(method.XmlDoc)$		        XmlDoc = @"$method.XmlDoc.VerbatimValue$",$endif$
            };
        }
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"
